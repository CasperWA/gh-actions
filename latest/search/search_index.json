{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"CI/CD tools \u00b6 Current version to use: v1 Use tried and tested continuous integration (CI) and continuous deployment (CD) tools from this repository. Currently, the repository offers GitHub Actions callable/reusable workflows and pre-commit hooks. GitHub Actions callable/reusable Workflows \u00b6 This repository contains reusable workflows for GitHub Actions. They are mainly for usage with modern Python package repositories. Available workflows \u00b6 The callable, reusable workflows available from this repository are described in detail in this documentation under the Workflows section. General usage \u00b6 See the GitHub Docs on the topic of calling a reusable workflow to understand how one can incoporate one of these workflows in your workflow. Note Workflow-level set env context variables cannot be used when setting input values for the called workflow. See the GitHub documentation for more information on the env context. Under the Workflows section for each available workflow, a usage example will be given. pre-commit hooks \u00b6 This repository contains hooks for keeping the documentation up-to-date, making available a few invoke tasks used in the reusable workflows. By implementing and using these hooks together with the workflows, one may ensure no extra commits are created during the workflow run to update the documentation. Available hooks \u00b6 The pre-commit hooks available from this repository are described in detail in this documentation under the Hooks section. General usage \u00b6 Add the hooks to your .pre-commit-config.yaml file. See the pre-commit webpage for more information about how to use pre-commit. Under the Hooks section for each available hook, a usage example will be given. License & copyright \u00b6 This repository licensed under the MIT LICENSE with copyright \u00a9 2022 Casper Welzel Andersen ( CasperWA ) & SINTEF ( on GitHub ). Funding support \u00b6 This repository has been supported by the following projects: OntoTrans (2020-2024) that receives funding from the European Union\u2019s Horizon 2020 Research and Innovation Programme, under Grant Agreement n. 862136. OpenModel (2021-2025) receives funding from the European Union\u2019s Horizon 2020 Research and Innovation Programme - DT-NMBP-11-2020 Open Innovation Platform for Materials Modelling, under Grant Agreement no: 953167.","title":"Home"},{"location":"#cicd-tools","text":"Current version to use: v1 Use tried and tested continuous integration (CI) and continuous deployment (CD) tools from this repository. Currently, the repository offers GitHub Actions callable/reusable workflows and pre-commit hooks.","title":"CI/CD tools"},{"location":"#github-actions-callablereusable-workflows","text":"This repository contains reusable workflows for GitHub Actions. They are mainly for usage with modern Python package repositories.","title":"GitHub Actions callable/reusable Workflows"},{"location":"#available-workflows","text":"The callable, reusable workflows available from this repository are described in detail in this documentation under the Workflows section.","title":"Available workflows"},{"location":"#general-usage","text":"See the GitHub Docs on the topic of calling a reusable workflow to understand how one can incoporate one of these workflows in your workflow. Note Workflow-level set env context variables cannot be used when setting input values for the called workflow. See the GitHub documentation for more information on the env context. Under the Workflows section for each available workflow, a usage example will be given.","title":"General usage"},{"location":"#pre-commit-hooks","text":"This repository contains hooks for keeping the documentation up-to-date, making available a few invoke tasks used in the reusable workflows. By implementing and using these hooks together with the workflows, one may ensure no extra commits are created during the workflow run to update the documentation.","title":"pre-commit hooks"},{"location":"#available-hooks","text":"The pre-commit hooks available from this repository are described in detail in this documentation under the Hooks section.","title":"Available hooks"},{"location":"#general-usage_1","text":"Add the hooks to your .pre-commit-config.yaml file. See the pre-commit webpage for more information about how to use pre-commit. Under the Hooks section for each available hook, a usage example will be given.","title":"General usage"},{"location":"#license-copyright","text":"This repository licensed under the MIT LICENSE with copyright \u00a9 2022 Casper Welzel Andersen ( CasperWA ) & SINTEF ( on GitHub ).","title":"License &amp; copyright"},{"location":"#funding-support","text":"This repository has been supported by the following projects: OntoTrans (2020-2024) that receives funding from the European Union\u2019s Horizon 2020 Research and Innovation Programme, under Grant Agreement n. 862136. OpenModel (2021-2025) receives funding from the European Union\u2019s Horizon 2020 Research and Innovation Programme - DT-NMBP-11-2020 Open Innovation Platform for Materials Modelling, under Grant Agreement no: 953167.","title":"Funding support"},{"location":"CHANGELOG/","text":"Changelog \u00b6 Unreleased (2022-11-16) \u00b6 Full Changelog Fixed bugs: Undo commit d525ea0f069b6615aa352a7f385c21b31f29b985 #77 Merged pull requests: Make --strict toggleable for mkdocs build #78 ( CasperWA ) [Auto-generated] Update dependencies #76 ( TEAM4-0 ) v1.3.4 (2022-10-31) \u00b6 Full Changelog Implemented enhancements: Support setting full versions in pre-commit config #72 Merged pull requests: Only freeze repo hook version if using 'v1' #73 ( CasperWA ) v1.3.3 (2022-10-12) \u00b6 Full Changelog Implemented enhancements: Support setting python version restrictions in dependencies #70 Merged pull requests: Extend dependency spec regex #71 ( CasperWA ) v1.3.2 (2022-10-10) \u00b6 Full Changelog Fixed bugs: Don't change .pages in API ref hook #66 Merged pull requests: [Auto-generated] Update dependencies #68 ( TEAM4-0 ) Ensure .pages does not get mkdocstrings option #67 ( CasperWA ) v1.3.1 (2022-10-06) \u00b6 Full Changelog Fixed bugs: Nested modules not represented properly #64 Merged pull requests: Ensure API reference documentation works for multiple large packages #65 ( CasperWA ) v1.3.0 (2022-10-05) \u00b6 Full Changelog Implemented enhancements: Custom API ref file options #57 Test installing Python package after building it #56 Support multi-package repositories #55 Use custom Python version for CI tests #54 Fixed bugs: Local workflows out-of-date #62 Invoke task \"update docs index\" missing defaults #53 Closed issues: Documentation issue #52 Merged pull requests: Update local workflows with new input names #63 ( CasperWA ) Custom Python versions for jobs #61 ( CasperWA ) Custom API reference options #60 ( CasperWA ) Fix documentation typos #59 ( CasperWA ) Support multiple packages in the same repo #58 ( CasperWA ) [Auto-generated] Update dependencies #50 ( TEAM4-0 ) [Auto-generated] Update dependencies #48 ( TEAM4-0 ) v1.2.2 (2022-08-24) \u00b6 Full Changelog Fixed bugs: API reference links depends on installation type #46 Merged pull requests: API reference links corrections #47 ( CasperWA ) v1.2.1 (2022-08-23) \u00b6 Full Changelog Fixed bugs: Properly point to API reference files #44 Merged pull requests: Add unit tests for tasks #45 ( CasperWA ) [Auto-generated] Update dependencies #43 ( TEAM4-0 ) v1.2.0 (2022-07-18) \u00b6 Full Changelog Implemented enhancements: Add workflow for \"standard\" CI tests #23 Add local CI tests #22 Fixed bugs: Update all mentions of CasperWA to SINTEF #37 Hook not working due to task error #32 Closed issues: Credit funding projects #35 Update documentation title and README #29 Merged pull requests: [Auto-generated] Update dependencies #39 ( TEAM4-0 ) Convert to SINTEF owner instead of CasperWA #38 ( CasperWA ) Update README title and description + funding #36 ( CasperWA ) Basic CI tests workflow #33 ( CasperWA ) v1.1.2 (2022-07-08) \u00b6 Full Changelog Implemented enhancements: Update package version #28 ( CasperWA ) Fixed bugs: Fix usage of invoke tasks for lists #30 Default args for docs-landing-page doesn't work #27 Update internal Python package along with releases #26 Merged pull requests: Default args fix for docs-landing-page hook #31 ( CasperWA ) v1.1.1 (2022-07-06) \u00b6 Full Changelog Fixed bugs: Hooks not working externally #21 Merged pull requests: Use invoke as library #25 ( CasperWA ) v1.1.0 (2022-07-06) \u00b6 Full Changelog Implemented enhancements: New pre-commit hooks for invoke tasks #16 Merged pull requests: First pre-commit hooks #20 ( CasperWA ) v1.0.1 (2022-07-06) \u00b6 Full Changelog Fixed bugs: Ensure PREVIOUS_VERSION can be retrieved if input not given #19 Fix condition for running steps in CI/CD workflow #18 Closed issues: Update documentation to @v1 #15 v1.0.0 (2022-07-06) \u00b6 Full Changelog Implemented enhancements: Use proper option for changelog generator instead of moving file afterwards #13 Update CHANGELOG with unreleased stuff when updating default branch #11 Update to new repo name #8 Allow testing/debugging CI/CD workflow #6 Make \"FIRST_RELEASE\" bool more robust #3 Fixed bugs: Exclude tags from PREVIOUS_VERSION in release workflow #17 Update local workflow for updated CI/CD workflow #12 Fix links for various \"default\" PR bodies and tag messages #9 API Reference creation not working #7 Ensure the permanent dependencies branch is always updated #4 Closed issues: Update documentation with new inputs for CI/CD workflow #14 Workflow overview in documentation #5 Merged pull requests: Update repo and workflow title names #10 ( CasperWA ) v0.1.0 (2022-07-05) \u00b6 Full Changelog Merged pull requests: New workflow triggering changes with new default branch changes #1 ( CasperWA ) * This Changelog was automatically generated by github_changelog_generator","title":"Changelog"},{"location":"CHANGELOG/#changelog","text":"","title":"Changelog"},{"location":"CHANGELOG/#unreleased-2022-11-16","text":"Full Changelog Fixed bugs: Undo commit d525ea0f069b6615aa352a7f385c21b31f29b985 #77 Merged pull requests: Make --strict toggleable for mkdocs build #78 ( CasperWA ) [Auto-generated] Update dependencies #76 ( TEAM4-0 )","title":"Unreleased (2022-11-16)"},{"location":"CHANGELOG/#v134-2022-10-31","text":"Full Changelog Implemented enhancements: Support setting full versions in pre-commit config #72 Merged pull requests: Only freeze repo hook version if using 'v1' #73 ( CasperWA )","title":"v1.3.4 (2022-10-31)"},{"location":"CHANGELOG/#v133-2022-10-12","text":"Full Changelog Implemented enhancements: Support setting python version restrictions in dependencies #70 Merged pull requests: Extend dependency spec regex #71 ( CasperWA )","title":"v1.3.3 (2022-10-12)"},{"location":"CHANGELOG/#v132-2022-10-10","text":"Full Changelog Fixed bugs: Don't change .pages in API ref hook #66 Merged pull requests: [Auto-generated] Update dependencies #68 ( TEAM4-0 ) Ensure .pages does not get mkdocstrings option #67 ( CasperWA )","title":"v1.3.2 (2022-10-10)"},{"location":"CHANGELOG/#v131-2022-10-06","text":"Full Changelog Fixed bugs: Nested modules not represented properly #64 Merged pull requests: Ensure API reference documentation works for multiple large packages #65 ( CasperWA )","title":"v1.3.1 (2022-10-06)"},{"location":"CHANGELOG/#v130-2022-10-05","text":"Full Changelog Implemented enhancements: Custom API ref file options #57 Test installing Python package after building it #56 Support multi-package repositories #55 Use custom Python version for CI tests #54 Fixed bugs: Local workflows out-of-date #62 Invoke task \"update docs index\" missing defaults #53 Closed issues: Documentation issue #52 Merged pull requests: Update local workflows with new input names #63 ( CasperWA ) Custom Python versions for jobs #61 ( CasperWA ) Custom API reference options #60 ( CasperWA ) Fix documentation typos #59 ( CasperWA ) Support multiple packages in the same repo #58 ( CasperWA ) [Auto-generated] Update dependencies #50 ( TEAM4-0 ) [Auto-generated] Update dependencies #48 ( TEAM4-0 )","title":"v1.3.0 (2022-10-05)"},{"location":"CHANGELOG/#v122-2022-08-24","text":"Full Changelog Fixed bugs: API reference links depends on installation type #46 Merged pull requests: API reference links corrections #47 ( CasperWA )","title":"v1.2.2 (2022-08-24)"},{"location":"CHANGELOG/#v121-2022-08-23","text":"Full Changelog Fixed bugs: Properly point to API reference files #44 Merged pull requests: Add unit tests for tasks #45 ( CasperWA ) [Auto-generated] Update dependencies #43 ( TEAM4-0 )","title":"v1.2.1 (2022-08-23)"},{"location":"CHANGELOG/#v120-2022-07-18","text":"Full Changelog Implemented enhancements: Add workflow for \"standard\" CI tests #23 Add local CI tests #22 Fixed bugs: Update all mentions of CasperWA to SINTEF #37 Hook not working due to task error #32 Closed issues: Credit funding projects #35 Update documentation title and README #29 Merged pull requests: [Auto-generated] Update dependencies #39 ( TEAM4-0 ) Convert to SINTEF owner instead of CasperWA #38 ( CasperWA ) Update README title and description + funding #36 ( CasperWA ) Basic CI tests workflow #33 ( CasperWA )","title":"v1.2.0 (2022-07-18)"},{"location":"CHANGELOG/#v112-2022-07-08","text":"Full Changelog Implemented enhancements: Update package version #28 ( CasperWA ) Fixed bugs: Fix usage of invoke tasks for lists #30 Default args for docs-landing-page doesn't work #27 Update internal Python package along with releases #26 Merged pull requests: Default args fix for docs-landing-page hook #31 ( CasperWA )","title":"v1.1.2 (2022-07-08)"},{"location":"CHANGELOG/#v111-2022-07-06","text":"Full Changelog Fixed bugs: Hooks not working externally #21 Merged pull requests: Use invoke as library #25 ( CasperWA )","title":"v1.1.1 (2022-07-06)"},{"location":"CHANGELOG/#v110-2022-07-06","text":"Full Changelog Implemented enhancements: New pre-commit hooks for invoke tasks #16 Merged pull requests: First pre-commit hooks #20 ( CasperWA )","title":"v1.1.0 (2022-07-06)"},{"location":"CHANGELOG/#v101-2022-07-06","text":"Full Changelog Fixed bugs: Ensure PREVIOUS_VERSION can be retrieved if input not given #19 Fix condition for running steps in CI/CD workflow #18 Closed issues: Update documentation to @v1 #15","title":"v1.0.1 (2022-07-06)"},{"location":"CHANGELOG/#v100-2022-07-06","text":"Full Changelog Implemented enhancements: Use proper option for changelog generator instead of moving file afterwards #13 Update CHANGELOG with unreleased stuff when updating default branch #11 Update to new repo name #8 Allow testing/debugging CI/CD workflow #6 Make \"FIRST_RELEASE\" bool more robust #3 Fixed bugs: Exclude tags from PREVIOUS_VERSION in release workflow #17 Update local workflow for updated CI/CD workflow #12 Fix links for various \"default\" PR bodies and tag messages #9 API Reference creation not working #7 Ensure the permanent dependencies branch is always updated #4 Closed issues: Update documentation with new inputs for CI/CD workflow #14 Workflow overview in documentation #5 Merged pull requests: Update repo and workflow title names #10 ( CasperWA )","title":"v1.0.0 (2022-07-06)"},{"location":"CHANGELOG/#v010-2022-07-05","text":"Full Changelog Merged pull requests: New workflow triggering changes with new default branch changes #1 ( CasperWA ) * This Changelog was automatically generated by github_changelog_generator","title":"v0.1.0 (2022-07-05)"},{"location":"LICENSE/","text":"MIT License Copyright (c) 2022 Casper Welzel Andersen & SINTEF Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"hooks/","text":"pre-commit Hooks \u00b6 pre-commit is an excellent tool for running CI tasks prior to committing new changes. The tasks are called \"hooks\" and are run in a separate virtual environment. The hooks usually change files in-place, meaning after pre-commit is run during a git commit command, the changed files can be reviewed and re-staged and committed. Through SINTEF/ci-cd several hooks are available, mainly related to the GitHub Actions callable/reusable workflows that are also available in this repository. This section contains all the available pre-commit hooks: Update API Reference in Documentation Update Landing Page (index.md) for Documentation","title":"Overview"},{"location":"hooks/#pre-commit-hooks","text":"pre-commit is an excellent tool for running CI tasks prior to committing new changes. The tasks are called \"hooks\" and are run in a separate virtual environment. The hooks usually change files in-place, meaning after pre-commit is run during a git commit command, the changed files can be reviewed and re-staged and committed. Through SINTEF/ci-cd several hooks are available, mainly related to the GitHub Actions callable/reusable workflows that are also available in this repository. This section contains all the available pre-commit hooks: Update API Reference in Documentation Update Landing Page (index.md) for Documentation","title":"pre-commit Hooks"},{"location":"hooks/docs_api_reference/","text":"Update API Reference in Documentation \u00b6 pre-commit hook id : docs-api-reference Run this hook to update the API Reference section of your documentation. The hook walks through a package directory, finding all Python files and creating a markdown file matching it along with recreating the Python API tree under the docs/api_reference/ folder. The hook will run when any Python file is changed in the repository. The hook expects the documentation to be setup with the MkDocs framework, including the mkdocstrings plugin for parsing in the Python class/function and method doc-strings, as well as the awesome-pages plugin for providing proper titles in the table-of-contents navigation. Using it together with CI/CD workflows \u00b6 If this hook is being used together with the workflow CI - Tests , to test if the documentation can be built, or CD - Release and/or CI/CD - New updates to default branch , to build and publish the documentation upon a release or push to the default branch, it is necessary to understand the way the Python API modules are referenced in the markdown files under docs/api_reference/ . By default, the references refer to the Python import path of a module. However, should a package be installed as an editable installation, i.e., using pip install -e , then the relative path from the repository root will be used. This differentiation is only relevant for repositories, where these two cases are not aligned, such as when the Python package folder is in a nested folder, e.g., src/my_package/ . In order to remedy this, there are a single configuration in each workflow and this hooks that needs to be set to the same value. For this hook, the option name is --relative and the value for using the relative path, i.e., an editable installation, is to simply include this toggle option. If the option is not included, then a non-editable installation is assumed, i.e., the -e option is not used when installing the package, and a proper resolvable Python import statement is used as a link in the API reference markdown files. The latter is the default. For the workflows, one should set the configuration option relative to true to use the relative path, i.e., an editable installation. And likewise set relative to false if a proper resolvable Python import statement is to be used, without forcing the -e option. The latter is the default. Expectations \u00b6 It is required to specify the --package-dir argument at least once through the args key. Otherwise, as noted above, without the proper framework, the created markdown files will not bring about the desired result in a built documentation. Options \u00b6 Any of these options can be given through the args key when defining the hook. Name Description Required Default Type --package-dir Relative path to a package dir from the repository root, e.g., 'src/my_package'. This input option can be supplied multiple times. Yes string --docs-folder The folder name for the documentation root folder. No docs string --unwanted-folder A folder to avoid including into the Python API reference documentation. If this is not supplied, it will default to __pycache__ . Note : Only folder names, not paths, may be included. Note : All folders and their contents with these names will be excluded. This input option can be supplied multiple times. No __pycache__ string --unwanted-file A file to avoid including into the Python API reference documentation. If this is not supplied, it will default to __init__.py Note : Only full file names, not paths, may be included, i.e., filename + file extension. Note : All files with these names will be excluded. This input option can be supplied multiple times. No __init__.py string --full-docs-folder A folder in which to include everything - even those without documentation strings. This may be useful for a module full of data models or to ensure all class attributes are listed. This input option can be supplied multiple times. No Empty string string --full-docs-file A full relative path to a file in which to include everything - even those without documentation strings. This may be useful for a file full of data models or to ensure all class attributes are listed. This input option can be supplied multiple times. No Empty string string --special-option A combination of a relative path to a file and a fully formed mkdocstrings option that should be added to the generated MarkDown file. The combination should be comma-separated. Example: my_module/py_file.py,show_bases:false . Encapsulate the value in double quotation marks ( \" ) if including spaces ( ). Important : If multiple package-dir options are supplied, the relative path MUST include/start with the package-dir value, e.g., \"my_package/my_module/py_file.py,show_bases: false\" . This input option can be supplied multiple times. The options will be accumulated for the same file, if given several times. No Empty string string --relative Whether or not to use relative Python import links in the API reference markdown files. See section Using it together with CI/CD workflows above. No False boolean --debug Whether or not to print debug statements. No False boolean Usage example \u00b6 The following is an example of how an addition of the Update API Reference in Documentation hook into a .pre-commit-config.yaml file may look. It is meant to be complete as is. repos : - repo : https://github.com/SINTEF/ci-cd rev : v1 hooks : - id : docs-api-reference args : - --package-dir - src/my_python_package - --package-dir - src/my_other_python_package - --full-docs-folder - models - --full-docs-folder - data","title":"Update API Reference in Documentation"},{"location":"hooks/docs_api_reference/#update-api-reference-in-documentation","text":"pre-commit hook id : docs-api-reference Run this hook to update the API Reference section of your documentation. The hook walks through a package directory, finding all Python files and creating a markdown file matching it along with recreating the Python API tree under the docs/api_reference/ folder. The hook will run when any Python file is changed in the repository. The hook expects the documentation to be setup with the MkDocs framework, including the mkdocstrings plugin for parsing in the Python class/function and method doc-strings, as well as the awesome-pages plugin for providing proper titles in the table-of-contents navigation.","title":"Update API Reference in Documentation"},{"location":"hooks/docs_api_reference/#using-it-together-with-cicd-workflows","text":"If this hook is being used together with the workflow CI - Tests , to test if the documentation can be built, or CD - Release and/or CI/CD - New updates to default branch , to build and publish the documentation upon a release or push to the default branch, it is necessary to understand the way the Python API modules are referenced in the markdown files under docs/api_reference/ . By default, the references refer to the Python import path of a module. However, should a package be installed as an editable installation, i.e., using pip install -e , then the relative path from the repository root will be used. This differentiation is only relevant for repositories, where these two cases are not aligned, such as when the Python package folder is in a nested folder, e.g., src/my_package/ . In order to remedy this, there are a single configuration in each workflow and this hooks that needs to be set to the same value. For this hook, the option name is --relative and the value for using the relative path, i.e., an editable installation, is to simply include this toggle option. If the option is not included, then a non-editable installation is assumed, i.e., the -e option is not used when installing the package, and a proper resolvable Python import statement is used as a link in the API reference markdown files. The latter is the default. For the workflows, one should set the configuration option relative to true to use the relative path, i.e., an editable installation. And likewise set relative to false if a proper resolvable Python import statement is to be used, without forcing the -e option. The latter is the default.","title":"Using it together with CI/CD workflows"},{"location":"hooks/docs_api_reference/#expectations","text":"It is required to specify the --package-dir argument at least once through the args key. Otherwise, as noted above, without the proper framework, the created markdown files will not bring about the desired result in a built documentation.","title":"Expectations"},{"location":"hooks/docs_api_reference/#options","text":"Any of these options can be given through the args key when defining the hook. Name Description Required Default Type --package-dir Relative path to a package dir from the repository root, e.g., 'src/my_package'. This input option can be supplied multiple times. Yes string --docs-folder The folder name for the documentation root folder. No docs string --unwanted-folder A folder to avoid including into the Python API reference documentation. If this is not supplied, it will default to __pycache__ . Note : Only folder names, not paths, may be included. Note : All folders and their contents with these names will be excluded. This input option can be supplied multiple times. No __pycache__ string --unwanted-file A file to avoid including into the Python API reference documentation. If this is not supplied, it will default to __init__.py Note : Only full file names, not paths, may be included, i.e., filename + file extension. Note : All files with these names will be excluded. This input option can be supplied multiple times. No __init__.py string --full-docs-folder A folder in which to include everything - even those without documentation strings. This may be useful for a module full of data models or to ensure all class attributes are listed. This input option can be supplied multiple times. No Empty string string --full-docs-file A full relative path to a file in which to include everything - even those without documentation strings. This may be useful for a file full of data models or to ensure all class attributes are listed. This input option can be supplied multiple times. No Empty string string --special-option A combination of a relative path to a file and a fully formed mkdocstrings option that should be added to the generated MarkDown file. The combination should be comma-separated. Example: my_module/py_file.py,show_bases:false . Encapsulate the value in double quotation marks ( \" ) if including spaces ( ). Important : If multiple package-dir options are supplied, the relative path MUST include/start with the package-dir value, e.g., \"my_package/my_module/py_file.py,show_bases: false\" . This input option can be supplied multiple times. The options will be accumulated for the same file, if given several times. No Empty string string --relative Whether or not to use relative Python import links in the API reference markdown files. See section Using it together with CI/CD workflows above. No False boolean --debug Whether or not to print debug statements. No False boolean","title":"Options"},{"location":"hooks/docs_api_reference/#usage-example","text":"The following is an example of how an addition of the Update API Reference in Documentation hook into a .pre-commit-config.yaml file may look. It is meant to be complete as is. repos : - repo : https://github.com/SINTEF/ci-cd rev : v1 hooks : - id : docs-api-reference args : - --package-dir - src/my_python_package - --package-dir - src/my_other_python_package - --full-docs-folder - models - --full-docs-folder - data","title":"Usage example"},{"location":"hooks/docs_landing_page/","text":"Update Landing Page (index.md) for Documentation \u00b6 pre-commit hook id : docs-landing-page Run this hook to update the landing page (root index.md file) for your documentation. The hook copies the root README.md file into the root of your documentation folder, renaming it to index.md and implementing any replacements specified. The hook will run when the root README.md file is changed in the repository. The hook expects the documentation to be a framework that can build markdown files for deploying a documentation site. Expectations \u00b6 It is required that the root README.md exists and the documentation's landing page is named index.md and can be found in the root of the documentation folder. Options \u00b6 Any of these options can be given through the args key when defining the hook. Name Description Required Default Type --docs-folder The folder name for the documentation root folder. No docs string --replacement A replacement (mapping) to be performed on README.md when creating the documentation's landing page ( index.md ). This list always includes replacing ' --docs-folder /' with an empty string, in order to correct relative links. By default the value (LICENSE),(LICENSE.md) is set, but this will be overwritten if args is set. This input option can be supplied multiple times. No (LICENSE),(LICENSE.md) string --replacement-separator String to separate a replacement's 'old' to 'new' parts. Defaults to a comma ( , ). No , string Usage example \u00b6 The following is an example of how an addition of the Update Landing Page (index.md) for Documentation hook into a .pre-commit-config.yaml file may look. It is meant to be complete as is. repos : - repo : https://github.com/SINTEF/ci-cd rev : v1 hooks : - id : docs-landing-page args : # Replace `(LICENSE)` with `(LICENSE.md)` (i.e., don't overwrite the default) - '--replacement' - '(LICENSE);(LICENSE.md)' # Replace `(tools/` with `(` - '--replacement' - '(tools/;(' - '--replacement-separator' - ';'","title":"Update Landing Page (index.md) for Documentation"},{"location":"hooks/docs_landing_page/#update-landing-page-indexmd-for-documentation","text":"pre-commit hook id : docs-landing-page Run this hook to update the landing page (root index.md file) for your documentation. The hook copies the root README.md file into the root of your documentation folder, renaming it to index.md and implementing any replacements specified. The hook will run when the root README.md file is changed in the repository. The hook expects the documentation to be a framework that can build markdown files for deploying a documentation site.","title":"Update Landing Page (index.md) for Documentation"},{"location":"hooks/docs_landing_page/#expectations","text":"It is required that the root README.md exists and the documentation's landing page is named index.md and can be found in the root of the documentation folder.","title":"Expectations"},{"location":"hooks/docs_landing_page/#options","text":"Any of these options can be given through the args key when defining the hook. Name Description Required Default Type --docs-folder The folder name for the documentation root folder. No docs string --replacement A replacement (mapping) to be performed on README.md when creating the documentation's landing page ( index.md ). This list always includes replacing ' --docs-folder /' with an empty string, in order to correct relative links. By default the value (LICENSE),(LICENSE.md) is set, but this will be overwritten if args is set. This input option can be supplied multiple times. No (LICENSE),(LICENSE.md) string --replacement-separator String to separate a replacement's 'old' to 'new' parts. Defaults to a comma ( , ). No , string","title":"Options"},{"location":"hooks/docs_landing_page/#usage-example","text":"The following is an example of how an addition of the Update Landing Page (index.md) for Documentation hook into a .pre-commit-config.yaml file may look. It is meant to be complete as is. repos : - repo : https://github.com/SINTEF/ci-cd rev : v1 hooks : - id : docs-landing-page args : # Replace `(LICENSE)` with `(LICENSE.md)` (i.e., don't overwrite the default) - '--replacement' - '(LICENSE);(LICENSE.md)' # Replace `(tools/` with `(` - '--replacement' - '(tools/;(' - '--replacement-separator' - ';'","title":"Usage example"},{"location":"workflows/","text":"GitHub Actions callable/reusable Workflows \u00b6 This section contains all the available callable/reusable workflows: CD - Release ( cd_release.yml ) CI - Activate auto-merging for PRs ( ci_automerge_prs.yml ) CI/CD - New updates to default branch ( ci_cd_updated_default_branch.yml )) CI - Check pyproject.toml dependencies ( ci_check_pyproject_dependencies.yml ) CI - Tests ( ci_tests.yml ) CI - Update dependencies PR ( ci_update_dependencies.yml )","title":"Overview"},{"location":"workflows/#github-actions-callablereusable-workflows","text":"This section contains all the available callable/reusable workflows: CD - Release ( cd_release.yml ) CI - Activate auto-merging for PRs ( ci_automerge_prs.yml ) CI/CD - New updates to default branch ( ci_cd_updated_default_branch.yml )) CI - Check pyproject.toml dependencies ( ci_check_pyproject_dependencies.yml ) CI - Tests ( ci_tests.yml ) CI - Update dependencies PR ( ci_update_dependencies.yml )","title":"GitHub Actions callable/reusable Workflows"},{"location":"workflows/cd_release/","text":"CD - Release \u00b6 File to use: cd_release.yml There are 2 jobs in this workflow, which run in sequence. First, an update & publish job, which updates the version in the package's root __init__.py file through an Invoke task. The newly created tag (created due to the caller workflow running on.release.types.published ) will be updated accordingly, as will the publish branch (defaults to main ). Secondly, a job to update the documentation is run, however, this can be deactivated. The job expects the documentation to be setup with the mike + MkDocs + GitHub Pages framework. For more information about the specific changelog inputs, see the related changelog generator actually used, specifically the list of configuration options . Note Concerning the changelog generator, the specific input changelog_exclude_labels defaults to a list of different labels if not supplied, hence, if supplied, one might want to include these labels alongside any extra labels. The default value is given here as a help: 'duplicate,question,invalid,wontfix' The changelog_exclude_tags_regex is also used to remove tags in a list of tags to consider when evaluating the \"previous version\". This is specifically for adding a changelog to the GitHub release body. If used together with the Update API Reference in Documentation , please align the relative input with the --relative option, when running the hook. See the proper section to understand why and how these options and inputs should be aligned. Updating instances of version in repository files \u00b6 The content of repository files can be updated to use the new version where necessary. This is done through the version_update_changes (and version_update_changes_separator ) inputs. To see an example of how to use the version_update_changes (and version_update_changes_separator ) see for example the workflow used by the SINTEF/ci-cd repository calling the CD Release workflow. Some notes to consider and respect when using version_update_changes are: The value of version_update_changes_separator applies to all lines given in version_update_changes , meaning it should be a character, or series of characters, which will not be part of the actual content. Specifically, concerning the 'raw' Python string 'pattern' the following applies: Always escape double quotes ( \" ). This is done by prefixing it with a backslash ( \\ ): \\\" . Escape special bash/sh characters, e.g., back tick ( ` ). Escape special Python regular expression characters, if they are not used for their intended purpose in this 'raw' string. See the re library documentation for more information. Concerning the 'replacement string' part, the package_dirs input and full semantic version can be substituted in dynamically by wrapping either package_dir or version in curly braces ( {} ). Indeed, for the version, one can specify sub-parts of the version to use, e.g., if one desires to only use the major version, this can be done by using the major attribute: {version.major} . The full list of version attributes are: major , minor , patch , pre_release , and build . More can be used, e.g., to only insert the major.minor version: {version.major}.{version.minor} . For the 'file path' part, package_dir wrapped in curly braces ( {} ) will also be substituted at run time with each line from the possibly multi-line package_dirs input. E.g., {package_dir}/__init__.py will become ci_cd/__init__.py if the package_dirs input was 'ci_cd' . Expectations \u00b6 This workflow should only be used for releasing a single modern Python package. The repository contains the following: ( required ) A Python package root __init__.py file with __version__ defined. ( required ) The workflow is run for a tag that starts with v followed by a full semantic version. This will automatically be the case for a GitHub release, which creates a new tag that starts with v . See SemVer.org for more information about semantic versioning. Inputs \u00b6 Name Description Required Default Type git_username A git username (used to set the 'user.name' config option). Yes string git_email A git user's email address (used to set the 'user.email' config option). Yes string python_package Whether or not this is a Python package, where the version should be updated in the 'package_dir'/__init__.py for the possibly several 'package_dir' lines given in the package_dirs input and a build and release to PyPI should be performed. No true boolean package_dirs single or multi-line string of paths to Python package directories relative to the repository directory to have its __version__ value updated. Example: 'src/my_package' . Important : This is required if 'python_package' is 'true', which is the default. Yes (if 'python_package' is 'true' string release_branch The branch name to release/publish from. No main string install_extras Any extras to install from the local repository through 'pip'. Must be encapsulated in square parentheses ( [] ) and be separated by commas ( , ) without any spaces. Example: '[dev,release]' . No Empty string string relative Whether or not to use install the local Python package(s) as an editable. No false boolean python_version_build The Python version to use for the workflow when building the package. No 3.9 string python_version_docs The Python version to use for the workflow when building the documentation. No 3.9 string version_update_changes A single or multi-line string of changes to be implemented in the repository files upon updating the version. The string should be made up of three parts: 'file path', 'pattern', and 'replacement string'. These are separated by the 'version_update_changes_separator' value. The 'file path' must always either be relative to the repository root directory or absolute. The 'pattern' should be given as a 'raw' Python string. No Empty string string version_update_changes_separator The separator to use for 'version_update_changes' when splitting the three parts of each string. No , string build_cmd The package build command, e.g., 'pip install flit && flit build' or 'python -m build' (default). No python -m build string tag_message_file Relative path to a release tag message file from the root of the repository. Example: '.github/utils/release_tag_msg.txt' . No Empty string string publish_on_pypi Whether or not to publish on PyPI. Note : This is only relevant if 'python_package' is 'true', which is the default. No true boolean test Whether to use the TestPyPI repository index instead of PyPI. No false boolean update_docs Whether or not to also run the 'docs' workflow job. No false boolean doc_extras Any extras to install from the local repository through 'pip'. Must be encapsulated in square parentheses ( [] ) and be separated by commas ( , ) without any spaces. Note, if this is empty, 'install_extras' will be used as a fallback. Example: '[docs]' . No Empty string string changelog_exclude_tags_regex A regular expression matching any tags that should be excluded from the CHANGELOG.md. No Empty string string changelog_exclude_labels Comma-separated list of labels to exclude from the CHANGELOG.md. No Empty string string Secrets \u00b6 Name Description Required PyPI_token A PyPI token for publishing the built package to PyPI. Important : This is required if both 'python_package' and 'publish_on_pypi' are 'true'. Both are 'true' by default. Yes (if 'python_package' and 'publish_on_pypi' are 'true') PAT A personal access token (PAT) with rights to update the release_branch . This will fallback on GITHUB_TOKEN . No Usage example \u00b6 The following is an example of how a workflow may look that calls CD - Release . It is meant to be complete as is. name : CD - Publish on : release : types : - published jobs : publish : name : Publish package and documentation uses : SINTEF/ci-cd/.github/workflows/cd_release.yml@v1 if : github.repository == 'SINTEF/my-python-package' && startsWith(github.ref, 'refs/tags/v') with : git_username : \"Casper Welzel Andersen\" git_email : \"CasperWA@github.com\" release_branch : stable package_dirs : my_python_package install_extras : \"[dev,build]\" build_cmd : \"pip install flit && flit build\" tag_message_file : \".github/utils/release_tag_msg.txt\" update_docs : true doc_extras : \"[docs]\" exclude_labels : \"skip_changelog,duplicate\" secrets : PyPI_token : ${{ secrets.PYPI_TOKEN }} PAT : ${{ secrets.PAT }}","title":"CD - Release"},{"location":"workflows/cd_release/#cd-release","text":"File to use: cd_release.yml There are 2 jobs in this workflow, which run in sequence. First, an update & publish job, which updates the version in the package's root __init__.py file through an Invoke task. The newly created tag (created due to the caller workflow running on.release.types.published ) will be updated accordingly, as will the publish branch (defaults to main ). Secondly, a job to update the documentation is run, however, this can be deactivated. The job expects the documentation to be setup with the mike + MkDocs + GitHub Pages framework. For more information about the specific changelog inputs, see the related changelog generator actually used, specifically the list of configuration options . Note Concerning the changelog generator, the specific input changelog_exclude_labels defaults to a list of different labels if not supplied, hence, if supplied, one might want to include these labels alongside any extra labels. The default value is given here as a help: 'duplicate,question,invalid,wontfix' The changelog_exclude_tags_regex is also used to remove tags in a list of tags to consider when evaluating the \"previous version\". This is specifically for adding a changelog to the GitHub release body. If used together with the Update API Reference in Documentation , please align the relative input with the --relative option, when running the hook. See the proper section to understand why and how these options and inputs should be aligned.","title":"CD - Release"},{"location":"workflows/cd_release/#updating-instances-of-version-in-repository-files","text":"The content of repository files can be updated to use the new version where necessary. This is done through the version_update_changes (and version_update_changes_separator ) inputs. To see an example of how to use the version_update_changes (and version_update_changes_separator ) see for example the workflow used by the SINTEF/ci-cd repository calling the CD Release workflow. Some notes to consider and respect when using version_update_changes are: The value of version_update_changes_separator applies to all lines given in version_update_changes , meaning it should be a character, or series of characters, which will not be part of the actual content. Specifically, concerning the 'raw' Python string 'pattern' the following applies: Always escape double quotes ( \" ). This is done by prefixing it with a backslash ( \\ ): \\\" . Escape special bash/sh characters, e.g., back tick ( ` ). Escape special Python regular expression characters, if they are not used for their intended purpose in this 'raw' string. See the re library documentation for more information. Concerning the 'replacement string' part, the package_dirs input and full semantic version can be substituted in dynamically by wrapping either package_dir or version in curly braces ( {} ). Indeed, for the version, one can specify sub-parts of the version to use, e.g., if one desires to only use the major version, this can be done by using the major attribute: {version.major} . The full list of version attributes are: major , minor , patch , pre_release , and build . More can be used, e.g., to only insert the major.minor version: {version.major}.{version.minor} . For the 'file path' part, package_dir wrapped in curly braces ( {} ) will also be substituted at run time with each line from the possibly multi-line package_dirs input. E.g., {package_dir}/__init__.py will become ci_cd/__init__.py if the package_dirs input was 'ci_cd' .","title":"Updating instances of version in repository files"},{"location":"workflows/cd_release/#expectations","text":"This workflow should only be used for releasing a single modern Python package. The repository contains the following: ( required ) A Python package root __init__.py file with __version__ defined. ( required ) The workflow is run for a tag that starts with v followed by a full semantic version. This will automatically be the case for a GitHub release, which creates a new tag that starts with v . See SemVer.org for more information about semantic versioning.","title":"Expectations"},{"location":"workflows/cd_release/#inputs","text":"Name Description Required Default Type git_username A git username (used to set the 'user.name' config option). Yes string git_email A git user's email address (used to set the 'user.email' config option). Yes string python_package Whether or not this is a Python package, where the version should be updated in the 'package_dir'/__init__.py for the possibly several 'package_dir' lines given in the package_dirs input and a build and release to PyPI should be performed. No true boolean package_dirs single or multi-line string of paths to Python package directories relative to the repository directory to have its __version__ value updated. Example: 'src/my_package' . Important : This is required if 'python_package' is 'true', which is the default. Yes (if 'python_package' is 'true' string release_branch The branch name to release/publish from. No main string install_extras Any extras to install from the local repository through 'pip'. Must be encapsulated in square parentheses ( [] ) and be separated by commas ( , ) without any spaces. Example: '[dev,release]' . No Empty string string relative Whether or not to use install the local Python package(s) as an editable. No false boolean python_version_build The Python version to use for the workflow when building the package. No 3.9 string python_version_docs The Python version to use for the workflow when building the documentation. No 3.9 string version_update_changes A single or multi-line string of changes to be implemented in the repository files upon updating the version. The string should be made up of three parts: 'file path', 'pattern', and 'replacement string'. These are separated by the 'version_update_changes_separator' value. The 'file path' must always either be relative to the repository root directory or absolute. The 'pattern' should be given as a 'raw' Python string. No Empty string string version_update_changes_separator The separator to use for 'version_update_changes' when splitting the three parts of each string. No , string build_cmd The package build command, e.g., 'pip install flit && flit build' or 'python -m build' (default). No python -m build string tag_message_file Relative path to a release tag message file from the root of the repository. Example: '.github/utils/release_tag_msg.txt' . No Empty string string publish_on_pypi Whether or not to publish on PyPI. Note : This is only relevant if 'python_package' is 'true', which is the default. No true boolean test Whether to use the TestPyPI repository index instead of PyPI. No false boolean update_docs Whether or not to also run the 'docs' workflow job. No false boolean doc_extras Any extras to install from the local repository through 'pip'. Must be encapsulated in square parentheses ( [] ) and be separated by commas ( , ) without any spaces. Note, if this is empty, 'install_extras' will be used as a fallback. Example: '[docs]' . No Empty string string changelog_exclude_tags_regex A regular expression matching any tags that should be excluded from the CHANGELOG.md. No Empty string string changelog_exclude_labels Comma-separated list of labels to exclude from the CHANGELOG.md. No Empty string string","title":"Inputs"},{"location":"workflows/cd_release/#secrets","text":"Name Description Required PyPI_token A PyPI token for publishing the built package to PyPI. Important : This is required if both 'python_package' and 'publish_on_pypi' are 'true'. Both are 'true' by default. Yes (if 'python_package' and 'publish_on_pypi' are 'true') PAT A personal access token (PAT) with rights to update the release_branch . This will fallback on GITHUB_TOKEN . No","title":"Secrets"},{"location":"workflows/cd_release/#usage-example","text":"The following is an example of how a workflow may look that calls CD - Release . It is meant to be complete as is. name : CD - Publish on : release : types : - published jobs : publish : name : Publish package and documentation uses : SINTEF/ci-cd/.github/workflows/cd_release.yml@v1 if : github.repository == 'SINTEF/my-python-package' && startsWith(github.ref, 'refs/tags/v') with : git_username : \"Casper Welzel Andersen\" git_email : \"CasperWA@github.com\" release_branch : stable package_dirs : my_python_package install_extras : \"[dev,build]\" build_cmd : \"pip install flit && flit build\" tag_message_file : \".github/utils/release_tag_msg.txt\" update_docs : true doc_extras : \"[docs]\" exclude_labels : \"skip_changelog,duplicate\" secrets : PyPI_token : ${{ secrets.PYPI_TOKEN }} PAT : ${{ secrets.PAT }}","title":"Usage example"},{"location":"workflows/ci_automerge_prs/","text":"CI - Activate auto-merging for PRs \u00b6 File to use: ci_automerge_prs.yml Activate auto-merging for a PR. Expectations \u00b6 The PAT secret must represent a user with the rights to activate auto-merging. This workflow can only be called if the triggering event from the caller workflow is pull_request_target . Inputs \u00b6 There are no inputs for this workflow. Secrets \u00b6 Name Description Required PAT A personal access token (PAT) with rights to update the permanent_dependencies_branch . This will fallback on GITHUB_TOKEN . No Usage example \u00b6 The following is an example of how a workflow may look that calls CI - Activate auto-merging for PRs . It is meant to be complete as is. name : CI - Activate auto-merging for Dependabot PRs on : pull_request_target : branches : - ci/dependency-updates jobs : update-dependency-branch : name : Call external workflow uses : SINTEF/ci-cd/.github/workflows/ci_automerge_prs.yml@v1 if : github.repository_owner == 'SINTEF' && ( ( startsWith(github.event.pull_request.head.ref, 'dependabot/') && github.actor == 'dependabot[bot]' ) || ( github.event.pull_request.head.ref == 'ci/update-pyproject' && github.actor == 'CasperWA' ) ) secrets : PAT : ${{ secrets.RELEASE_PAT }}","title":"CI - Activate auto-merging for PRs"},{"location":"workflows/ci_automerge_prs/#ci-activate-auto-merging-for-prs","text":"File to use: ci_automerge_prs.yml Activate auto-merging for a PR.","title":"CI - Activate auto-merging for PRs"},{"location":"workflows/ci_automerge_prs/#expectations","text":"The PAT secret must represent a user with the rights to activate auto-merging. This workflow can only be called if the triggering event from the caller workflow is pull_request_target .","title":"Expectations"},{"location":"workflows/ci_automerge_prs/#inputs","text":"There are no inputs for this workflow.","title":"Inputs"},{"location":"workflows/ci_automerge_prs/#secrets","text":"Name Description Required PAT A personal access token (PAT) with rights to update the permanent_dependencies_branch . This will fallback on GITHUB_TOKEN . No","title":"Secrets"},{"location":"workflows/ci_automerge_prs/#usage-example","text":"The following is an example of how a workflow may look that calls CI - Activate auto-merging for PRs . It is meant to be complete as is. name : CI - Activate auto-merging for Dependabot PRs on : pull_request_target : branches : - ci/dependency-updates jobs : update-dependency-branch : name : Call external workflow uses : SINTEF/ci-cd/.github/workflows/ci_automerge_prs.yml@v1 if : github.repository_owner == 'SINTEF' && ( ( startsWith(github.event.pull_request.head.ref, 'dependabot/') && github.actor == 'dependabot[bot]' ) || ( github.event.pull_request.head.ref == 'ci/update-pyproject' && github.actor == 'CasperWA' ) ) secrets : PAT : ${{ secrets.RELEASE_PAT }}","title":"Usage example"},{"location":"workflows/ci_cd_updated_default_branch/","text":"CI/CD - New updates to default branch \u00b6 File to use: ci_cd_updated_default_branch.yml Keep your permanent_dependencies_branch branch up-to-date with changes in your main development branch, i.e., the default_repo_branch . Furthermore, this workflow can optionally update the latest mike + MkDocs + GitHub Pages -framework documentation release alias, which represents the default_repo_branch . Warning If a PAT is not passed through for the PAT secret and GITHUB_TOKEN is used, beware that any other CI/CD jobs that run for, e.g., pull request events, may not run since GITHUB_TOKEN -generated PRs are designed to not start more workflows to avoid escalation. Hence, if it is important to run CI/CD workflows for pull requests, consider passing a PAT as a secret to this workflow represented by the PAT secret. Important If this is to be used together with the CI - Update dependencies PR workflow, the pr_body_file supplied to that workflow (if any) should match the update_depednencies_pr_body_file input in this workflow and be immutable within the first 8 lines, i.e., no check boxes or similar in the first 8 lines. Indeed, it is recommended to not supply pr_body_file to the CI - Update dependencies PR workflow as well as to not supply the update_dependencies_pr_body_file in this workflow in this case. Note Concerning the changelog generator, the specific input changelog_exclude_labels defaults to a list of different labels if not supplied, hence, if supplied, one might want to include these labels alongside any extra labels. The default value is given here as a help: 'duplicate,question,invalid,wontfix' If used together with the Update API Reference in Documentation , please align the relative input with the --relative option, when running the hook. See the proper section to understand why and how these options and inputs should be aligned. Expectations \u00b6 The repository contains the following: ( required ) At least one Python package exists that can be pointed to for the package_dirs input. ( required ) Only if also updating the documentation , then the documentation should be contained in a root docs directory. ( required ) Only if also updating the documentation , then a root README.md file must exist and desired to be used as the documentation's landing page if the update_docs_landing_page is set to true , which is the default. Inputs \u00b6 Name Description Required Default Type git_username A git username (used to set the 'user.name' config option). Yes string git_email A git user's email address (used to set the 'user.email' config option). Yes string permanent_dependencies_branch The branch name for the permanent dependency updates branch. No ci/dependency-updates string default_repo_branch The branch name of the repository's default branch. More specifically, the branch the PR should target. No main string update_dependencies_pr_body_file Relative path to a PR body file from the root of the repository, which is used in the 'CI - Update dependencies PR' workflow, if used. Example: '.github/utils/pr_body_update_deps.txt' . No Empty string string update_docs Whether or not to also run the 'docs' workflow job. No false boolean update_python_api_ref Whether or not to update the Python API documentation reference. Note : If this is 'true', 'package_dirs' is required . No true boolean package_dirs A single or multi-line string of paths to Python package directories relative to the repository directory to be considered for creating the Python API reference documentation. Example: 'src/my_package' . Important : This is required if 'update_docs' and 'update_python_api_ref' are 'true'. Yes (if 'update_docs' and 'update_python_api_ref' are 'true') string update_docs_landing_page Whether or not to update the documentation landing page. The landing page will be based on the root README.md file. No true boolean python_version The Python version to use for the workflow. Note : This is only relevant if update_pre-commit is true . No 3.9 string doc_extras Any extras to install from the local repository through 'pip'. Must be encapsulated in square parentheses ( [] ) and be separated by commas ( , ) without any spaces. Example: '[docs]' . No Empty string string relative Whether or not to use install the local Python package(s) as an editable. No false boolean exclude_dirs A single or multi-line string of directories to exclude in the Python API reference documentation. Note, only directory names, not paths, may be included. Note, all folders and their contents with these names will be excluded. Defaults to '__pycache__' . Important : When a user value is set, the preset value is overwritten - hence '__pycache__' should be included in the user value if one wants to exclude these directories. No __pycache__ string exclude_files A single or multi-line string of files to exclude in the Python API reference documentation. Note, only full file names, not paths, may be included, i.e., filename + file extension. Note, all files with these names will be excluded. Defaults to '__init__.py' . Important : When a user value is set, the preset value is overwritten - hence '__init__.py' should be included in the user value if one wants to exclude these files. No __init__.py string full_docs_dirs A single or multi-line string of directories in which to include everything - even those without documentation strings. This may be useful for a module full of data models or to ensure all class attributes are listed. No Empty string string full_docs_files A single or multi-line string of relative paths to files in which to include everything - even those without documentation strings. This may be useful for a file full of data models or to ensure all class attributes are listed. No Empty string string special_file_api_ref_options A single or multi-line string of combinations of a relative path to a Python file and a fully formed mkdocstrings option that should be added to the generated MarkDown file for the Python API reference documentation. Example: my_module/py_file.py,show_bases:false . Encapsulate the value in double quotation marks ( \" ) if including spaces ( ). Important : If multiple package_dirs are supplied, the relative path MUST include/start with the appropriate 'package_dir' value, e.g., \"my_package/my_module/py_file.py,show_bases: false\" . No Empty string string landing_page_replacements A single or multi-line string of replacements (mappings) to be performed on README.md when creating the documentation's landing page (index.md). This list always includes replacing 'docs/' with an empty string to correct relative links, i.e., this cannot be overwritten. By default '(LICENSE)' is replaced by '(LICENSE.md)' . No (LICENSE),(LICENSE.md) string landing_page_replacement_separator String to separate a mapping's 'old' to 'new' parts. Defaults to a comma ( , ). No , string test Whether to do a \"dry run\", i.e., run the workflow, but avoid pushing to 'permanent_dependencies_branch' branch and deploying documentation (if 'update_docs' is 'true'). No false boolean changelog_exclude_tags_regex A regular expression matching any tags that should be excluded from the CHANGELOG.md. No Empty string string changelog_exclude_labels Comma-separated list of labels to exclude from the CHANGELOG.md. No Empty string string Secrets \u00b6 Name Description Required PAT A personal access token (PAT) with rights to update the permanent_dependencies_branch . This will fallback on GITHUB_TOKEN . No Usage example \u00b6 The following is an example of how a workflow may look that calls CI/CD - New updates to default branch . It is meant to be complete as is. name : CI - Activate auto-merging for Dependabot PRs on : push : branches : - stable jobs : updates-to-stable : name : Call external workflow uses : SINTEF/ci-cd/.github/workflows/ci_cd_updated_default_branch.yml@v1 if : github.repository_owner == 'SINTEF' with : git_username : \"Casper Welzel Andersen\" git_email : \"CasperWA@github.com\" default_repo_branch : stable permanent_dependencies_branch : \"ci/dependency-updates\" update_docs : true package_dirs : | my_python_package my_other_python_package doc_extras : \"[docs]\" exclude_files : __init__.py,config.py full_docs_dirs : models landing_page_replacements : \"(LICENSE);(LICENSE.md)|(tools);(../tools)\" landing_page_replacements_mapping_separator : \";\" secrets : PAT : ${{ secrets.PAT }}","title":"CI/CD - New updates to default branch"},{"location":"workflows/ci_cd_updated_default_branch/#cicd-new-updates-to-default-branch","text":"File to use: ci_cd_updated_default_branch.yml Keep your permanent_dependencies_branch branch up-to-date with changes in your main development branch, i.e., the default_repo_branch . Furthermore, this workflow can optionally update the latest mike + MkDocs + GitHub Pages -framework documentation release alias, which represents the default_repo_branch . Warning If a PAT is not passed through for the PAT secret and GITHUB_TOKEN is used, beware that any other CI/CD jobs that run for, e.g., pull request events, may not run since GITHUB_TOKEN -generated PRs are designed to not start more workflows to avoid escalation. Hence, if it is important to run CI/CD workflows for pull requests, consider passing a PAT as a secret to this workflow represented by the PAT secret. Important If this is to be used together with the CI - Update dependencies PR workflow, the pr_body_file supplied to that workflow (if any) should match the update_depednencies_pr_body_file input in this workflow and be immutable within the first 8 lines, i.e., no check boxes or similar in the first 8 lines. Indeed, it is recommended to not supply pr_body_file to the CI - Update dependencies PR workflow as well as to not supply the update_dependencies_pr_body_file in this workflow in this case. Note Concerning the changelog generator, the specific input changelog_exclude_labels defaults to a list of different labels if not supplied, hence, if supplied, one might want to include these labels alongside any extra labels. The default value is given here as a help: 'duplicate,question,invalid,wontfix' If used together with the Update API Reference in Documentation , please align the relative input with the --relative option, when running the hook. See the proper section to understand why and how these options and inputs should be aligned.","title":"CI/CD - New updates to default branch"},{"location":"workflows/ci_cd_updated_default_branch/#expectations","text":"The repository contains the following: ( required ) At least one Python package exists that can be pointed to for the package_dirs input. ( required ) Only if also updating the documentation , then the documentation should be contained in a root docs directory. ( required ) Only if also updating the documentation , then a root README.md file must exist and desired to be used as the documentation's landing page if the update_docs_landing_page is set to true , which is the default.","title":"Expectations"},{"location":"workflows/ci_cd_updated_default_branch/#inputs","text":"Name Description Required Default Type git_username A git username (used to set the 'user.name' config option). Yes string git_email A git user's email address (used to set the 'user.email' config option). Yes string permanent_dependencies_branch The branch name for the permanent dependency updates branch. No ci/dependency-updates string default_repo_branch The branch name of the repository's default branch. More specifically, the branch the PR should target. No main string update_dependencies_pr_body_file Relative path to a PR body file from the root of the repository, which is used in the 'CI - Update dependencies PR' workflow, if used. Example: '.github/utils/pr_body_update_deps.txt' . No Empty string string update_docs Whether or not to also run the 'docs' workflow job. No false boolean update_python_api_ref Whether or not to update the Python API documentation reference. Note : If this is 'true', 'package_dirs' is required . No true boolean package_dirs A single or multi-line string of paths to Python package directories relative to the repository directory to be considered for creating the Python API reference documentation. Example: 'src/my_package' . Important : This is required if 'update_docs' and 'update_python_api_ref' are 'true'. Yes (if 'update_docs' and 'update_python_api_ref' are 'true') string update_docs_landing_page Whether or not to update the documentation landing page. The landing page will be based on the root README.md file. No true boolean python_version The Python version to use for the workflow. Note : This is only relevant if update_pre-commit is true . No 3.9 string doc_extras Any extras to install from the local repository through 'pip'. Must be encapsulated in square parentheses ( [] ) and be separated by commas ( , ) without any spaces. Example: '[docs]' . No Empty string string relative Whether or not to use install the local Python package(s) as an editable. No false boolean exclude_dirs A single or multi-line string of directories to exclude in the Python API reference documentation. Note, only directory names, not paths, may be included. Note, all folders and their contents with these names will be excluded. Defaults to '__pycache__' . Important : When a user value is set, the preset value is overwritten - hence '__pycache__' should be included in the user value if one wants to exclude these directories. No __pycache__ string exclude_files A single or multi-line string of files to exclude in the Python API reference documentation. Note, only full file names, not paths, may be included, i.e., filename + file extension. Note, all files with these names will be excluded. Defaults to '__init__.py' . Important : When a user value is set, the preset value is overwritten - hence '__init__.py' should be included in the user value if one wants to exclude these files. No __init__.py string full_docs_dirs A single or multi-line string of directories in which to include everything - even those without documentation strings. This may be useful for a module full of data models or to ensure all class attributes are listed. No Empty string string full_docs_files A single or multi-line string of relative paths to files in which to include everything - even those without documentation strings. This may be useful for a file full of data models or to ensure all class attributes are listed. No Empty string string special_file_api_ref_options A single or multi-line string of combinations of a relative path to a Python file and a fully formed mkdocstrings option that should be added to the generated MarkDown file for the Python API reference documentation. Example: my_module/py_file.py,show_bases:false . Encapsulate the value in double quotation marks ( \" ) if including spaces ( ). Important : If multiple package_dirs are supplied, the relative path MUST include/start with the appropriate 'package_dir' value, e.g., \"my_package/my_module/py_file.py,show_bases: false\" . No Empty string string landing_page_replacements A single or multi-line string of replacements (mappings) to be performed on README.md when creating the documentation's landing page (index.md). This list always includes replacing 'docs/' with an empty string to correct relative links, i.e., this cannot be overwritten. By default '(LICENSE)' is replaced by '(LICENSE.md)' . No (LICENSE),(LICENSE.md) string landing_page_replacement_separator String to separate a mapping's 'old' to 'new' parts. Defaults to a comma ( , ). No , string test Whether to do a \"dry run\", i.e., run the workflow, but avoid pushing to 'permanent_dependencies_branch' branch and deploying documentation (if 'update_docs' is 'true'). No false boolean changelog_exclude_tags_regex A regular expression matching any tags that should be excluded from the CHANGELOG.md. No Empty string string changelog_exclude_labels Comma-separated list of labels to exclude from the CHANGELOG.md. No Empty string string","title":"Inputs"},{"location":"workflows/ci_cd_updated_default_branch/#secrets","text":"Name Description Required PAT A personal access token (PAT) with rights to update the permanent_dependencies_branch . This will fallback on GITHUB_TOKEN . No","title":"Secrets"},{"location":"workflows/ci_cd_updated_default_branch/#usage-example","text":"The following is an example of how a workflow may look that calls CI/CD - New updates to default branch . It is meant to be complete as is. name : CI - Activate auto-merging for Dependabot PRs on : push : branches : - stable jobs : updates-to-stable : name : Call external workflow uses : SINTEF/ci-cd/.github/workflows/ci_cd_updated_default_branch.yml@v1 if : github.repository_owner == 'SINTEF' with : git_username : \"Casper Welzel Andersen\" git_email : \"CasperWA@github.com\" default_repo_branch : stable permanent_dependencies_branch : \"ci/dependency-updates\" update_docs : true package_dirs : | my_python_package my_other_python_package doc_extras : \"[docs]\" exclude_files : __init__.py,config.py full_docs_dirs : models landing_page_replacements : \"(LICENSE);(LICENSE.md)|(tools);(../tools)\" landing_page_replacements_mapping_separator : \";\" secrets : PAT : ${{ secrets.PAT }}","title":"Usage example"},{"location":"workflows/ci_check_pyproject_dependencies/","text":"CI - Check pyproject.toml dependencies \u00b6 File to use: ci_check_pyproject_dependencies.yml This workflow runs an Invoke task to check dependencies in a pyproject.toml file. The reason for having this workflow and not using Dependabot is because it seems to not function properly with this use case. Warning If a PAT is not passed through for the PAT secret and GITHUB_TOKEN is used, beware that any other CI/CD jobs that run for, e.g., pull request events, may not run since GITHUB_TOKEN -generated PRs are designed to not start more workflows to avoid escalation. Hence, if it is important to run CI/CD workflows for pull requests, consider passing a PAT as a secret to this workflow represented by the PAT secret. Expectations \u00b6 The repository contains the following: ( required ) A repository root pyproject.toml file with the Python package's dependencies. Inputs \u00b6 Name Description Required Default Type git_username A git username (used to set the 'user.name' config option). Yes string git_email A git user's email address (used to set the 'user.email' config option). Yes string permanent_dependencies_branch The branch name for the permanent dependency updates branch. No ci/dependency-updates string python_version The Python version to use for the workflow. No 3.9 string install_extras Any extras to install from the local repository through 'pip'. Must be encapsulated in square parentheses ( [] ) and be separated by commas ( , ) without any spaces. Example: '[dev,release]' . No Empty string string pr_body_file Relative path to PR body file from the root of the repository. Example: '.github/utils/pr_body_deps_check.txt' . No Empty string string fail_fast Whether the task to update dependencies should fail if any error occurs. No false boolean pr_labels A comma separated list of strings of GitHub labels to use for the created PR. No Empty string string Secrets \u00b6 Name Description Required PAT A personal access token (PAT) with rights to update the permanent_dependencies_branch . This will fallback on GITHUB_TOKEN . No Usage example \u00b6 The following is an example of how a workflow may look that calls CI - Check pyproject.toml dependencies . It is meant to be complete as is. name : CI - Check dependencies on : schedule : - cron : \"30 5 * * 1\" workflow_dispatch : jobs : check-dependencies : name : Call external workflow uses : SINTEF/ci-cd/.github/workflows/ci_check_pyproject_dependencies.yml@v1 if : github.repository_owner == 'SINTEF' with : git_username : \"Casper Welzel Andersen\" git_email : \"CasperWA@github.com\" permanent_dependencies_branch : \"ci/dependency-updates\" python_version : \"3.9\" install_extras : \"[dev]\" pr_labels : \"CI/CD\" secrets : PAT : ${{ secrets.PAT }}","title":"CI - Check pyproject.toml dependencies"},{"location":"workflows/ci_check_pyproject_dependencies/#ci-check-pyprojecttoml-dependencies","text":"File to use: ci_check_pyproject_dependencies.yml This workflow runs an Invoke task to check dependencies in a pyproject.toml file. The reason for having this workflow and not using Dependabot is because it seems to not function properly with this use case. Warning If a PAT is not passed through for the PAT secret and GITHUB_TOKEN is used, beware that any other CI/CD jobs that run for, e.g., pull request events, may not run since GITHUB_TOKEN -generated PRs are designed to not start more workflows to avoid escalation. Hence, if it is important to run CI/CD workflows for pull requests, consider passing a PAT as a secret to this workflow represented by the PAT secret.","title":"CI - Check pyproject.toml dependencies"},{"location":"workflows/ci_check_pyproject_dependencies/#expectations","text":"The repository contains the following: ( required ) A repository root pyproject.toml file with the Python package's dependencies.","title":"Expectations"},{"location":"workflows/ci_check_pyproject_dependencies/#inputs","text":"Name Description Required Default Type git_username A git username (used to set the 'user.name' config option). Yes string git_email A git user's email address (used to set the 'user.email' config option). Yes string permanent_dependencies_branch The branch name for the permanent dependency updates branch. No ci/dependency-updates string python_version The Python version to use for the workflow. No 3.9 string install_extras Any extras to install from the local repository through 'pip'. Must be encapsulated in square parentheses ( [] ) and be separated by commas ( , ) without any spaces. Example: '[dev,release]' . No Empty string string pr_body_file Relative path to PR body file from the root of the repository. Example: '.github/utils/pr_body_deps_check.txt' . No Empty string string fail_fast Whether the task to update dependencies should fail if any error occurs. No false boolean pr_labels A comma separated list of strings of GitHub labels to use for the created PR. No Empty string string","title":"Inputs"},{"location":"workflows/ci_check_pyproject_dependencies/#secrets","text":"Name Description Required PAT A personal access token (PAT) with rights to update the permanent_dependencies_branch . This will fallback on GITHUB_TOKEN . No","title":"Secrets"},{"location":"workflows/ci_check_pyproject_dependencies/#usage-example","text":"The following is an example of how a workflow may look that calls CI - Check pyproject.toml dependencies . It is meant to be complete as is. name : CI - Check dependencies on : schedule : - cron : \"30 5 * * 1\" workflow_dispatch : jobs : check-dependencies : name : Call external workflow uses : SINTEF/ci-cd/.github/workflows/ci_check_pyproject_dependencies.yml@v1 if : github.repository_owner == 'SINTEF' with : git_username : \"Casper Welzel Andersen\" git_email : \"CasperWA@github.com\" permanent_dependencies_branch : \"ci/dependency-updates\" python_version : \"3.9\" install_extras : \"[dev]\" pr_labels : \"CI/CD\" secrets : PAT : ${{ secrets.PAT }}","title":"Usage example"},{"location":"workflows/ci_tests/","text":"CI - Tests \u00b6 File to use: ci_tests.yml A basic set of CI tests. Several different basic test jobs are available in this workflow. By default, they will all run and should be actively \"turned off\". CI jobs \u00b6 The following sections summarizes each job and the individual inputs necessary for it to function or to adjust how it runs. Note, a full list of possible inputs and secrets will be given in a separate table at the end of this page. Run pre-commit \u00b6 Run the pre-commit tool for all files in the repository according to the repository's configuration file. Expectations \u00b6 pre-commit should be setup for the repository. For more information about pre-commit , please see the tool's website: pre-commit.com . This job should not be run if the repository does not implement pre-commit . Inputs \u00b6 Name Description Required Default Type run_pre-commit Run the pre-commit test job. No true boolean python_version_pre-commit The Python version to use for the pre-commit test job. No 3.9 string install_extras Any extras to install from the local repository through 'pip'. Must be encapsulated in square parentheses ( [] ) and be separated by commas ( , ) without any spaces. Example: '[dev,pre-commit]' . No Empty string string skip_pre-commit_hooks A comma-separated list of pre-commit hook IDs to skip when running pre-commit after updating hooks. No Empty string string Run pylint & safety \u00b6 Run the pylint and/or safety tools. The pylint tool can be run in different ways. Either it is run once and the pylint_targets is a required input, while pylint_options is a single- or multi-line optional input. Or pylint_runs is used, a single- or multi-line input, to explicitly write out all pylint options and target(s) one line at a time. For each line in pylint_runs , pylint will be executed. Using pylint_runs is useful if you have a section of your code, which should be run with a custom set of options, otherwise it is recommended to instead simply use the pylint_targets and optionally also pylint_options inputs. The safety tool checks all installed Python packages, hence the install_extras input should be given as to install all possible dependencies. Expectations \u00b6 There are no expectations or pre-requisites. pylint and safety can be run without a pre-configuration. Inputs \u00b6 Name Description Required Default Type run_pylint Run the pylint test job. No true boolean run_safety Run the safety test job. No true boolean python_version_pylint_safety The Python version to use for the pylint and safety test jobs. No 3.9 string install_extras Any extras to install from the local repository through 'pip'. Must be encapsulated in square parentheses ( [] ) and be separated by commas ( , ) without any spaces. Example: '[dev,pre-commit]' . No Empty string string pylint_targets Space-separated string of pylint file and folder targets. Note : This is only valid if pylint_runs is not defined. Yes, if pylint_runs is not defined Empty string string pylint_options Single space-separated or multi-line string of pylint command line options. Note : This is only valid if pylint_runs is not defined. No Empty string string pylint_runs Single or multi-line string with each line representing a separate pylint run/execution. This should include all desired options and targets. Important : The inputs pylint_options and pylint_targets will be ignored if this is defined. No Empty string string safety_options Single space-separated or multi-line string of safety command line options. No Empty string string Build distribution package \u00b6 Test building the Python package. This job is equivalent to building the package in the CD - Release workflow, but will not publish anything. Expectations \u00b6 The repository should be a \"buildable\" Python package. Inputs \u00b6 Name Description Required Default Type run_build_package Run the build package test job. No true boolean python_version_package The Python version to use for the build package test job. No 3.9 string build_libs A space-separated list of packages to install via PyPI ( pip install ). No Empty string string build_cmd The package build command, e.g., 'flit build' or 'python -m build' (default). No python -m build string Build MkDocs Documentation \u00b6 Test building the documentation within the MkDocs framework. Note If using mike , note that this will not be tested, as this would be equivalent to testing mike itself and whether it can build a MkDocs documentation, which should never be part of a repository that uses these tools. If used together with the Update API Reference in Documentation , please align the relative input with the --relative option, when running the hook. See the proper section to understand why and how these options and inputs should be aligned. Expectations \u00b6 Is is expected that documentation exists, which is using the MkDocs framework. This requires at minimum a mkdocs.yml configuration file. Inputs \u00b6 Name Description Required Default Type run_build_docs Run the build package test job. No true boolean update_python_api_ref Whether or not to update the Python API documentation reference. Note : If this is true , package_dirs is required . No true boolean update_docs_landing_page Whether or not to update the documentation landing page. The landing page will be based on the root README.md file. No true boolean python_version_docs The Python version to use for the build documentation test job. No 3.9 string install_extras Any extras to install from the local repository through 'pip'. Must be encapsulated in square parentheses ( [] ) and be separated by commas ( , ) without any spaces. Example : '[dev,docs]' . No Empty string string relative Whether or not to use install the local Python package(s) as an editable. No false boolean package_dirs A single or multi-line string of path to Python package directories relative to the repository directory to be considered for creating the Python API reference documentation. Example : 'src/my_package' . Yes, if update_python_api_ref is true (default) Empty string string exclude_dirs A single or multi-line string of directories to exclude in the Python API reference documentation. Note, only directory names, not paths, may be included. Note, all folders and their contents with these names will be excluded. Defaults to '__pycache__' . Important : When a user value is set, the preset value is overwritten - hence '__pycache__' should be included in the user value if one wants to exclude these directories. No __pycache__ string exclude_files A single or multi-line string of files to exclude in the Python API reference documentation. Note, only full file names, not paths, may be included, i.e., filename + file extension. Note, all files with these names will be excluded. Defaults to '__init__.py' . Important : When a user value is set, the preset value is overwritten - hence '__init__.py' should be included in the user value if one wants to exclude these files. No __init__.py string full_docs_dirs A single or multi-line string of directories in which to include everything - even those without documentation strings. This may be useful for a module full of data models or to ensure all class attributes are listed. No Empty string string full_docs_files A single or multi-line string of relative paths to files in which to include everything - even those without documentation strings. This may be useful for a file full of data models or to ensure all class attributes are listed. No Empty string string special_file_api_ref_options A single or multi-line string of combinations of a relative path to a Python file and a fully formed mkdocstrings option that should be added to the generated MarkDown file for the Python API reference documentation. Example: my_module/py_file.py,show_bases:false . Encapsulate the value in double quotation marks ( \" ) if including spaces ( ). Important : If multiple package_dirs are supplied, the relative path MUST include/start with the appropriate 'package_dir' value, e.g., \"my_package/my_module/py_file.py,show_bases: false\" . No Empty string string landing_page_replacements A single or multi-line string of replacements (mappings) to be performed on README.md when creating the documentation's landing page (index.md). This list always includes replacing 'docs/' with an empty string to correct relative links, i.e., this cannot be overwritten. By default '(LICENSE)' is replaced by '(LICENSE.md)' . No (LICENSE),(LICENSE.md) string landing_page_replacement_separator String to separate a mapping's 'old' to 'new' parts. Defaults to a comma ( , ). No , string warnings_as_errors Build the documentation in 'strict' mode, treating warnings as errors. Important : If this is set to false , beware that the documentation may not be rendered or built as one may have intended. Default: true . No true boolean debug Whether to do print extra debug statements. No false boolean Usage example \u00b6 The following is an example of how a workflow may look that calls CI - Tests . It is meant to be complete as is. name : CI - Tests on : pull_request : pull : branches : - 'main' jobs : tests : name : Run basic tests uses : SINTEF/ci-cd/.github/workflows/ci_tests.yml@v1 with : python_version_pylint_safety : \"3.8\" python_version_docs : \"3.7\" install_extras : \"[dev,docs]\" skip_pre-commit_hooks : pylint pylint_options : --rcfile=pyproject.toml pylint_targets : my_python_package build_libs : flit build_cmd : flit build update_python_api_ref : false update_docs_landing_page : false Here is another example using pylint_runs instead of pylint_targets and pylint_options . name : CI - Tests on : pull_request : pull : branches : - 'main' jobs : tests : name : Run basic tests uses : SINTEF/ci-cd/.github/workflows/ci_tests.yml@v1 with : python_version_pylint_safety : \"3.8\" python_version_docs : \"3.7\" install_extras : \"[dev,docs]\" skip_pre-commit_hooks : pylint pylint_runs : | --rcfile=pyproject.toml --ignore-paths=tests/ my_python_package --rcfile=pyproject.toml --disable=import-outside-toplevel,redefined-outer-name tests build_libs : flit build_cmd : flit build update_python_api_ref : false update_docs_landing_page : false Full list of inputs \u00b6 Here follows the full list of inputs available for this workflow. However, it is recommended to instead refer to the job-specific tables of inputs when considering which inputs to provide. Name Description Required Default Type run_pre-commit Run the pre-commit test job. No true boolean skip_pre-commit_hooks A comma-separated list of pre-commit hook IDs to skip when running pre-commit after updating hooks. No Empty string string run_pylint Run the pylint test job. No true boolean run_safety Run the safety test job. No true boolean pylint_targets Space-separated string of pylint file and folder targets. Note : This is only valid if pylint_runs is not defined. Yes, if pylint_runs is not defined Empty string string pylint_options Single space-separated or multi-line string of pylint command line options. Note : This is only valid if pylint_runs is not defined. No Empty string string pylint_runs Single or multi-line string with each line representing a separate pylint run/execution. This should include all desired options and targets. Important : The inputs pylint_options and pylint_targets will be ignored if this is defined. No Empty string string safety_options Single space-separated or multi-line string of safety command line options. No Empty string string run_build_package Run the build package test job. No true boolean build_libs A space-separated list of packages to install via PyPI ( pip install ). No Empty string string build_cmd The package build command, e.g., 'flit build' or 'python -m build' (default). No python -m build string run_build_docs Run the build package test job. No true boolean update_python_api_ref Whether or not to update the Python API documentation reference. Note : If this is true , package_dirs is required . No true boolean update_docs_landing_page Whether or not to update the documentation landing page. The landing page will be based on the root README.md file. No true boolean python_version_pre-commit The Python version to use for the pre-commit test job. No 3.9 string python_version_pylint_safety The Python version to use for the pylint and safety test jobs. No 3.9 string python_version_package The Python version to use for the build package test job. No 3.9 string python_version_docs The Python version to use for the build documentation test job. No 3.9 string install_extras Any extras to install from the local repository through 'pip'. Must be encapsulated in square parentheses ( [] ) and be separated by commas ( , ) without any spaces. Example : '[dev,docs]' . No Empty string string relative Whether or not to use install the local Python package(s) as an editable, only when running the build_docs job. No false boolean package_dirs A single or multi-line string of path to Python package directories relative to the repository directory to be considered for creating the Python API reference documentation. Example : 'src/my_package' . Yes, if update_python_api_ref is true (default) Empty string string exclude_dirs A single or multi-line string of directories to exclude in the Python API reference documentation. Note, only directory names, not paths, may be included. Note, all folders and their contents with these names will be excluded. Defaults to '__pycache__' . Important : When a user value is set, the preset value is overwritten - hence '__pycache__' should be included in the user value if one wants to exclude these directories. No __pycache__ string exclude_files A single or multi-line string of files to exclude in the Python API reference documentation. Note, only full file names, not paths, may be included, i.e., filename + file extension. Note, all files with these names will be excluded. Defaults to '__init__.py' . Important : When a user value is set, the preset value is overwritten - hence '__init__.py' should be included in the user value if one wants to exclude these files. No __init__.py string full_docs_dirs A single or multi-line string of directories in which to include everything - even those without documentation strings. This may be useful for a module full of data models or to ensure all class attributes are listed. No Empty string string full_docs_files A single or multi-line string of relative paths to files in which to include everything - even those without documentation strings. This may be useful for a file full of data models or to ensure all class attributes are listed. No Empty string string special_file_api_ref_options A single or multi-line string of combinations of a relative path to a Python file and a fully formed mkdocstrings option that should be added to the generated MarkDown file for the Python API reference documentation. Example: my_module/py_file.py,show_bases:false . Encapsulate the value in double quotation marks ( \" ) if including spaces ( ). Important : If multiple package_dirs are supplied, the relative path MUST include/start with the appropriate 'package_dir' value, e.g., \"my_package/my_module/py_file.py,show_bases: false\" . No Empty string string landing_page_replacements A single or multi-line string of replacements (mappings) to be performed on README.md when creating the documentation's landing page (index.md). This list always includes replacing 'docs/' with an empty string to correct relative links, i.e., this cannot be overwritten. By default '(LICENSE)' is replaced by '(LICENSE.md)' . No (LICENSE),(LICENSE.md) string landing_page_replacement_separator String to separate a mapping's 'old' to 'new' parts. Defaults to a comma ( , ). No , string warnings_as_errors Build the documentation in 'strict' mode, treating warnings as errors. Important : If this is set to false , beware that the documentation may not be rendered or built as one may have intended. Default: true . No true boolean debug Whether to do print extra debug statements. No false boolean","title":"CI - Tests"},{"location":"workflows/ci_tests/#ci-tests","text":"File to use: ci_tests.yml A basic set of CI tests. Several different basic test jobs are available in this workflow. By default, they will all run and should be actively \"turned off\".","title":"CI - Tests"},{"location":"workflows/ci_tests/#ci-jobs","text":"The following sections summarizes each job and the individual inputs necessary for it to function or to adjust how it runs. Note, a full list of possible inputs and secrets will be given in a separate table at the end of this page.","title":"CI jobs"},{"location":"workflows/ci_tests/#run-pre-commit","text":"Run the pre-commit tool for all files in the repository according to the repository's configuration file.","title":"Run pre-commit"},{"location":"workflows/ci_tests/#expectations","text":"pre-commit should be setup for the repository. For more information about pre-commit , please see the tool's website: pre-commit.com . This job should not be run if the repository does not implement pre-commit .","title":"Expectations"},{"location":"workflows/ci_tests/#inputs","text":"Name Description Required Default Type run_pre-commit Run the pre-commit test job. No true boolean python_version_pre-commit The Python version to use for the pre-commit test job. No 3.9 string install_extras Any extras to install from the local repository through 'pip'. Must be encapsulated in square parentheses ( [] ) and be separated by commas ( , ) without any spaces. Example: '[dev,pre-commit]' . No Empty string string skip_pre-commit_hooks A comma-separated list of pre-commit hook IDs to skip when running pre-commit after updating hooks. No Empty string string","title":"Inputs"},{"location":"workflows/ci_tests/#run-pylint-safety","text":"Run the pylint and/or safety tools. The pylint tool can be run in different ways. Either it is run once and the pylint_targets is a required input, while pylint_options is a single- or multi-line optional input. Or pylint_runs is used, a single- or multi-line input, to explicitly write out all pylint options and target(s) one line at a time. For each line in pylint_runs , pylint will be executed. Using pylint_runs is useful if you have a section of your code, which should be run with a custom set of options, otherwise it is recommended to instead simply use the pylint_targets and optionally also pylint_options inputs. The safety tool checks all installed Python packages, hence the install_extras input should be given as to install all possible dependencies.","title":"Run pylint &amp; safety"},{"location":"workflows/ci_tests/#expectations_1","text":"There are no expectations or pre-requisites. pylint and safety can be run without a pre-configuration.","title":"Expectations"},{"location":"workflows/ci_tests/#inputs_1","text":"Name Description Required Default Type run_pylint Run the pylint test job. No true boolean run_safety Run the safety test job. No true boolean python_version_pylint_safety The Python version to use for the pylint and safety test jobs. No 3.9 string install_extras Any extras to install from the local repository through 'pip'. Must be encapsulated in square parentheses ( [] ) and be separated by commas ( , ) without any spaces. Example: '[dev,pre-commit]' . No Empty string string pylint_targets Space-separated string of pylint file and folder targets. Note : This is only valid if pylint_runs is not defined. Yes, if pylint_runs is not defined Empty string string pylint_options Single space-separated or multi-line string of pylint command line options. Note : This is only valid if pylint_runs is not defined. No Empty string string pylint_runs Single or multi-line string with each line representing a separate pylint run/execution. This should include all desired options and targets. Important : The inputs pylint_options and pylint_targets will be ignored if this is defined. No Empty string string safety_options Single space-separated or multi-line string of safety command line options. No Empty string string","title":"Inputs"},{"location":"workflows/ci_tests/#build-distribution-package","text":"Test building the Python package. This job is equivalent to building the package in the CD - Release workflow, but will not publish anything.","title":"Build distribution package"},{"location":"workflows/ci_tests/#expectations_2","text":"The repository should be a \"buildable\" Python package.","title":"Expectations"},{"location":"workflows/ci_tests/#inputs_2","text":"Name Description Required Default Type run_build_package Run the build package test job. No true boolean python_version_package The Python version to use for the build package test job. No 3.9 string build_libs A space-separated list of packages to install via PyPI ( pip install ). No Empty string string build_cmd The package build command, e.g., 'flit build' or 'python -m build' (default). No python -m build string","title":"Inputs"},{"location":"workflows/ci_tests/#build-mkdocs-documentation","text":"Test building the documentation within the MkDocs framework. Note If using mike , note that this will not be tested, as this would be equivalent to testing mike itself and whether it can build a MkDocs documentation, which should never be part of a repository that uses these tools. If used together with the Update API Reference in Documentation , please align the relative input with the --relative option, when running the hook. See the proper section to understand why and how these options and inputs should be aligned.","title":"Build MkDocs Documentation"},{"location":"workflows/ci_tests/#expectations_3","text":"Is is expected that documentation exists, which is using the MkDocs framework. This requires at minimum a mkdocs.yml configuration file.","title":"Expectations"},{"location":"workflows/ci_tests/#inputs_3","text":"Name Description Required Default Type run_build_docs Run the build package test job. No true boolean update_python_api_ref Whether or not to update the Python API documentation reference. Note : If this is true , package_dirs is required . No true boolean update_docs_landing_page Whether or not to update the documentation landing page. The landing page will be based on the root README.md file. No true boolean python_version_docs The Python version to use for the build documentation test job. No 3.9 string install_extras Any extras to install from the local repository through 'pip'. Must be encapsulated in square parentheses ( [] ) and be separated by commas ( , ) without any spaces. Example : '[dev,docs]' . No Empty string string relative Whether or not to use install the local Python package(s) as an editable. No false boolean package_dirs A single or multi-line string of path to Python package directories relative to the repository directory to be considered for creating the Python API reference documentation. Example : 'src/my_package' . Yes, if update_python_api_ref is true (default) Empty string string exclude_dirs A single or multi-line string of directories to exclude in the Python API reference documentation. Note, only directory names, not paths, may be included. Note, all folders and their contents with these names will be excluded. Defaults to '__pycache__' . Important : When a user value is set, the preset value is overwritten - hence '__pycache__' should be included in the user value if one wants to exclude these directories. No __pycache__ string exclude_files A single or multi-line string of files to exclude in the Python API reference documentation. Note, only full file names, not paths, may be included, i.e., filename + file extension. Note, all files with these names will be excluded. Defaults to '__init__.py' . Important : When a user value is set, the preset value is overwritten - hence '__init__.py' should be included in the user value if one wants to exclude these files. No __init__.py string full_docs_dirs A single or multi-line string of directories in which to include everything - even those without documentation strings. This may be useful for a module full of data models or to ensure all class attributes are listed. No Empty string string full_docs_files A single or multi-line string of relative paths to files in which to include everything - even those without documentation strings. This may be useful for a file full of data models or to ensure all class attributes are listed. No Empty string string special_file_api_ref_options A single or multi-line string of combinations of a relative path to a Python file and a fully formed mkdocstrings option that should be added to the generated MarkDown file for the Python API reference documentation. Example: my_module/py_file.py,show_bases:false . Encapsulate the value in double quotation marks ( \" ) if including spaces ( ). Important : If multiple package_dirs are supplied, the relative path MUST include/start with the appropriate 'package_dir' value, e.g., \"my_package/my_module/py_file.py,show_bases: false\" . No Empty string string landing_page_replacements A single or multi-line string of replacements (mappings) to be performed on README.md when creating the documentation's landing page (index.md). This list always includes replacing 'docs/' with an empty string to correct relative links, i.e., this cannot be overwritten. By default '(LICENSE)' is replaced by '(LICENSE.md)' . No (LICENSE),(LICENSE.md) string landing_page_replacement_separator String to separate a mapping's 'old' to 'new' parts. Defaults to a comma ( , ). No , string warnings_as_errors Build the documentation in 'strict' mode, treating warnings as errors. Important : If this is set to false , beware that the documentation may not be rendered or built as one may have intended. Default: true . No true boolean debug Whether to do print extra debug statements. No false boolean","title":"Inputs"},{"location":"workflows/ci_tests/#usage-example","text":"The following is an example of how a workflow may look that calls CI - Tests . It is meant to be complete as is. name : CI - Tests on : pull_request : pull : branches : - 'main' jobs : tests : name : Run basic tests uses : SINTEF/ci-cd/.github/workflows/ci_tests.yml@v1 with : python_version_pylint_safety : \"3.8\" python_version_docs : \"3.7\" install_extras : \"[dev,docs]\" skip_pre-commit_hooks : pylint pylint_options : --rcfile=pyproject.toml pylint_targets : my_python_package build_libs : flit build_cmd : flit build update_python_api_ref : false update_docs_landing_page : false Here is another example using pylint_runs instead of pylint_targets and pylint_options . name : CI - Tests on : pull_request : pull : branches : - 'main' jobs : tests : name : Run basic tests uses : SINTEF/ci-cd/.github/workflows/ci_tests.yml@v1 with : python_version_pylint_safety : \"3.8\" python_version_docs : \"3.7\" install_extras : \"[dev,docs]\" skip_pre-commit_hooks : pylint pylint_runs : | --rcfile=pyproject.toml --ignore-paths=tests/ my_python_package --rcfile=pyproject.toml --disable=import-outside-toplevel,redefined-outer-name tests build_libs : flit build_cmd : flit build update_python_api_ref : false update_docs_landing_page : false","title":"Usage example"},{"location":"workflows/ci_tests/#full-list-of-inputs","text":"Here follows the full list of inputs available for this workflow. However, it is recommended to instead refer to the job-specific tables of inputs when considering which inputs to provide. Name Description Required Default Type run_pre-commit Run the pre-commit test job. No true boolean skip_pre-commit_hooks A comma-separated list of pre-commit hook IDs to skip when running pre-commit after updating hooks. No Empty string string run_pylint Run the pylint test job. No true boolean run_safety Run the safety test job. No true boolean pylint_targets Space-separated string of pylint file and folder targets. Note : This is only valid if pylint_runs is not defined. Yes, if pylint_runs is not defined Empty string string pylint_options Single space-separated or multi-line string of pylint command line options. Note : This is only valid if pylint_runs is not defined. No Empty string string pylint_runs Single or multi-line string with each line representing a separate pylint run/execution. This should include all desired options and targets. Important : The inputs pylint_options and pylint_targets will be ignored if this is defined. No Empty string string safety_options Single space-separated or multi-line string of safety command line options. No Empty string string run_build_package Run the build package test job. No true boolean build_libs A space-separated list of packages to install via PyPI ( pip install ). No Empty string string build_cmd The package build command, e.g., 'flit build' or 'python -m build' (default). No python -m build string run_build_docs Run the build package test job. No true boolean update_python_api_ref Whether or not to update the Python API documentation reference. Note : If this is true , package_dirs is required . No true boolean update_docs_landing_page Whether or not to update the documentation landing page. The landing page will be based on the root README.md file. No true boolean python_version_pre-commit The Python version to use for the pre-commit test job. No 3.9 string python_version_pylint_safety The Python version to use for the pylint and safety test jobs. No 3.9 string python_version_package The Python version to use for the build package test job. No 3.9 string python_version_docs The Python version to use for the build documentation test job. No 3.9 string install_extras Any extras to install from the local repository through 'pip'. Must be encapsulated in square parentheses ( [] ) and be separated by commas ( , ) without any spaces. Example : '[dev,docs]' . No Empty string string relative Whether or not to use install the local Python package(s) as an editable, only when running the build_docs job. No false boolean package_dirs A single or multi-line string of path to Python package directories relative to the repository directory to be considered for creating the Python API reference documentation. Example : 'src/my_package' . Yes, if update_python_api_ref is true (default) Empty string string exclude_dirs A single or multi-line string of directories to exclude in the Python API reference documentation. Note, only directory names, not paths, may be included. Note, all folders and their contents with these names will be excluded. Defaults to '__pycache__' . Important : When a user value is set, the preset value is overwritten - hence '__pycache__' should be included in the user value if one wants to exclude these directories. No __pycache__ string exclude_files A single or multi-line string of files to exclude in the Python API reference documentation. Note, only full file names, not paths, may be included, i.e., filename + file extension. Note, all files with these names will be excluded. Defaults to '__init__.py' . Important : When a user value is set, the preset value is overwritten - hence '__init__.py' should be included in the user value if one wants to exclude these files. No __init__.py string full_docs_dirs A single or multi-line string of directories in which to include everything - even those without documentation strings. This may be useful for a module full of data models or to ensure all class attributes are listed. No Empty string string full_docs_files A single or multi-line string of relative paths to files in which to include everything - even those without documentation strings. This may be useful for a file full of data models or to ensure all class attributes are listed. No Empty string string special_file_api_ref_options A single or multi-line string of combinations of a relative path to a Python file and a fully formed mkdocstrings option that should be added to the generated MarkDown file for the Python API reference documentation. Example: my_module/py_file.py,show_bases:false . Encapsulate the value in double quotation marks ( \" ) if including spaces ( ). Important : If multiple package_dirs are supplied, the relative path MUST include/start with the appropriate 'package_dir' value, e.g., \"my_package/my_module/py_file.py,show_bases: false\" . No Empty string string landing_page_replacements A single or multi-line string of replacements (mappings) to be performed on README.md when creating the documentation's landing page (index.md). This list always includes replacing 'docs/' with an empty string to correct relative links, i.e., this cannot be overwritten. By default '(LICENSE)' is replaced by '(LICENSE.md)' . No (LICENSE),(LICENSE.md) string landing_page_replacement_separator String to separate a mapping's 'old' to 'new' parts. Defaults to a comma ( , ). No , string warnings_as_errors Build the documentation in 'strict' mode, treating warnings as errors. Important : If this is set to false , beware that the documentation may not be rendered or built as one may have intended. Default: true . No true boolean debug Whether to do print extra debug statements. No false boolean","title":"Full list of inputs"},{"location":"workflows/ci_update_dependencies/","text":"CI - Update dependencies PR \u00b6 File to use: ci_update_dependencies.yml This workflow creates a PR if there are any updates in the permanent_dependencies_branch branch that have not been included in the default_repo_branch branch. This workflow works nicely together with the CI - Check pyproject.toml dependencies workflow, and the same value for permanent_dependencies_branch should be used. In this way, this workflow can be called on a schedule to update the dependencies that have been merged into the permanent_dependencies_branch branch into the default_repo_branch branch. The main point of having this workflow is to have a single PR, which can be squash merged, to merge several dependency updates performed by Dependabot or similar. As a \"bonus\" this workflow supports updating pre-commit hooks. Warning If a PAT is not passed through for the PAT secret and GITHUB_TOKEN is used, beware that any other CI/CD jobs that run for, e.g., pull request events, may not run since GITHUB_TOKEN -generated PRs are designed to not start more workflows to avoid escalation. Hence, if it is important to run CI/CD workflows for pull requests, consider passing a PAT as a secret to this workflow represented by the PAT secret. Important If this is to be used together with the CI/CD - New updates to default branch workflow, the pr_body_file supplied (if any) should be immutable within the first 8 lines, i.e., no check boxes or similar in the first 8 lines. Indeed, it is recommended to not supply a pr_body_file in this case. Expectations \u00b6 There are no expectations of the repo when using this workflow. Inputs \u00b6 Name Description Required Default Type git_username A git username (used to set the 'user.name' config option). Yes string git_email A git user's email address (used to set the 'user.email' config option). Yes string permanent_dependencies_branch The branch name for the permanent dependency updates branch. No ci/dependency-updates string default_repo_branch The branch name of the repository's default branch. More specifically, the branch the PR should target. No main string pr_body_file Relative path to PR body file from the root of the repository. Example: '.github/utils/pr_body_update_deps.txt' . No Empty string string pr_labels A comma separated list of strings of GitHub labels to use for the created PR. No Empty string string extra_to_dos A multi-line string (insert \\n to create line breaks) with extra 'to do' checks. Should start with - [ ] . No Empty string string update_pre-commit Whether or not to update pre-commit hooks as part of creating the PR. No false boolean python_version The Python version to use for the workflow. Note : This is only relevant if update_pre-commit is true . No 3.9 string install_extras Any extras to install from the local repository through 'pip'. Must be encapsulated in square parentheses ( [] ) and be separated by commas ( , ) without any spaces. Example: '[dev,pre-commit]' . Note : This is only relevant if update_pre-commit is true . No Empty string string skip_pre-commit_hooks A comma-separated list of pre-commit hook IDs to skip when running pre-commit after updating hooks. Note : This is only relevant if update_pre-commit is true . No Empty string string Secrets \u00b6 Name Description Required PAT A personal access token (PAT) with rights to update the permanent_dependencies_branch . This will fallback on GITHUB_TOKEN . No Usage example \u00b6 The following is an example of how a workflow may look that calls CI - Update dependencies PR . It is meant to be complete as is. name : CI - Update dependencies on : schedule : - cron : \"30 6 * * 3\" workflow_dispatch : jobs : check-dependencies : name : Call external workflow uses : SINTEF/ci-cd/.github/workflows/ci_update_dependencies.yml@v1 if : github.repository_owner == 'SINTEF' with : git_username : \"Casper Welzel Andersen\" git_email : \"CasperWA@github.com\" permanent_dependencies_branch : \"ci/dependency-updates\" default_repo_branch : stable pr_labels : \"CI/CD\" extra_to_dos : \"- [ ] Make sure the PR is **squash** merged, with a sensible commit message.\\n- [ ] Check related `requirements*.txt` files are updated accordingly.\" update_pre-commit : true python_version : \"3.9\" install_extras : \"[pre-commit]\" skip_pre-commit_hooks : \"pylint,pylint-models\" secrets : PAT : ${{ secrets.PAT }}","title":"CI - Update dependencies PR"},{"location":"workflows/ci_update_dependencies/#ci-update-dependencies-pr","text":"File to use: ci_update_dependencies.yml This workflow creates a PR if there are any updates in the permanent_dependencies_branch branch that have not been included in the default_repo_branch branch. This workflow works nicely together with the CI - Check pyproject.toml dependencies workflow, and the same value for permanent_dependencies_branch should be used. In this way, this workflow can be called on a schedule to update the dependencies that have been merged into the permanent_dependencies_branch branch into the default_repo_branch branch. The main point of having this workflow is to have a single PR, which can be squash merged, to merge several dependency updates performed by Dependabot or similar. As a \"bonus\" this workflow supports updating pre-commit hooks. Warning If a PAT is not passed through for the PAT secret and GITHUB_TOKEN is used, beware that any other CI/CD jobs that run for, e.g., pull request events, may not run since GITHUB_TOKEN -generated PRs are designed to not start more workflows to avoid escalation. Hence, if it is important to run CI/CD workflows for pull requests, consider passing a PAT as a secret to this workflow represented by the PAT secret. Important If this is to be used together with the CI/CD - New updates to default branch workflow, the pr_body_file supplied (if any) should be immutable within the first 8 lines, i.e., no check boxes or similar in the first 8 lines. Indeed, it is recommended to not supply a pr_body_file in this case.","title":"CI - Update dependencies PR"},{"location":"workflows/ci_update_dependencies/#expectations","text":"There are no expectations of the repo when using this workflow.","title":"Expectations"},{"location":"workflows/ci_update_dependencies/#inputs","text":"Name Description Required Default Type git_username A git username (used to set the 'user.name' config option). Yes string git_email A git user's email address (used to set the 'user.email' config option). Yes string permanent_dependencies_branch The branch name for the permanent dependency updates branch. No ci/dependency-updates string default_repo_branch The branch name of the repository's default branch. More specifically, the branch the PR should target. No main string pr_body_file Relative path to PR body file from the root of the repository. Example: '.github/utils/pr_body_update_deps.txt' . No Empty string string pr_labels A comma separated list of strings of GitHub labels to use for the created PR. No Empty string string extra_to_dos A multi-line string (insert \\n to create line breaks) with extra 'to do' checks. Should start with - [ ] . No Empty string string update_pre-commit Whether or not to update pre-commit hooks as part of creating the PR. No false boolean python_version The Python version to use for the workflow. Note : This is only relevant if update_pre-commit is true . No 3.9 string install_extras Any extras to install from the local repository through 'pip'. Must be encapsulated in square parentheses ( [] ) and be separated by commas ( , ) without any spaces. Example: '[dev,pre-commit]' . Note : This is only relevant if update_pre-commit is true . No Empty string string skip_pre-commit_hooks A comma-separated list of pre-commit hook IDs to skip when running pre-commit after updating hooks. Note : This is only relevant if update_pre-commit is true . No Empty string string","title":"Inputs"},{"location":"workflows/ci_update_dependencies/#secrets","text":"Name Description Required PAT A personal access token (PAT) with rights to update the permanent_dependencies_branch . This will fallback on GITHUB_TOKEN . No","title":"Secrets"},{"location":"workflows/ci_update_dependencies/#usage-example","text":"The following is an example of how a workflow may look that calls CI - Update dependencies PR . It is meant to be complete as is. name : CI - Update dependencies on : schedule : - cron : \"30 6 * * 3\" workflow_dispatch : jobs : check-dependencies : name : Call external workflow uses : SINTEF/ci-cd/.github/workflows/ci_update_dependencies.yml@v1 if : github.repository_owner == 'SINTEF' with : git_username : \"Casper Welzel Andersen\" git_email : \"CasperWA@github.com\" permanent_dependencies_branch : \"ci/dependency-updates\" default_repo_branch : stable pr_labels : \"CI/CD\" extra_to_dos : \"- [ ] Make sure the PR is **squash** merged, with a sensible commit message.\\n- [ ] Check related `requirements*.txt` files are updated accordingly.\" update_pre-commit : true python_version : \"3.9\" install_extras : \"[pre-commit]\" skip_pre-commit_hooks : \"pylint,pylint-models\" secrets : PAT : ${{ secrets.PAT }}","title":"Usage example"}]}