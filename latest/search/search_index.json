{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"CI/CD tools","text":"<p>Current version to use: <code>v2.2.0</code></p> <p>Use tried and tested continuous integration (CI) and continuous deployment (CD) tools from this repository.</p> <p>Currently, the repository offers GitHub Actions callable/reusable workflows and pre-commit hooks.</p>"},{"location":"#github-actions-callablereusable-workflows","title":"GitHub Actions callable/reusable Workflows","text":"<p>This repository contains reusable workflows for GitHub Actions.</p> <p>They are mainly for usage with modern Python package repositories.</p>"},{"location":"#available-workflows","title":"Available workflows","text":"<p>The callable, reusable workflows available from this repository are described in detail in this documentation under the Workflows section.</p>"},{"location":"#general-usage","title":"General usage","text":"<p>See the GitHub Docs on the topic of calling a reusable workflow to understand how one can incoporate one of these workflows in your workflow.</p> <p>Note</p> <p>Workflow-level set <code>env</code> context variables cannot be used when setting input values for the called workflow. See the GitHub documentation for more information on the <code>env</code> context.</p> <p>Under the Workflows section for each available workflow, a usage example will be given.</p>"},{"location":"#pre-commit-hooks","title":"pre-commit hooks","text":"<p>This repository contains hooks for keeping the documentation up-to-date, making available a few invoke tasks used in the reusable workflows.</p> <p>By implementing and using these hooks together with the workflows, one may ensure no extra commits are created during the workflow run to update the documentation.</p>"},{"location":"#available-hooks","title":"Available hooks","text":"<p>The pre-commit hooks available from this repository are described in detail in this documentation under the Hooks section.</p>"},{"location":"#general-usage_1","title":"General usage","text":"<p>Add the hooks to your <code>.pre-commit-config.yaml</code> file. See the pre-commit webpage for more information about how to use pre-commit.</p> <p>Under the Hooks section for each available hook, a usage example will be given.</p>"},{"location":"#license-copyright","title":"License &amp; copyright","text":"<p>This repository licensed under the  MIT LICENSE with copyright \u00a9 2022 Casper Welzel Andersen (CasperWA) &amp; SINTEF (on GitHub).</p>"},{"location":"#funding-support","title":"Funding support","text":"<p>This repository has been supported by the following projects:</p> <ul> <li> <p>OntoTrans (2020-2024) that receives funding from the European Union\u2019s Horizon 2020 Research and Innovation Programme, under Grant Agreement n. 862136.</p> </li> <li> <p>OpenModel (2021-2025) receives funding from the European Union\u2019s Horizon 2020 Research and Innovation Programme - DT-NMBP-11-2020 Open Innovation Platform for Materials Modelling, under Grant Agreement no: 953167.</p> </li> </ul>"},{"location":"CHANGELOG/","title":"Changelog","text":""},{"location":"CHANGELOG/#unreleased-2023-03-15","title":"Unreleased (2023-03-15)","text":"<p>Full Changelog</p> <p>Fixed bugs:</p> <ul> <li>Typo in auto-merge callable workflow #117</li> <li>Fix GH Actions variable naming #120 (CasperWA)</li> <li>Fix typo in auto merge workflow #118 (CasperWA)</li> </ul> <p>Merged pull requests:</p> <ul> <li>[Auto-generated] Update dependencies #121 (TEAM4-0)</li> </ul>"},{"location":"CHANGELOG/#v220-2023-03-10","title":"v2.2.0 (2023-03-10)","text":"<p>Full Changelog</p> <p>Implemented enhancements:</p> <ul> <li>Add API reference documentation for this repository #113</li> <li>Allow to skip or keep dependency at certain level #95</li> </ul> <p>Fixed bugs:</p> <ul> <li><code>fail_fast</code> should still make <code>update-deps</code> task fail #112</li> </ul> <p>Merged pull requests:</p> <ul> <li>Implement <code>ignore</code> option for <code>update-deps</code> task #111 (CasperWA)</li> <li>Add API reference documentation for <code>ci-cd</code> #110 (CasperWA)</li> <li>Update Python API #109 (CasperWA)</li> <li>[Auto-generated] Update dependencies #107 (TEAM4-0)</li> </ul>"},{"location":"CHANGELOG/#v210-2023-02-07","title":"v2.1.0 (2023-02-07)","text":"<p>Full Changelog</p> <p>Implemented enhancements:</p> <ul> <li>Use custom token when possible #104</li> <li>Extend \"automerge\" workflow with changes #69</li> </ul> <p>Closed issues:</p> <ul> <li>Acknowledge testing dependencies in pyproject.toml #93</li> </ul> <p>Merged pull requests:</p> <ul> <li>Always try to use <code>PAT</code> prior to <code>GITHUB_TOKEN</code> #105 (CasperWA)</li> <li>[Auto-generated] Update dependencies #103 (TEAM4-0)</li> <li>[Auto-generated] Update dependencies #97 (TEAM4-0)</li> <li>Changes prior to auto-merge #88 (CasperWA)</li> </ul>"},{"location":"CHANGELOG/#v200-2022-12-06","title":"v2.0.0 (2022-12-06)","text":"<p>Full Changelog</p> <p>Implemented enhancements:</p> <ul> <li>Make <code>test: true</code> actually work for \"CD - Release\" #83</li> </ul> <p>Fixed bugs:</p> <ul> <li>Bad usage of backticks in warning message #79</li> </ul> <p>Closed issues:</p> <ul> <li>Drop using a <code>vMAJOR</code> dynamic tag #81</li> </ul> <p>Merged pull requests:</p> <ul> <li>[Auto-generated] Update dependencies #85 (TEAM4-0)</li> <li>Changed to vMajor tag for pre-commit in ci_update_dependencies.yml #82 (francescalb)</li> <li>Use quotes instead of backticks in warning message #80 (CasperWA)</li> </ul>"},{"location":"CHANGELOG/#v135-2022-11-17","title":"v1.3.5 (2022-11-17)","text":"<p>Full Changelog</p> <p>Fixed bugs:</p> <ul> <li>Undo commit d525ea0f069b6615aa352a7f385c21b31f29b985 #77</li> </ul> <p>Merged pull requests:</p> <ul> <li>Make <code>--strict</code> toggleable for <code>mkdocs build</code> #78 (CasperWA)</li> <li>[Auto-generated] Update dependencies #76 (TEAM4-0)</li> </ul>"},{"location":"CHANGELOG/#v134-2022-10-31","title":"v1.3.4 (2022-10-31)","text":"<p>Full Changelog</p> <p>Implemented enhancements:</p> <ul> <li>Support setting full versions in pre-commit config #72</li> </ul> <p>Merged pull requests:</p> <ul> <li>Only freeze repo hook version if using 'v1' #73 (CasperWA)</li> </ul>"},{"location":"CHANGELOG/#v133-2022-10-12","title":"v1.3.3 (2022-10-12)","text":"<p>Full Changelog</p> <p>Implemented enhancements:</p> <ul> <li>Support setting python version restrictions in dependencies #70</li> </ul> <p>Merged pull requests:</p> <ul> <li>Extend dependency spec regex #71 (CasperWA)</li> </ul>"},{"location":"CHANGELOG/#v132-2022-10-10","title":"v1.3.2 (2022-10-10)","text":"<p>Full Changelog</p> <p>Fixed bugs:</p> <ul> <li>Don't change <code>.pages</code> in API ref hook #66</li> </ul> <p>Merged pull requests:</p> <ul> <li>[Auto-generated] Update dependencies #68 (TEAM4-0)</li> <li>Ensure <code>.pages</code> does not get mkdocstrings option #67 (CasperWA)</li> </ul>"},{"location":"CHANGELOG/#v131-2022-10-06","title":"v1.3.1 (2022-10-06)","text":"<p>Full Changelog</p> <p>Fixed bugs:</p> <ul> <li>Nested modules not represented properly #64</li> </ul> <p>Merged pull requests:</p> <ul> <li>Ensure API reference documentation works for multiple large packages #65 (CasperWA)</li> </ul>"},{"location":"CHANGELOG/#v130-2022-10-05","title":"v1.3.0 (2022-10-05)","text":"<p>Full Changelog</p> <p>Implemented enhancements:</p> <ul> <li>Custom API ref file options #57</li> <li>Test installing Python package after building it #56</li> <li>Support multi-package repositories #55</li> <li>Use custom Python version for CI tests #54</li> </ul> <p>Fixed bugs:</p> <ul> <li>Local workflows out-of-date #62</li> <li>Invoke task \"update docs index\" missing defaults #53</li> </ul> <p>Closed issues:</p> <ul> <li>Documentation issue #52</li> </ul> <p>Merged pull requests:</p> <ul> <li>Update local workflows with new input names #63 (CasperWA)</li> <li>Custom Python versions for jobs #61 (CasperWA)</li> <li>Custom API reference options #60 (CasperWA)</li> <li>Fix documentation typos #59 (CasperWA)</li> <li>Support multiple packages in the same repo #58 (CasperWA)</li> <li>[Auto-generated] Update dependencies #50 (TEAM4-0)</li> <li>[Auto-generated] Update dependencies #48 (TEAM4-0)</li> </ul>"},{"location":"CHANGELOG/#v122-2022-08-24","title":"v1.2.2 (2022-08-24)","text":"<p>Full Changelog</p> <p>Fixed bugs:</p> <ul> <li>API reference links depends on installation type #46</li> </ul> <p>Merged pull requests:</p> <ul> <li>API reference links corrections #47 (CasperWA)</li> </ul>"},{"location":"CHANGELOG/#v121-2022-08-23","title":"v1.2.1 (2022-08-23)","text":"<p>Full Changelog</p> <p>Fixed bugs:</p> <ul> <li>Properly point to API reference files #44</li> </ul> <p>Merged pull requests:</p> <ul> <li>Add unit tests for tasks #45 (CasperWA)</li> <li>[Auto-generated] Update dependencies #43 (TEAM4-0)</li> </ul>"},{"location":"CHANGELOG/#v120-2022-07-18","title":"v1.2.0 (2022-07-18)","text":"<p>Full Changelog</p> <p>Implemented enhancements:</p> <ul> <li>Add workflow for \"standard\" CI tests #23</li> <li>Add local CI tests #22</li> </ul> <p>Fixed bugs:</p> <ul> <li>Update all mentions of <code>CasperWA</code> to <code>SINTEF</code> #37</li> <li>Hook not working due to task error #32</li> </ul> <p>Closed issues:</p> <ul> <li>Credit funding projects #35</li> <li>Update documentation title and README #29</li> </ul> <p>Merged pull requests:</p> <ul> <li>[Auto-generated] Update dependencies #39 (TEAM4-0)</li> <li>Convert to SINTEF owner instead of CasperWA #38 (CasperWA)</li> <li>Update README title and description + funding #36 (CasperWA)</li> <li>Basic CI tests workflow #33 (CasperWA)</li> </ul>"},{"location":"CHANGELOG/#v112-2022-07-08","title":"v1.1.2 (2022-07-08)","text":"<p>Full Changelog</p> <p>Implemented enhancements:</p> <ul> <li>Update package version #28 (CasperWA)</li> </ul> <p>Fixed bugs:</p> <ul> <li>Fix usage of invoke tasks for lists #30</li> <li>Default <code>args</code> for <code>docs-landing-page</code> doesn't work #27</li> <li>Update internal Python package along with releases #26</li> </ul> <p>Merged pull requests:</p> <ul> <li>Default <code>args</code> fix for <code>docs-landing-page</code> hook #31 (CasperWA)</li> </ul>"},{"location":"CHANGELOG/#v111-2022-07-06","title":"v1.1.1 (2022-07-06)","text":"<p>Full Changelog</p> <p>Fixed bugs:</p> <ul> <li>Hooks not working externally #21</li> </ul> <p>Merged pull requests:</p> <ul> <li>Use invoke as library #25 (CasperWA)</li> </ul>"},{"location":"CHANGELOG/#v110-2022-07-06","title":"v1.1.0 (2022-07-06)","text":"<p>Full Changelog</p> <p>Implemented enhancements:</p> <ul> <li>New pre-commit hooks for invoke tasks #16</li> </ul> <p>Merged pull requests:</p> <ul> <li>First pre-commit hooks #20 (CasperWA)</li> </ul>"},{"location":"CHANGELOG/#v101-2022-07-06","title":"v1.0.1 (2022-07-06)","text":"<p>Full Changelog</p> <p>Fixed bugs:</p> <ul> <li>Ensure PREVIOUS_VERSION can be retrieved if input not given #19</li> <li>Fix condition for running steps in CI/CD workflow #18</li> </ul> <p>Closed issues:</p> <ul> <li>Update documentation to <code>@v1</code> #15</li> </ul>"},{"location":"CHANGELOG/#v100-2022-07-06","title":"v1.0.0 (2022-07-06)","text":"<p>Full Changelog</p> <p>Implemented enhancements:</p> <ul> <li>Use proper option for changelog generator instead of moving file afterwards #13</li> <li>Update CHANGELOG with unreleased stuff when updating default branch #11</li> <li>Update to new repo name #8</li> <li>Allow testing/debugging CI/CD workflow #6</li> <li>Make \"FIRST_RELEASE\" bool more robust #3</li> </ul> <p>Fixed bugs:</p> <ul> <li>Exclude tags from PREVIOUS_VERSION in release workflow #17</li> <li>Update local workflow for updated CI/CD workflow #12</li> <li>Fix links for various \"default\" PR bodies and tag messages #9</li> <li>API Reference creation not working #7</li> <li>Ensure the permanent dependencies branch is always updated #4</li> </ul> <p>Closed issues:</p> <ul> <li>Update documentation with new inputs for CI/CD workflow #14</li> <li>Workflow overview in documentation #5</li> </ul> <p>Merged pull requests:</p> <ul> <li>Update repo and workflow title names #10 (CasperWA)</li> </ul>"},{"location":"CHANGELOG/#v010-2022-07-05","title":"v0.1.0 (2022-07-05)","text":"<p>Full Changelog</p> <p>Merged pull requests:</p> <ul> <li>New workflow triggering changes with new default branch changes #1 (CasperWA)</li> </ul> <p>* This Changelog was automatically generated by github_changelog_generator</p>"},{"location":"LICENSE/","title":"License","text":"<p>MIT License</p> <p>Copyright (c) 2022 Casper Welzel Andersen &amp; SINTEF</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"api_reference/exceptions/","title":"exceptions","text":"<p>CI/CD-specific exceptions.</p>"},{"location":"api_reference/exceptions/#ci_cd.exceptions.CICDException","title":"<code> CICDException            (Exception)         </code>","text":"<p>Top-level package exception class.</p> Source code in <code>ci_cd/exceptions.py</code> <pre><code>class CICDException(Exception):\n\"\"\"Top-level package exception class.\"\"\"\n</code></pre>"},{"location":"api_reference/exceptions/#ci_cd.exceptions.InputError","title":"<code> InputError            (ValueError, CICDException)         </code>","text":"<p>There is an error with the input given to a task.</p> Source code in <code>ci_cd/exceptions.py</code> <pre><code>class InputError(ValueError, CICDException):\n\"\"\"There is an error with the input given to a task.\"\"\"\n</code></pre>"},{"location":"api_reference/exceptions/#ci_cd.exceptions.InputParserError","title":"<code> InputParserError            (InputError)         </code>","text":"<p>The input could not be parsed, it may be wrongly formatted.</p> Source code in <code>ci_cd/exceptions.py</code> <pre><code>class InputParserError(InputError):\n\"\"\"The input could not be parsed, it may be wrongly formatted.\"\"\"\n</code></pre>"},{"location":"api_reference/main/","title":"main","text":"<p>Main invoke Program.</p> <p>See invoke documentation for more information.</p>"},{"location":"api_reference/utils/","title":"utils","text":"<p>Repository management tasks powered by <code>invoke</code>. More information on <code>invoke</code> can be found at pyinvoke.org.</p>"},{"location":"api_reference/utils/#ci_cd.utils.Emoji","title":"<code> Emoji            (str, Enum)         </code>","text":"<p>Unicode strings for certain emojis.</p> Source code in <code>ci_cd/utils.py</code> <pre><code>class Emoji(str, Enum):\n\"\"\"Unicode strings for certain emojis.\"\"\"\n\n    PARTY_POPPER = \"\\U0001f389\"\n    CHECK_MARK = \"\\u2714\"\n    CROSS_MARK = \"\\u274c\"\n    CURLY_LOOP = \"\\u27b0\"\n</code></pre>"},{"location":"api_reference/utils/#ci_cd.utils.SemanticVersion","title":"<code> SemanticVersion        </code>","text":"<p>A semantic version.</p> <p>See SemVer.org for more information about semantic versioning.</p> <p>The semantic version is in this invocation considered to build up in the following way:</p> <pre><code>&lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;-&lt;pre_release&gt;+&lt;build&gt;\n</code></pre> <p>Where the names in carets are callable attributes for the instance.</p> <p>When casting instances of <code>SemanticVersion</code> to <code>str</code>, the full version will be returned, i.e., as shown above, with a minimum of major.minor.patch.</p> <p>For example, for the version <code>1.5</code>, i.e., <code>major=1, minor=5</code>, the returned <code>str</code> representation will be the full major.minor.patch version: <code>1.5.0</code>. The <code>patch</code> attribute will default to <code>0</code> while <code>pre_release</code> and <code>build</code> will be <code>None</code>, when asked for explicitly.</p> <p>Parameters:</p> Name Type Description Default <code>major</code> <code>Union[str, int]</code> <p>The major version.</p> required <code>minor</code> <code>Optional[Union[str, int]]</code> <p>The minor version.</p> <code>None</code> <code>patch</code> <code>Optional[Union[str, int]]</code> <p>The patch version.</p> <code>None</code> <code>pre_release</code> <code>Optional[str]</code> <p>The pre-release part of the version, i.e., the part supplied after a minus (<code>-</code>), but before a plus (<code>+</code>).</p> <code>None</code> <code>build</code> <code>Optional[str]</code> <p>The build metadata part of the version, i.e., the part supplied at the end of the version, after a plus (<code>+</code>).</p> <code>None</code> <p>Attributes:</p> Name Type Description <code>major</code> <code>int</code> <p>The major version.</p> <code>minor</code> <code>int</code> <p>The minor version.</p> <code>patch</code> <code>int</code> <p>The patch version.</p> <code>pre_release</code> <code>str</code> <p>The pre-release part of the version, i.e., the part supplied after a minus (<code>-</code>), but before a plus (<code>+</code>).</p> <code>build</code> <code>str</code> <p>The build metadata part of the version, i.e., the part supplied at the end of the version, after a plus (<code>+</code>).</p> Source code in <code>ci_cd/utils.py</code> <pre><code>class SemanticVersion:\n\"\"\"A semantic version.\n\n    See [SemVer.org](https://semver.org) for more information about semantic\n    versioning.\n\n    The semantic version is in this invocation considered to build up in the following\n    way:\n\n        &lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;-&lt;pre_release&gt;+&lt;build&gt;\n\n    Where the names in carets are callable attributes for the instance.\n\n    When casting instances of `SemanticVersion` to `str`, the full version will be\n    returned, i.e., as shown above, with a minimum of major.minor.patch.\n\n    For example, for the version `1.5`, i.e., `major=1, minor=5`, the returned `str`\n    representation will be the full major.minor.patch version: `1.5.0`.\n    The `patch` attribute will default to `0` while `pre_release` and `build` will be\n    `None`, when asked for explicitly.\n\n    Parameters:\n        major (Union[str, int]): The major version.\n        minor (Optional[Union[str, int]]): The minor version.\n        patch (Optional[Union[str, int]]): The patch version.\n        pre_release (Optional[str]): The pre-release part of the version, i.e., the\n            part supplied after a minus (`-`), but before a plus (`+`).\n        build (Optional[str]): The build metadata part of the version, i.e., the part\n            supplied at the end of the version, after a plus (`+`).\n\n    Attributes:\n        major (int): The major version.\n        minor (int): The minor version.\n        patch (int): The patch version.\n        pre_release (str): The pre-release part of the version, i.e., the part\n            supplied after a minus (`-`), but before a plus (`+`).\n        build (str): The build metadata part of the version, i.e., the part supplied at\n            the end of the version, after a plus (`+`).\n\n    \"\"\"\n\n    def __init__(\n        self,\n        major: \"Union[str, int]\",\n        minor: \"Optional[Union[str, int]]\" = None,\n        patch: \"Optional[Union[str, int]]\" = None,\n        pre_release: \"Optional[str]\" = None,\n        build: \"Optional[str]\" = None,\n    ) -&gt; None:\n        self._major = int(major)\n        self._minor = int(minor) if minor else 0\n        self._patch = int(patch) if patch else 0\n        self._pre_release = pre_release if pre_release else None\n        self._build = build if build else None\n\n    @property\n    def major(self) -&gt; int:\n\"\"\"The major version.\"\"\"\n        return self._major\n\n    @property\n    def minor(self) -&gt; int:\n\"\"\"The minor version.\"\"\"\n        return self._minor\n\n    @property\n    def patch(self) -&gt; int:\n\"\"\"The patch version.\"\"\"\n        return self._patch\n\n    @property\n    def pre_release(self) -&gt; \"Union[None, str]\":\n\"\"\"The pre-release part of the version\n\n        This is the part supplied after a minus (`-`), but before a plus (`+`).\n        \"\"\"\n        return self._pre_release\n\n    @property\n    def build(self) -&gt; \"Union[None, str]\":\n\"\"\"The build metadata part of the version.\n\n        This is the part supplied at the end of the version, after a plus (`+`).\n        \"\"\"\n        return self._build\n\n    def __str__(self) -&gt; str:\n\"\"\"Return the full version.\"\"\"\n        return (\n            f\"{self.major}.{self.minor}.{self.patch}\"\n            f\"{f'-{self.pre_release}' if self.pre_release else ''}\"\n            f\"{f'+{self.build}' if self.build else ''}\"\n        )\n\n    def __repr__(self) -&gt; str:\n\"\"\"Return the string representation of the object.\"\"\"\n        return repr(self.__str__())\n</code></pre>"},{"location":"api_reference/utils/#ci_cd.utils.SemanticVersion.build","title":"<code>build: Union[None, str]</code>  <code>property</code> <code>readonly</code>","text":"<p>The build metadata part of the version.</p> <p>This is the part supplied at the end of the version, after a plus (<code>+</code>).</p>"},{"location":"api_reference/utils/#ci_cd.utils.SemanticVersion.major","title":"<code>major: int</code>  <code>property</code> <code>readonly</code>","text":"<p>The major version.</p>"},{"location":"api_reference/utils/#ci_cd.utils.SemanticVersion.minor","title":"<code>minor: int</code>  <code>property</code> <code>readonly</code>","text":"<p>The minor version.</p>"},{"location":"api_reference/utils/#ci_cd.utils.SemanticVersion.patch","title":"<code>patch: int</code>  <code>property</code> <code>readonly</code>","text":"<p>The patch version.</p>"},{"location":"api_reference/utils/#ci_cd.utils.SemanticVersion.pre_release","title":"<code>pre_release: Union[None, str]</code>  <code>property</code> <code>readonly</code>","text":"<p>The pre-release part of the version</p> <p>This is the part supplied after a minus (<code>-</code>), but before a plus (<code>+</code>).</p>"},{"location":"api_reference/utils/#ci_cd.utils.SemanticVersion.__repr__","title":"<code>__repr__(self)</code>  <code>special</code>","text":"<p>Return the string representation of the object.</p> Source code in <code>ci_cd/utils.py</code> <pre><code>def __repr__(self) -&gt; str:\n\"\"\"Return the string representation of the object.\"\"\"\n    return repr(self.__str__())\n</code></pre>"},{"location":"api_reference/utils/#ci_cd.utils.SemanticVersion.__str__","title":"<code>__str__(self)</code>  <code>special</code>","text":"<p>Return the full version.</p> Source code in <code>ci_cd/utils.py</code> <pre><code>def __str__(self) -&gt; str:\n\"\"\"Return the full version.\"\"\"\n    return (\n        f\"{self.major}.{self.minor}.{self.patch}\"\n        f\"{f'-{self.pre_release}' if self.pre_release else ''}\"\n        f\"{f'+{self.build}' if self.build else ''}\"\n    )\n</code></pre>"},{"location":"api_reference/utils/#ci_cd.utils.update_file","title":"<code>update_file(filename, sub_line, strip=None)</code>","text":"<p>Utility function for tasks to read, update, and write files</p> Source code in <code>ci_cd/utils.py</code> <pre><code>def update_file(\n    filename: Path, sub_line: \"Tuple[str, str]\", strip: \"Optional[str]\" = None\n) -&gt; None:\n\"\"\"Utility function for tasks to read, update, and write files\"\"\"\n    if strip is None and filename.suffix == \".md\":\n        # Keep special white space endings for markdown files\n        strip = \"\\n\"\n    lines = [\n        re.sub(sub_line[0], sub_line[1], line.rstrip(strip))\n        for line in filename.read_text(encoding=\"utf8\").splitlines()\n    ]\n    filename.write_text(\"\\n\".join(lines) + \"\\n\", encoding=\"utf8\")\n</code></pre>"},{"location":"api_reference/tasks/api_reference_docs/","title":"api_reference_docs","text":"<p><code>create_api_reference_docs</code> task.</p> <p>Create Python API reference in the documentation. This is specifically to be used with the MkDocs and mkdocstrings framework.</p>"},{"location":"api_reference/tasks/docs_index/","title":"docs_index","text":"<p><code>create_docs_index</code> task.</p> <p>Create the documentation index (home) page from <code>README.md</code>.</p>"},{"location":"api_reference/tasks/setver/","title":"setver","text":"<p><code>setver</code> task.</p> <p>Set the specified version.</p>"},{"location":"api_reference/tasks/update_deps/","title":"update_deps","text":"<p><code>update_deps</code> task.</p> <p>Update dependencies in a <code>pyproject.toml</code> file.</p>"},{"location":"api_reference/tasks/update_deps/#ci_cd.tasks.update_deps.ignore_version","title":"<code>ignore_version(current, latest, version_rules, semver_rules)</code>","text":"<p>Determine whether the latest version can be ignored.</p> <p>Parameters:</p> Name Type Description Default <code>current</code> <code>list[str]</code> <p>The current version as a list of version parts. It's expected, but not required, the version is a semantic version.</p> required <code>latest</code> <code>list[str]</code> <p>The latest version as a list of version parts. It's expected, but not required, the version is a semantic version.</p> required <code>version_rules</code> <code>\"list[dict[Literal['operator', 'version'], str]]\"</code> <p>Version ignore rules.</p> required <code>semver_rules</code> <code>\"dict[Literal['version-update'], list[Literal['major', 'minor', 'patch']]]\"</code> <p>Semantic version ignore rules.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>Whether or not the latest version can be ignored based on the version and semantic version ignore rules.</p> Source code in <code>ci_cd/tasks/update_deps.py</code> <pre><code>def ignore_version(\n    current: list[str],\n    latest: list[str],\n    version_rules: \"list[dict[Literal['operator', 'version'], str]]\",\n    semver_rules: \"dict[Literal['version-update'], list[Literal['major', 'minor', 'patch']]]\",  # pylint: disable=line-too-long\n) -&gt; bool:\n\"\"\"Determine whether the latest version can be ignored.\n\n    Parameters:\n        current: The current version as a list of version parts. It's expected, but not\n            required, the version is a semantic version.\n        latest: The latest version as a list of version parts. It's expected, but not\n            required, the version is a semantic version.\n        version_rules: Version ignore rules.\n        semver_rules: Semantic version ignore rules.\n\n    Returns:\n        Whether or not the latest version can be ignored based on the version and\n        semantic version ignore rules.\n\n    \"\"\"\n    # ignore all updates\n    if not version_rules and not semver_rules:\n        # A package name has been specified without specific rules, ignore all updates\n        # for package.\n        return True\n\n    # version rules\n    if _ignore_version_rules(latest, version_rules):\n        return True\n\n    # semver rules\n    if \"version-update\" in semver_rules and _ignore_semver_rules(\n        current, latest, semver_rules\n    ):\n        return True\n\n    return False\n</code></pre>"},{"location":"api_reference/tasks/update_deps/#ci_cd.tasks.update_deps.parse_ignore_entries","title":"<code>parse_ignore_entries(entries, separator)</code>","text":"<p>Parser for the <code>--ignore</code> option.</p> <p>The <code>--ignore</code> option values are given as key/value-pairs in the form: <code>key=value...key=value</code>. Here <code>...</code> is the separator value supplied by <code>--ignore-separator</code>.</p> <p>Parameters:</p> Name Type Description Default <code>entries</code> <code>list[str]</code> <p>The list of supplied <code>--ignore</code> options.</p> required <code>separator</code> <code>str</code> <p>The supplied <code>--ignore-separator</code> value.</p> required <p>Returns:</p> Type Description <code>'dict[str, dict[Literal[\"versions\", \"update-types\"], list[str]]]'</code> <p>A parsed mapping of dependencies to ignore rules.</p> Source code in <code>ci_cd/tasks/update_deps.py</code> <pre><code>def parse_ignore_entries(\n    entries: list[str], separator: str\n) -&gt; 'dict[str, dict[Literal[\"versions\", \"update-types\"], list[str]]]':\n\"\"\"Parser for the `--ignore` option.\n\n    The `--ignore` option values are given as key/value-pairs in the form:\n    `key=value...key=value`. Here `...` is the separator value supplied by\n    `--ignore-separator`.\n\n    Parameters:\n        entries: The list of supplied `--ignore` options.\n        separator: The supplied `--ignore-separator` value.\n\n    Returns:\n        A parsed mapping of dependencies to ignore rules.\n\n    \"\"\"\n    ignore_entries: 'dict[str, dict[Literal[\"versions\", \"update-types\"], list[str]]]' = (\n        {}\n    )\n\n    for entry in entries:\n        pairs = entry.split(separator, maxsplit=2)\n        for pair in pairs:\n            if separator in pair:\n                raise InputParserError(\n                    \"More than three key/value-pairs were given for an `--ignore` \"\n                    \"option, while there are only three allowed key names. Input \"\n                    f\"value: --ignore={entry}\"\n                )\n\n        ignore_entry: 'dict[Literal[\"dependency-name\", \"versions\", \"update-types\"], str]' = (  # pylint: disable=line-too-long\n            {}\n        )\n        for pair in pairs:\n            match = re.match(\n                r\"^(?P&lt;key&gt;dependency-name|versions|update-types)=(?P&lt;value&gt;.*)$\",\n                pair,\n            )\n            if match is None:\n                raise InputParserError(\n                    f\"Could not parse ignore configuration: {pair!r} (part of the \"\n                    f\"ignore option: {entry!r}\"\n                )\n            if match.group(\"key\") in ignore_entry:\n                raise InputParserError(\n                    \"An ignore configuration can only be given once per option. The \"\n                    f\"configuration key {match.group('key')!r} was found multiple \"\n                    f\"times in the option {entry!r}\"\n                )\n\n            ignore_entry[match.group(\"key\")] = match.group(\"value\").strip()  # type: ignore[index]  # pylint: disable=line-too-long\n\n        if \"dependency-name\" not in ignore_entry:\n            raise InputError(\n                \"Ignore option entry missing required 'dependency-name' \"\n                f\"configuration. Ignore option entry: {entry}\"\n            )\n\n        dependency_name: str = ignore_entry.pop(\"dependency-name\", \"\")\n        if dependency_name not in ignore_entries:\n            ignore_entries[dependency_name] = {\n                key: [value] for key, value in ignore_entry.items()  # type: ignore[misc]\n            }\n        else:\n            for key, value in ignore_entry.items():\n                ignore_entries[dependency_name][key].append(value)  # type: ignore[index]\n\n    return ignore_entries\n</code></pre>"},{"location":"api_reference/tasks/update_deps/#ci_cd.tasks.update_deps.parse_ignore_rules","title":"<code>parse_ignore_rules(rules)</code>","text":"<p>Parser for a specific set of ignore rules.</p> <p>Parameters:</p> Name Type Description Default <code>rules</code> <code>\"dict[Literal['versions', 'update-types'], list[str]]\"</code> <p>A set of ignore rules for one or more packages.</p> required <p>Returns:</p> Type Description <code>\"tuple[list[dict[Literal['operator', 'version'], str]], dict[Literal['version-update'], list[Literal['major', 'minor', 'patch']]]]\"</code> <p>A tuple of the parsed 'versions' and 'update-types' entries as dictionaries.</p> Source code in <code>ci_cd/tasks/update_deps.py</code> <pre><code>def parse_ignore_rules(\n    rules: \"dict[Literal['versions', 'update-types'], list[str]]\",\n) -&gt; \"tuple[list[dict[Literal['operator', 'version'], str]], dict[Literal['version-update'], list[Literal['major', 'minor', 'patch']]]]\":  # pylint: disable=line-too-long\n\"\"\"Parser for a specific set of ignore rules.\n\n    Parameters:\n        rules: A set of ignore rules for one or more packages.\n\n    Returns:\n        A tuple of the parsed 'versions' and 'update-types' entries as dictionaries.\n\n    \"\"\"\n    if not rules:\n        # Ignore package altogether\n        return [{\"operator\": \"&gt;=\", \"version\": \"0\"}], {}\n\n    versions: 'list[dict[Literal[\"operator\", \"version\"], str]]' = []\n    update_types: \"dict[Literal['version-update'], list[Literal['major', 'minor', 'patch']]]\" = (  # pylint: disable=line-too-long\n        {}\n    )\n\n    if \"versions\" in rules:\n        for versions_entry in rules[\"versions\"]:\n            match = re.match(\n                r\"^(?P&lt;operator&gt;&gt;|&lt;|&lt;=|&gt;=|==|!=|~=)\\s*\"\n                r\"(?P&lt;version&gt;[0-9]+(?:\\.[0-9]+){0,2})$\",\n                versions_entry,\n            )\n            if match is None:\n                raise InputParserError(\n                    \"Ignore option's 'versions' value cannot be parsed. It \"\n                    \"must be a single operator followed by a version number.\\n\"\n                    f\"Unparseable 'versions' value: {versions_entry!r}\"\n                )\n            versions.append(match.groupdict())  # type: ignore[arg-type]\n\n    if \"update-types\" in rules:\n        update_types[\"version-update\"] = []\n        for update_type_entry in rules[\"update-types\"]:\n            match = re.match(\n                r\"^version-update:semver-(?P&lt;semver_part&gt;major|minor|patch)$\",\n                update_type_entry,\n            )\n            if match is None:\n                raise InputParserError(\n                    \"Ignore option's 'update-types' value cannot be parsed.\"\n                    \" It must be either: 'version-update:semver-major', \"\n                    \"'version-update:semver-minor' or \"\n                    \"'version-update:semver-patch'.\\nUnparseable 'update-types' \"\n                    f\"value: {update_type_entry!r}\"\n                )\n            update_types[\"version-update\"].append(match.group(\"semver_part\"))  # type: ignore[arg-type]  # pylint: disable=line-too-long\n\n    return versions, update_types\n</code></pre>"},{"location":"hooks/","title":"pre-commit Hooks","text":"<p>pre-commit is an excellent tool for running CI tasks prior to committing new changes. The tasks are called \"hooks\" and are run in a separate virtual environment. The hooks usually change files in-place, meaning after pre-commit is run during a <code>git commit</code> command, the changed files can be reviewed and re-staged and committed.</p> <p>Through SINTEF/ci-cd several hooks are available, mainly related to the GitHub Actions callable/reusable workflows that are also available in this repository.</p> <p>This section contains all the available pre-commit hooks:</p> <ul> <li>Update API Reference in Documentation</li> <li>Update Landing Page (index.md) for Documentation</li> </ul>"},{"location":"hooks/docs_api_reference/","title":"Update API Reference in Documentation","text":"<p>pre-commit hook id: <code>docs-api-reference</code></p> <p>Run this hook to update the API Reference section of your documentation.</p> <p>The hook walks through a package directory, finding all Python files and creating a markdown file matching it along with recreating the Python API tree under the <code>docs/api_reference/</code> folder.</p> <p>The hook will run when any Python file is changed in the repository.</p> <p>The hook expects the documentation to be setup with the MkDocs framework, including the mkdocstrings plugin for parsing in the Python class/function and method doc-strings, as well as the awesome-pages plugin for providing proper titles in the table-of-contents navigation.</p>"},{"location":"hooks/docs_api_reference/#using-it-together-with-cicd-workflows","title":"Using it together with CI/CD workflows","text":"<p>If this hook is being used together with the workflow CI - Tests, to test if the documentation can be built, or CD - Release and/or CI/CD - New updates to default branch, to build and publish the documentation upon a release or push to the default branch, it is necessary to understand the way the Python API modules are referenced in the markdown files under <code>docs/api_reference/</code>.</p> <p>By default, the references refer to the Python import path of a module. However, should a package be installed as an editable installation, i.e., using <code>pip install -e</code>, then the relative path from the repository root will be used.</p> <p>This differentiation is only relevant for repositories, where these two cases are not aligned, such as when the Python package folder is in a nested folder, e.g., <code>src/my_package/</code>.</p> <p>In order to remedy this, there are a single configuration in each workflow and this hooks that needs to be set to the same value. For this hook, the option name is <code>--relative</code> and the value for using the relative path, i.e., an editable installation, is to simply include this toggle option. If the option is not included, then a non-editable installation is assumed, i.e., the <code>-e</code> option is not used when installing the package, and a proper resolvable Python import statement is used as a link in the API reference markdown files. The latter is the default.</p> <p>For the workflows, one should set the configuration option <code>relative</code> to <code>true</code> to use the relative path, i.e., an editable installation. And likewise set <code>relative</code> to <code>false</code> if a proper resolvable Python import statement is to be used, without forcing the <code>-e</code> option. The latter is the default.</p>"},{"location":"hooks/docs_api_reference/#expectations","title":"Expectations","text":"<p>It is required to specify the <code>--package-dir</code> argument at least once through the <code>args</code> key.</p> <p>Otherwise, as noted above, without the proper framework, the created markdown files will not bring about the desired result in a built documentation.</p>"},{"location":"hooks/docs_api_reference/#options","title":"Options","text":"<p>Any of these options can be given through the <code>args</code> key when defining the hook.</p> Name Description Required Default Type <code>--package-dir</code> Relative path to a package dir from the repository root, e.g., 'src/my_package'.This input option can be supplied multiple times. Yes string <code>--docs-folder</code> The folder name for the documentation root folder. No docs string <code>--unwanted-folder</code> A folder to avoid including into the Python API reference documentation. If this is not supplied, it will default to <code>__pycache__</code>.Note: Only folder names, not paths, may be included.Note: All folders and their contents with these names will be excluded.This input option can be supplied multiple times. No __pycache__ string <code>--unwanted-file</code> A file to avoid including into the Python API reference documentation. If this is not supplied, it will default to <code>__init__.py</code>Note: Only full file names, not paths, may be included, i.e., filename + file extension.Note: All files with these names will be excluded.This input option can be supplied multiple times. No __init__.py string <code>--full-docs-folder</code> A folder in which to include everything - even those without documentation strings. This may be useful for a module full of data models or to ensure all class attributes are listed.This input option can be supplied multiple times. No Empty string string <code>--full-docs-file</code> A full relative path to a file in which to include everything - even those without documentation strings. This may be useful for a file full of data models or to ensure all class attributes are listed.This input option can be supplied multiple times. No Empty string string <code>--special-option</code> A combination of a relative path to a file and a fully formed mkdocstrings option that should be added to the generated MarkDown file. The combination should be comma-separated.Example: <code>my_module/py_file.py,show_bases:false</code>.Encapsulate the value in double quotation marks (<code>\"</code>) if including spaces ( ).Important: If multiple package-dir options are supplied, the relative path MUST include/start with the package-dir value, e.g., <code>\"my_package/my_module/py_file.py,show_bases: false\"</code>.This input option can be supplied multiple times. The options will be accumulated for the same file, if given several times. No Empty string string <code>--relative</code> Whether or not to use relative Python import links in the API reference markdown files. See section Using it together with CI/CD workflows above. No <code>False</code> boolean <code>--debug</code> Whether or not to print debug statements. No <code>False</code> boolean"},{"location":"hooks/docs_api_reference/#usage-example","title":"Usage example","text":"<p>The following is an example of how an addition of the Update API Reference in Documentation hook into a <code>.pre-commit-config.yaml</code> file may look. It is meant to be complete as is.</p> <pre><code>repos:\n- repo: https://github.com/SINTEF/ci-cd\nrev: v2.2.0\nhooks:\n- id: docs-api-reference\nargs:\n- --package-dir\n- src/my_python_package\n- --package-dir\n- src/my_other_python_package\n- --full-docs-folder\n- models\n- --full-docs-folder\n- data\n</code></pre>"},{"location":"hooks/docs_landing_page/","title":"Update Landing Page (index.md) for Documentation","text":"<p>pre-commit hook id: <code>docs-landing-page</code></p> <p>Run this hook to update the landing page (root <code>index.md</code> file) for your documentation.</p> <p>The hook copies the root <code>README.md</code> file into the root of your documentation folder, renaming it to <code>index.md</code> and implementing any replacements specified.</p> <p>The hook will run when the root <code>README.md</code> file is changed in the repository.</p> <p>The hook expects the documentation to be a framework that can build markdown files for deploying a documentation site.</p>"},{"location":"hooks/docs_landing_page/#expectations","title":"Expectations","text":"<p>It is required that the root <code>README.md</code> exists and the documentation's landing page is named <code>index.md</code> and can be found in the root of the documentation folder.</p>"},{"location":"hooks/docs_landing_page/#options","title":"Options","text":"<p>Any of these options can be given through the <code>args</code> key when defining the hook.</p> Name Description Required Default Type <code>--docs-folder</code> The folder name for the documentation root folder. No docs string <code>--replacement</code> A replacement (mapping) to be performed on <code>README.md</code> when creating the documentation's landing page (<code>index.md</code>). This list always includes replacing '<code>--docs-folder</code>/' with an empty string, in order to correct relative links. By default the value <code>(LICENSE),(LICENSE.md)</code> is set, but this will be overwritten if <code>args</code> is set.This input option can be supplied multiple times. No (LICENSE),(LICENSE.md) string <code>--replacement-separator</code> String to separate a replacement's 'old' to 'new' parts. Defaults to a comma (<code>,</code>). No , string"},{"location":"hooks/docs_landing_page/#usage-example","title":"Usage example","text":"<p>The following is an example of how an addition of the Update Landing Page (index.md) for Documentation hook into a <code>.pre-commit-config.yaml</code> file may look. It is meant to be complete as is.</p> <pre><code>repos:\n- repo: https://github.com/SINTEF/ci-cd\nrev: v2.2.0\nhooks:\n- id: docs-landing-page\nargs:\n# Replace `(LICENSE)` with `(LICENSE.md)` (i.e., don't overwrite the default)\n- '--replacement'\n- '(LICENSE);(LICENSE.md)'\n# Replace `(tools/` with `(`\n- '--replacement'\n- '(tools/;('\n- '--replacement-separator'\n- ';'\n</code></pre>"},{"location":"workflows/","title":"GitHub Actions callable/reusable Workflows","text":"<p>This section contains all the available callable/reusable workflows:</p> <ul> <li>CD - Release (<code>cd_release.yml</code>)</li> <li>CI - Activate auto-merging for PRs (<code>ci_automerge_prs.yml</code>)</li> <li>CI/CD - New updates to default branch (<code>ci_cd_updated_default_branch.yml</code>))</li> <li>CI - Check pyproject.toml dependencies (<code>ci_check_pyproject_dependencies.yml</code>)</li> <li>CI - Tests (<code>ci_tests.yml</code>)</li> <li>CI - Update dependencies PR (<code>ci_update_dependencies.yml</code>)</li> </ul>"},{"location":"workflows/cd_release/","title":"CD - Release","text":"<p>File to use: <code>cd_release.yml</code></p> <p>There are 2 jobs in this workflow, which run in sequence.</p> <p>First, an update &amp; publish job, which updates the version in the package's root <code>__init__.py</code> file through an Invoke task. The newly created tag (created due to the caller workflow running <code>on.release.types.published</code>) will be updated accordingly, as will the publish branch (defaults to <code>main</code>).</p> <p>Secondly, a job to update the documentation is run, however, this can be deactivated. The job expects the documentation to be setup with the mike+MkDocs+GitHub Pages framework.</p> <p>For more information about the specific changelog inputs, see the related changelog generator actually used, specifically the list of configuration options.</p> <p>Note</p> <p>Concerning the changelog generator, the specific input <code>changelog_exclude_labels</code> defaults to a list of different labels if not supplied, hence, if supplied, one might want to include these labels alongside any extra labels. The default value is given here as a help: <code>'duplicate,question,invalid,wontfix'</code></p> <p>The <code>changelog_exclude_tags_regex</code> is also used to remove tags in a list of tags to consider when evaluating the \"previous version\". This is specifically for adding a changelog to the GitHub release body.</p> <p>If used together with the Update API Reference in Documentation, please align the <code>relative</code> input with the <code>--relative</code> option, when running the hook. See the proper section to understand why and how these options and inputs should be aligned.</p>"},{"location":"workflows/cd_release/#updating-instances-of-version-in-repository-files","title":"Updating instances of version in repository files","text":"<p>The content of repository files can be updated to use the new version where necessary. This is done through the <code>version_update_changes</code> (and <code>version_update_changes_separator</code>) inputs.</p> <p>To see an example of how to use the <code>version_update_changes</code> (and <code>version_update_changes_separator</code>) see for example the workflow used by the SINTEF/ci-cd repository calling the CD Release workflow.</p> <p>Some notes to consider and respect when using <code>version_update_changes</code> are:</p> <ul> <li>The value of <code>version_update_changes_separator</code> applies to all lines given in <code>version_update_changes</code>, meaning it should be a character, or series of characters, which will not be part of the actual content.</li> <li> <p>Specifically, concerning the 'raw' Python string 'pattern' the following applies:</p> <ul> <li>Always escape double quotes (<code>\"</code>).   This is done by prefixing it with a backslash (<code>\\</code>): <code>\\\"</code>.</li> <li>Escape special bash/sh characters, e.g., back tick (<code>`</code>).</li> <li>Escape special Python regular expression characters, if they are not used for their intended purpose in this 'raw' string.   See the <code>re</code> library documentation for more information.</li> </ul> </li> </ul> <p>Concerning the 'replacement string' part, the <code>package_dirs</code> input and full semantic version can be substituted in dynamically by wrapping either <code>package_dir</code> or <code>version</code> in curly braces (<code>{}</code>). Indeed, for the version, one can specify sub-parts of the version to use, e.g., if one desires to only use the major version, this can be done by using the <code>major</code> attribute: <code>{version.major}</code>. The full list of version attributes are: <code>major</code>, <code>minor</code>, <code>patch</code>, <code>pre_release</code>, and <code>build</code>. More can be used, e.g., to only insert the major.minor version: <code>{version.major}.{version.minor}</code>.</p> <p>For the 'file path' part, <code>package_dir</code> wrapped in curly braces (<code>{}</code>) will also be substituted at run time with each line from the possibly multi-line <code>package_dirs</code> input. E.g., <code>{package_dir}/__init__.py</code> will become <code>ci_cd/__init__.py</code> if the <code>package_dirs</code> input was <code>'ci_cd'</code>.</p>"},{"location":"workflows/cd_release/#expectations","title":"Expectations","text":"<p>This workflow should only be used for releasing a single modern Python package.</p> <p>The repository contains the following:</p> <ul> <li>(required) A Python package root <code>__init__.py</code> file with <code>__version__</code> defined.</li> <li>(required) The workflow is run for a tag that starts with <code>v</code> followed by a full semantic version.   This will automatically be the case for a GitHub release, which creates a new tag that starts with <code>v</code>.   See SemVer.org for more information about semantic versioning.</li> </ul>"},{"location":"workflows/cd_release/#inputs","title":"Inputs","text":"Name Description Required Default Type <code>git_username</code> A git username (used to set the 'user.name' config option). Yes string <code>git_email</code> A git user's email address (used to set the 'user.email' config option). Yes string <code>python_package</code> Whether or not this is a Python package, where the version should be updated in the <code>'package_dir'/__init__.py</code> for the possibly several 'package_dir' lines given in the <code>package_dirs</code> input and a build and release to PyPI should be performed. No <code>true</code> boolean <code>package_dirs</code> single or multi-line string of paths to Python package directories relative to the repository directory to have its <code>__version__</code> value updated.Example: <code>'src/my_package'</code>.Important: This is required if 'python_package' is 'true', which is the default. Yes (if 'python_package' is 'true' string <code>release_branch</code> The branch name to release/publish from. No main string <code>install_extras</code> Any extras to install from the local repository through 'pip'. Must be encapsulated in square parentheses (<code>[]</code>) and be separated by commas (<code>,</code>) without any spaces.Example: <code>'[dev,release]'</code>. No Empty string string <code>relative</code> Whether or not to use install the local Python package(s) as an editable. No <code>false</code> boolean <code>python_version_build</code> The Python version to use for the workflow when building the package. No 3.9 string <code>python_version_docs</code> The Python version to use for the workflow when building the documentation. No 3.9 string <code>version_update_changes</code> A single or multi-line string of changes to be implemented in the repository files upon updating the version. The string should be made up of three parts: 'file path', 'pattern', and 'replacement string'. These are separated by the 'version_update_changes_separator' value.The 'file path' must always either be relative to the repository root directory or absolute.The 'pattern' should be given as a 'raw' Python string. No Empty string string <code>version_update_changes_separator</code> The separator to use for 'version_update_changes' when splitting the three parts of each string. No , string <code>build_cmd</code> The package build command, e.g., <code>'pip install flit &amp;&amp; flit build'</code> or <code>'python -m build'</code> (default). No <code>python -m build</code> string <code>tag_message_file</code> Relative path to a release tag message file from the root of the repository.Example: <code>'.github/utils/release_tag_msg.txt'</code>. No Empty string string <code>publish_on_pypi</code> Whether or not to publish on PyPI.Note: This is only relevant if 'python_package' is 'true', which is the default. No <code>true</code> boolean <code>test</code> Whether to use the TestPyPI repository index instead of PyPI. No <code>false</code> boolean <code>update_docs</code> Whether or not to also run the 'docs' workflow job. No <code>false</code> boolean <code>doc_extras</code> Any extras to install from the local repository through 'pip'. Must be encapsulated in square parentheses (<code>[]</code>) and be separated by commas (<code>,</code>) without any spaces.Note, if this is empty, 'install_extras' will be used as a fallback.Example: <code>'[docs]'</code>. No Empty string string <code>changelog_exclude_tags_regex</code> A regular expression matching any tags that should be excluded from the CHANGELOG.md. No Empty string string <code>changelog_exclude_labels</code> Comma-separated list of labels to exclude from the CHANGELOG.md. No Empty string string"},{"location":"workflows/cd_release/#secrets","title":"Secrets","text":"Name Description Required <code>PyPI_token</code> A PyPI token for publishing the built package to PyPI.Important: This is required if both 'python_package' and 'publish_on_pypi' are 'true'. Both are 'true' by default. Yes (if 'python_package' and 'publish_on_pypi' are 'true') <code>PAT</code> A personal access token (PAT) with rights to update the <code>release_branch</code>. This will fallback on <code>GITHUB_TOKEN</code>. No"},{"location":"workflows/cd_release/#usage-example","title":"Usage example","text":"<p>The following is an example of how a workflow may look that calls CD - Release. It is meant to be complete as is.</p> <pre><code>name: CD - Publish\n\non:\nrelease:\ntypes:\n- published\n\njobs:\npublish:\nname: Publish package and documentation\nuses: SINTEF/ci-cd/.github/workflows/cd_release.yml@v2.2.0\nif: github.repository == 'SINTEF/my-python-package' &amp;&amp; startsWith(github.ref, 'refs/tags/v')\nwith:\ngit_username: \"Casper Welzel Andersen\"\ngit_email: \"CasperWA@github.com\"\nrelease_branch: stable\npackage_dirs: my_python_package\ninstall_extras: \"[dev,build]\"\nbuild_cmd: \"pip install flit &amp;&amp; flit build\"\ntag_message_file: \".github/utils/release_tag_msg.txt\"\nupdate_docs: true\ndoc_extras: \"[docs]\"\nexclude_labels: \"skip_changelog,duplicate\"\nsecrets:\nPyPI_token: ${{ secrets.PYPI_TOKEN }}\nPAT: ${{ secrets.PAT }}\n</code></pre>"},{"location":"workflows/ci_automerge_prs/","title":"CI - Activate auto-merging for PRs","text":"<p>File to use: <code>ci_automerge_prs.yml</code></p> <p>Activate auto-merging for a PR.</p> <p>It is possible to introduce changes to the PR head branch prior to activating the auto-merging, if so desired. This is done by setting <code>perform_changes</code> to <code>'true'</code> and setting the other inputs accordingly, as they are now required. See Inputs below for a full overview of the available inputs.</p> <p>The <code>changes</code> input can be both a path to a bash file that should be run, or a single or multi-line string of bash commands to run. Afterwards any and all changes in the repository will be committed and pushed to the PR head branch.</p> <p>The motivation for being able to run changes prior to auto-merging, is to update or affect the repository files according to the specific PR being auto-merged. Usually auto-merging is activated for dependabot branches, i.e., when a dependency/requirement is updated. Hence, the changes could include updating this dependency in documentation files or similar, where it will not be updated otherwise.</p>"},{"location":"workflows/ci_automerge_prs/#expectations","title":"Expectations","text":"<p>The <code>PAT</code> secret must represent a user with the rights to activate auto-merging.</p> <p>This workflow can only be called if the triggering event from the caller workflow is <code>pull_request_target</code>.</p>"},{"location":"workflows/ci_automerge_prs/#inputs","title":"Inputs","text":"Name Description Required Default Type <code>perform_changes</code> Whether or not to perform and commit changes to the PR branch prior to activating auto-merge. No boolean <code>git_username</code> A git username (used to set the 'user.name' config option).Required if <code>perform_changes</code> is 'true'. No string <code>git_email</code> A git user's email address (used to set the 'user.email' config option).Required if <code>perform_changes</code> is 'true'. No string <code>changes</code> A file to run in the local repository (relative path from the root of the repository) or a multi-line string of bash commands to run.Required if <code>perform_changes</code> is 'true'. No string"},{"location":"workflows/ci_automerge_prs/#secrets","title":"Secrets","text":"Name Description Required <code>PAT</code> A personal access token (PAT) with rights to update the <code>permanent_dependencies_branch</code>. This will fallback on <code>GITHUB_TOKEN</code>. No"},{"location":"workflows/ci_automerge_prs/#usage-example","title":"Usage example","text":"<p>The following is an example of how a workflow may look that calls CI - Activate auto-merging for PRs. It is meant to be complete as is.</p> <pre><code>name: CI - Activate auto-merging for Dependabot PRs\n\non:\npull_request_target:\nbranches:\n- ci/dependency-updates\n\njobs:\nupdate-dependency-branch:\nname: Call external workflow\nuses: SINTEF/ci-cd/.github/workflows/ci_automerge_prs.yml@v2.2.0\nif: github.repository_owner == 'SINTEF' &amp;&amp; ( ( startsWith(github.event.pull_request.head.ref, 'dependabot/') &amp;&amp; github.actor == 'dependabot[bot]' ) || ( github.event.pull_request.head.ref == 'ci/update-pyproject' &amp;&amp; github.actor == 'CasperWA' ) )\nsecrets:\nPAT: ${{ secrets.RELEASE_PAT }}\n</code></pre> <p>A couple of usage examples when adding changes:</p> <p>Here, referencing a bash script file for the changes.</p> <pre><code>name: CI - Activate auto-merging for Dependabot PRs\n\non:\npull_request_target:\nbranches:\n- ci/dependency-updates\n\njobs:\nupdate-dependency-branch:\nname: Call external workflow\nuses: SINTEF/ci-cd/.github/workflows/ci_automerge_prs.yml@v2.2.0\nif: github.repository_owner == 'SINTEF' &amp;&amp; ( ( startsWith(github.event.pull_request.head.ref, 'dependabot/') &amp;&amp; github.actor == 'dependabot[bot]' ) || ( github.event.pull_request.head.ref == 'ci/update-pyproject' &amp;&amp; github.actor == 'CasperWA' ) )\nwith:\nperform_changes: true\ngit_username: \"Casper Welzel Andersen\"\ngit_email: \"CasperWA@github.com\"\nchanges: \".ci/pre_automerge.sh\"\nsecrets:\nPAT: ${{ secrets.RELEASE_PAT }}\n</code></pre> <p>Here, writing out the changes explicitly in the job.</p> <pre><code>name: CI - Activate auto-merging for Dependabot PRs\n\non:\npull_request_target:\nbranches:\n- ci/dependency-updates\n\njobs:\nupdate-dependency-branch:\nname: Call external workflow\nuses: SINTEF/ci-cd/.github/workflows/ci_automerge_prs.yml@v2.2.0\nif: github.repository_owner == 'SINTEF' &amp;&amp; ( ( startsWith(github.event.pull_request.head.ref, 'dependabot/') &amp;&amp; github.actor == 'dependabot[bot]' ) || ( github.event.pull_request.head.ref == 'ci/update-pyproject' &amp;&amp; github.actor == 'CasperWA' ) )\nwith:\nperform_changes: true\ngit_username: \"Casper Welzel Andersen\"\ngit_email: \"CasperWA@github.com\"\nchanges: |\nPYTHON=\npython --version || PYTHON=NO\nif [ -n \"${PYTHON} ]; then\necho \"Python not detected on the system.\"\nexit 1\nfi\nPIP=\npython -m pip --version || PIP=NO\nif [ -n \"${PYTHON} ]; then\necho \"pip not detected to be installed for Python.\"\nexit 1\nfi\n\npython -m pip install -U pip\npip install -U setuptools wheel\npip install pre-commit\n\npre-commit autoupdate\npre-commit run --all-files || :\nsecrets:\nPAT: ${{ secrets.RELEASE_PAT }}\n</code></pre>"},{"location":"workflows/ci_cd_updated_default_branch/","title":"CI/CD - New updates to default branch","text":"<p>File to use: <code>ci_cd_updated_default_branch.yml</code></p> <p>Keep your <code>permanent_dependencies_branch</code> branch up-to-date with changes in your main development branch, i.e., the <code>default_repo_branch</code>.</p> <p>Furthermore, this workflow can optionally update the <code>latest</code> mike+MkDocs+GitHub Pages-framework documentation release alias, which represents the <code>default_repo_branch</code>.</p> <p>Warning</p> <p>If a PAT is not passed through for the <code>PAT</code> secret and <code>GITHUB_TOKEN</code> is used, beware that any other CI/CD jobs that run for, e.g., pull request events, may not run since <code>GITHUB_TOKEN</code>-generated PRs are designed to not start more workflows to avoid escalation. Hence, if it is important to run CI/CD workflows for pull requests, consider passing a PAT as a secret to this workflow represented by the <code>PAT</code> secret.</p> <p>Important</p> <p>If this is to be used together with the CI - Update dependencies PR workflow, the <code>pr_body_file</code> supplied to that workflow (if any) should match the <code>update_depednencies_pr_body_file</code> input in this workflow and be immutable within the first 8 lines, i.e., no check boxes or similar in the first 8 lines. Indeed, it is recommended to not supply <code>pr_body_file</code> to the CI - Update dependencies PR workflow as well as to not supply the <code>update_dependencies_pr_body_file</code> in this workflow in this case.</p> <p>Note</p> <p>Concerning the changelog generator, the specific input <code>changelog_exclude_labels</code> defaults to a list of different labels if not supplied, hence, if supplied, one might want to include these labels alongside any extra labels. The default value is given here as a help: <code>'duplicate,question,invalid,wontfix'</code></p> <p>If used together with the Update API Reference in Documentation, please align the <code>relative</code> input with the <code>--relative</code> option, when running the hook. See the proper section to understand why and how these options and inputs should be aligned.</p>"},{"location":"workflows/ci_cd_updated_default_branch/#expectations","title":"Expectations","text":"<p>The repository contains the following:</p> <ul> <li>(required) At least one Python package exists that can be pointed to for the <code>package_dirs</code> input.</li> <li>(required) Only if also updating the documentation, then the documentation should be contained in a root <code>docs</code> directory.</li> <li>(required) Only if also updating the documentation, then a root <code>README.md</code> file must exist and desired to be used as the documentation's landing page if the <code>update_docs_landing_page</code> is set to <code>true</code>, which is the default.</li> </ul>"},{"location":"workflows/ci_cd_updated_default_branch/#inputs","title":"Inputs","text":"Name Description Required Default Type <code>git_username</code> A git username (used to set the 'user.name' config option). Yes string <code>git_email</code> A git user's email address (used to set the 'user.email' config option). Yes string <code>permanent_dependencies_branch</code> The branch name for the permanent dependency updates branch. No ci/dependency-updates string <code>default_repo_branch</code> The branch name of the repository's default branch. More specifically, the branch the PR should target. No main string <code>update_dependencies_pr_body_file</code> Relative path to a PR body file from the root of the repository, which is used in the 'CI - Update dependencies PR' workflow, if used.Example: <code>'.github/utils/pr_body_update_deps.txt'</code>. No Empty string string <code>update_docs</code> Whether or not to also run the 'docs' workflow job. No <code>false</code> boolean <code>update_python_api_ref</code> Whether or not to update the Python API documentation reference.Note: If this is 'true', 'package_dirs' is required. No <code>true</code> boolean <code>package_dirs</code> A single or multi-line string of paths to Python package directories relative to the repository directory to be considered for creating the Python API reference documentation.Example: <code>'src/my_package'</code>.Important: This is required if 'update_docs' and 'update_python_api_ref' are 'true'. Yes (if 'update_docs' and 'update_python_api_ref' are 'true') string <code>update_docs_landing_page</code> Whether or not to update the documentation landing page. The landing page will be based on the root README.md file. No <code>true</code> boolean <code>python_version</code> The Python version to use for the workflow.Note: This is only relevant if <code>update_pre-commit</code> is <code>true</code>. No 3.9 string <code>doc_extras</code> Any extras to install from the local repository through 'pip'. Must be encapsulated in square parentheses (<code>[]</code>) and be separated by commas (<code>,</code>) without any spaces.Example: <code>'[docs]'</code>. No Empty string string <code>relative</code> Whether or not to use install the local Python package(s) as an editable. No <code>false</code> boolean <code>exclude_dirs</code> A single or multi-line string of directories to exclude in the Python API reference documentation. Note, only directory names, not paths, may be included. Note, all folders and their contents with these names will be excluded. Defaults to <code>'__pycache__'</code>.Important: When a user value is set, the preset value is overwritten - hence <code>'__pycache__'</code> should be included in the user value if one wants to exclude these directories. No __pycache__ string <code>exclude_files</code> A single or multi-line string of files to exclude in the Python API reference documentation. Note, only full file names, not paths, may be included, i.e., filename + file extension. Note, all files with these names will be excluded. Defaults to <code>'__init__.py'</code>.Important: When a user value is set, the preset value is overwritten - hence <code>'__init__.py'</code> should be included in the user value if one wants to exclude these files. No __init__.py string <code>full_docs_dirs</code> A single or multi-line string of directories in which to include everything - even those without documentation strings. This may be useful for a module full of data models or to ensure all class attributes are listed. No Empty string string <code>full_docs_files</code> A single or multi-line string of relative paths to files in which to include everything - even those without documentation strings. This may be useful for a file full of data models or to ensure all class attributes are listed. No Empty string string <code>special_file_api_ref_options</code> A single or multi-line string of combinations of a relative path to a Python file and a fully formed mkdocstrings option that should be added to the generated MarkDown file for the Python API reference documentation.Example: <code>my_module/py_file.py,show_bases:false</code>.Encapsulate the value in double quotation marks (<code>\"</code>) if including spaces ( ).Important: If multiple <code>package_dirs</code> are supplied, the relative path MUST include/start with the appropriate 'package_dir' value, e.g., <code>\"my_package/my_module/py_file.py,show_bases: false\"</code>. No Empty string string <code>landing_page_replacements</code> A single or multi-line string of replacements (mappings) to be performed on README.md when creating the documentation's landing page (index.md). This list always includes replacing <code>'docs/'</code> with an empty string to correct relative links, i.e., this cannot be overwritten. By default <code>'(LICENSE)'</code> is replaced by <code>'(LICENSE.md)'</code>. No (LICENSE),(LICENSE.md) string <code>landing_page_replacement_separator</code> String to separate a mapping's 'old' to 'new' parts. Defaults to a comma (<code>,</code>). No , string <code>test</code> Whether to do a \"dry run\", i.e., run the workflow, but avoid pushing to 'permanent_dependencies_branch' branch and deploying documentation (if 'update_docs' is 'true'). No <code>false</code> boolean <code>changelog_exclude_tags_regex</code> A regular expression matching any tags that should be excluded from the CHANGELOG.md. No Empty string string <code>changelog_exclude_labels</code> Comma-separated list of labels to exclude from the CHANGELOG.md. No Empty string string"},{"location":"workflows/ci_cd_updated_default_branch/#secrets","title":"Secrets","text":"Name Description Required <code>PAT</code> A personal access token (PAT) with rights to update the <code>permanent_dependencies_branch</code>. This will fallback on <code>GITHUB_TOKEN</code>. No"},{"location":"workflows/ci_cd_updated_default_branch/#usage-example","title":"Usage example","text":"<p>The following is an example of how a workflow may look that calls CI/CD - New updates to default branch. It is meant to be complete as is.</p> <pre><code>name: CI - Activate auto-merging for Dependabot PRs\n\non:\npush:\nbranches:\n- stable\n\njobs:\nupdates-to-stable:\nname: Call external workflow\nuses: SINTEF/ci-cd/.github/workflows/ci_cd_updated_default_branch.yml@v2.2.0\nif: github.repository_owner == 'SINTEF'\nwith:\ngit_username: \"Casper Welzel Andersen\"\ngit_email: \"CasperWA@github.com\"\ndefault_repo_branch: stable\npermanent_dependencies_branch: \"ci/dependency-updates\"\nupdate_docs: true\npackage_dirs: |\nmy_python_package\nmy_other_python_package\ndoc_extras: \"[docs]\"\nexclude_files: __init__.py,config.py\nfull_docs_dirs: models\nlanding_page_replacements: \"(LICENSE);(LICENSE.md)|(tools);(../tools)\"\nlanding_page_replacements_mapping_separator: \";\"\nsecrets:\nPAT: ${{ secrets.PAT }}\n</code></pre>"},{"location":"workflows/ci_check_pyproject_dependencies/","title":"CI - Check pyproject.toml dependencies","text":"<p>File to use: <code>ci_check_pyproject_dependencies.yml</code></p> <p>This workflow runs an Invoke task to check dependencies in a <code>pyproject.toml</code> file.</p> <p>The reason for having this workflow and not using Dependabot is because it seems to not function properly with this use case.</p> <p>Warning</p> <p>If a PAT is not passed through for the <code>PAT</code> secret and <code>GITHUB_TOKEN</code> is used, beware that any other CI/CD jobs that run for, e.g., pull request events, may not run since <code>GITHUB_TOKEN</code>-generated PRs are designed to not start more workflows to avoid escalation. Hence, if it is important to run CI/CD workflows for pull requests, consider passing a PAT as a secret to this workflow represented by the <code>PAT</code> secret.</p>"},{"location":"workflows/ci_check_pyproject_dependencies/#ignoring-dependencies","title":"Ignoring dependencies","text":"<p>To ignore or configure how specific dependencies should be updated, the <code>ignore</code> input option can be utilized. This is done by specifying a line per dependency that contains ellipsis-separated (<code>...</code>) key/value-pairs of:</p> Key Description <code>dependency-name</code> Ignore updates for dependencies with matching names, optionally using <code>*</code> to match zero or more characters. <code>versions</code> Ignore specific versions or ranges of versions. Examples: <code>~=1.0.5</code>, <code>&gt;= 1.0.5,&lt;2</code>, <code>&gt;=0.1.1</code>. <code>update-types</code> Ignore types of updates, such as SemVer <code>major</code>, <code>minor</code>, <code>patch</code> updates on version updates (for example: <code>version-update:semver-patch</code> will ignore patch updates). This can be combined with <code>dependency-name=*</code> to ignore particular <code>update-types</code> for all dependencies. <p>Supported <code>update-types</code> values</p> <p>Currently, only <code>version-update:semver-major</code>, <code>version-update:semver-minor</code>, and <code>version-update:semver-patch</code> are supported options for <code>update-types</code>.</p> <p>The <code>ignore</code> option is essentially similar to the <code>ignore</code> option of Dependabot. If <code>versions</code> and <code>update-types</code> are used together, they will both be respected jointly.</p> <p>Here is an example of different lines given as value for the <code>ignore</code> option that accomplishes different things:</p> <pre><code># ...\njobs:\ncheck-dependencies:\nuses: SINTEF/ci-cd/.github/workflows/ci_check_pyproject_dependencies.yml@v2.2.0\nwith:\n# ...\n# For Sphinx, ignore all updates for/from version 4.5.0 and up / keep the minimum version for Sphinx at 4.5.0.\n# For pydantic, ignore all patch updates\n# For numpy, ignore any and all updates\nignore: |\ndependency-name=Sphinx...versions=&gt;=4.5.0\ndependency-name=pydantic...update-types=version-update:semver-patch\ndependency-name=numpy\n# ...\n</code></pre>"},{"location":"workflows/ci_check_pyproject_dependencies/#expectations","title":"Expectations","text":"<p>The repository contains the following:</p> <ul> <li>(required) A repository root <code>pyproject.toml</code> file with the Python package's dependencies.</li> </ul>"},{"location":"workflows/ci_check_pyproject_dependencies/#inputs","title":"Inputs","text":"Name Description Required Default Type <code>git_username</code> A git username (used to set the 'user.name' config option). Yes string <code>git_email</code> A git user's email address (used to set the 'user.email' config option). Yes string <code>permanent_dependencies_branch</code> The branch name for the permanent dependency updates branch. No ci/dependency-updates string <code>python_version</code> The Python version to use for the workflow. No 3.9 string <code>install_extras</code> Any extras to install from the local repository through 'pip'. Must be encapsulated in square parentheses (<code>[]</code>) and be separated by commas (<code>,</code>) without any spaces.Example: <code>'[dev,release]'</code>. No Empty string string <code>pr_body_file</code> Relative path to PR body file from the root of the repository.Example: <code>'.github/utils/pr_body_deps_check.txt'</code>. No Empty string string <code>fail_fast</code> Whether the task to update dependencies should fail if any error occurs. No <code>false</code> boolean <code>pr_labels</code> A comma separated list of strings of GitHub labels to use for the created PR. No Empty string string <code>ignore</code> Create ignore conditions for certain dependencies. A multi-line string of ignore rules, where each line is an ellipsis-separated (<code>...</code>) string of key/value-pairs. One line per dependency. This option is similar to the <code>ignore</code> option of Dependabot. No Empty string string"},{"location":"workflows/ci_check_pyproject_dependencies/#secrets","title":"Secrets","text":"Name Description Required <code>PAT</code> A personal access token (PAT) with rights to update the <code>permanent_dependencies_branch</code>. This will fallback on <code>GITHUB_TOKEN</code>. No"},{"location":"workflows/ci_check_pyproject_dependencies/#usage-example","title":"Usage example","text":"<p>The following is an example of how a workflow may look that calls CI - Check pyproject.toml dependencies. It is meant to be complete as is.</p> <pre><code>name: CI - Check dependencies\n\non:\nschedule:\n- cron: \"30 5 * * 1\"\nworkflow_dispatch:\n\njobs:\ncheck-dependencies:\nname: Call external workflow\nuses: SINTEF/ci-cd/.github/workflows/ci_check_pyproject_dependencies.yml@v2.2.0\nif: github.repository_owner == 'SINTEF'\nwith:\ngit_username: \"Casper Welzel Andersen\"\ngit_email: \"CasperWA@github.com\"\npermanent_dependencies_branch: \"ci/dependency-updates\"\npython_version: \"3.9\"\ninstall_extras: \"[dev]\"\npr_labels: \"CI/CD\"\nsecrets:\nPAT: ${{ secrets.PAT }}\n</code></pre>"},{"location":"workflows/ci_tests/","title":"CI - Tests","text":"<p>File to use: <code>ci_tests.yml</code></p> <p>A basic set of CI tests.</p> <p>Several different basic test jobs are available in this workflow. By default, they will all run and should be actively \"turned off\".</p>"},{"location":"workflows/ci_tests/#ci-jobs","title":"CI jobs","text":"<p>The following sections summarizes each job and the individual inputs necessary for it to function or to adjust how it runs. Note, a full list of possible inputs and secrets will be given in a separate table at the end of this page.</p>"},{"location":"workflows/ci_tests/#run-pre-commit","title":"Run <code>pre-commit</code>","text":"<p>Run the <code>pre-commit</code> tool for all files in the repository according to the repository's configuration file.</p>"},{"location":"workflows/ci_tests/#expectations","title":"Expectations","text":"<p><code>pre-commit</code> should be setup for the repository. For more information about <code>pre-commit</code>, please see the tool's website: pre-commit.com.</p> <p>This job should not be run if the repository does not implement <code>pre-commit</code>.</p>"},{"location":"workflows/ci_tests/#inputs","title":"Inputs","text":"Name Description Required Default Type <code>run_pre-commit</code> Run the <code>pre-commit</code> test job. No <code>true</code> boolean <code>python_version_pre-commit</code> The Python version to use for the <code>pre-commit</code> test job. No 3.9 string <code>install_extras</code> Any extras to install from the local repository through 'pip'. Must be encapsulated in square parentheses (<code>[]</code>) and be separated by commas (<code>,</code>) without any spaces.Example: <code>'[dev,pre-commit]'</code>. No Empty string string <code>skip_pre-commit_hooks</code> A comma-separated list of pre-commit hook IDs to skip when running <code>pre-commit</code> after updating hooks. No Empty string string"},{"location":"workflows/ci_tests/#run-pylint-safety","title":"Run <code>pylint</code> &amp; <code>safety</code>","text":"<p>Run the <code>pylint</code> and/or <code>safety</code> tools.</p> <p>The <code>pylint</code> tool can be run in different ways. Either it is run once and the <code>pylint_targets</code> is a required input, while <code>pylint_options</code> is a single- or multi-line optional input. Or <code>pylint_runs</code> is used, a single- or multi-line input, to explicitly write out all <code>pylint</code> options and target(s) one line at a time. For each line in <code>pylint_runs</code>, <code>pylint</code> will be executed.</p> <p>Using <code>pylint_runs</code> is useful if you have a section of your code, which should be run with a custom set of options, otherwise it is recommended to instead simply use the <code>pylint_targets</code> and optionally also <code>pylint_options</code> inputs.</p> <p>The <code>safety</code> tool checks all installed Python packages, hence the <code>install_extras</code> input should be given as to install all possible dependencies.</p>"},{"location":"workflows/ci_tests/#expectations_1","title":"Expectations","text":"<p>There are no expectations or pre-requisites. <code>pylint</code> and <code>safety</code> can be run without a pre-configuration.</p>"},{"location":"workflows/ci_tests/#inputs_1","title":"Inputs","text":"Name Description Required Default Type <code>run_pylint</code> Run the <code>pylint</code> test job. No <code>true</code> boolean <code>run_safety</code> Run the <code>safety</code> test job. No <code>true</code> boolean <code>python_version_pylint_safety</code> The Python version to use for the <code>pylint</code> and <code>safety</code> test jobs. No 3.9 string <code>install_extras</code> Any extras to install from the local repository through 'pip'. Must be encapsulated in square parentheses (<code>[]</code>) and be separated by commas (<code>,</code>) without any spaces.Example: <code>'[dev,pre-commit]'</code>. No Empty string string <code>pylint_targets</code> Space-separated string of pylint file and folder targets.Note: This is only valid if <code>pylint_runs</code> is not defined. Yes, if <code>pylint_runs</code> is not defined Empty string string <code>pylint_options</code> Single space-separated or multi-line string of pylint command line options.Note: This is only valid if <code>pylint_runs</code> is not defined. No Empty string string <code>pylint_runs</code> Single or multi-line string with each line representing a separate pylint run/execution. This should include all desired options and targets.Important: The inputs <code>pylint_options</code> and <code>pylint_targets</code> will be ignored if this is defined. No Empty string string <code>safety_options</code> Single space-separated or multi-line string of safety command line options. No Empty string string"},{"location":"workflows/ci_tests/#build-distribution-package","title":"Build distribution package","text":"<p>Test building the Python package.</p> <p>This job is equivalent to building the package in the CD - Release workflow, but will not publish anything.</p>"},{"location":"workflows/ci_tests/#expectations_2","title":"Expectations","text":"<p>The repository should be a \"buildable\" Python package.</p>"},{"location":"workflows/ci_tests/#inputs_2","title":"Inputs","text":"Name Description Required Default Type <code>run_build_package</code> Run the <code>build package</code> test job. No <code>true</code> boolean <code>python_version_package</code> The Python version to use for the <code>build package</code> test job. No 3.9 string <code>build_libs</code> A space-separated list of packages to install via PyPI (<code>pip install</code>). No Empty string string <code>build_cmd</code> The package build command, e.g., <code>'flit build'</code> or <code>'python -m build'</code> (default). No <code>python -m build</code> string"},{"location":"workflows/ci_tests/#build-mkdocs-documentation","title":"Build MkDocs Documentation","text":"<p>Test building the documentation within the MkDocs framework.</p> <p>Note</p> <p>If using mike, note that this will not be tested, as this would be equivalent to testing mike itself and whether it can build a MkDocs documentation, which should never be part of a repository that uses these tools.</p> <p>If used together with the Update API Reference in Documentation, please align the <code>relative</code> input with the <code>--relative</code> option, when running the hook. See the proper section to understand why and how these options and inputs should be aligned.</p>"},{"location":"workflows/ci_tests/#expectations_3","title":"Expectations","text":"<p>Is is expected that documentation exists, which is using the MkDocs framework. This requires at minimum a <code>mkdocs.yml</code> configuration file.</p>"},{"location":"workflows/ci_tests/#inputs_3","title":"Inputs","text":"Name Description Required Default Type <code>run_build_docs</code> Run the <code>build package</code> test job. No <code>true</code> boolean <code>update_python_api_ref</code> Whether or not to update the Python API documentation reference.Note: If this is <code>true</code>, <code>package_dirs</code> is required. No <code>true</code> boolean <code>update_docs_landing_page</code> Whether or not to update the documentation landing page. The landing page will be based on the root README.md file. No <code>true</code> boolean <code>python_version_docs</code> The Python version to use for the <code>build documentation</code> test job. No 3.9 string <code>install_extras</code> Any extras to install from the local repository through 'pip'. Must be encapsulated in square parentheses (<code>[]</code>) and be separated by commas (<code>,</code>) without any spaces.Example: <code>'[dev,docs]'</code>. No Empty string string <code>relative</code> Whether or not to use install the local Python package(s) as an editable. No <code>false</code> boolean <code>package_dirs</code> A single or multi-line string of path to Python package directories relative to the repository directory to be considered for creating the Python API reference documentation.Example: <code>'src/my_package'</code>. Yes, if <code>update_python_api_ref</code> is <code>true</code> (default) Empty string string <code>exclude_dirs</code> A single or multi-line string of directories to exclude in the Python API reference documentation. Note, only directory names, not paths, may be included. Note, all folders and their contents with these names will be excluded. Defaults to <code>'__pycache__'</code>.Important: When a user value is set, the preset value is overwritten - hence <code>'__pycache__'</code> should be included in the user value if one wants to exclude these directories. No __pycache__ string <code>exclude_files</code> A single or multi-line string of files to exclude in the Python API reference documentation. Note, only full file names, not paths, may be included, i.e., filename + file extension. Note, all files with these names will be excluded. Defaults to <code>'__init__.py'</code>.Important: When a user value is set, the preset value is overwritten - hence <code>'__init__.py'</code> should be included in the user value if one wants to exclude these files. No __init__.py string <code>full_docs_dirs</code> A single or multi-line string of directories in which to include everything - even those without documentation strings. This may be useful for a module full of data models or to ensure all class attributes are listed. No Empty string string <code>full_docs_files</code> A single or multi-line string of relative paths to files in which to include everything - even those without documentation strings. This may be useful for a file full of data models or to ensure all class attributes are listed. No Empty string string <code>special_file_api_ref_options</code> A single or multi-line string of combinations of a relative path to a Python file and a fully formed mkdocstrings option that should be added to the generated MarkDown file for the Python API reference documentation.Example: <code>my_module/py_file.py,show_bases:false</code>.Encapsulate the value in double quotation marks (<code>\"</code>) if including spaces ( ).Important: If multiple <code>package_dirs</code> are supplied, the relative path MUST include/start with the appropriate 'package_dir' value, e.g., <code>\"my_package/my_module/py_file.py,show_bases: false\"</code>. No Empty string string <code>landing_page_replacements</code> A single or multi-line string of replacements (mappings) to be performed on README.md when creating the documentation's landing page (index.md). This list always includes replacing <code>'docs/'</code> with an empty string to correct relative links, i.e., this cannot be overwritten. By default <code>'(LICENSE)'</code> is replaced by <code>'(LICENSE.md)'</code>. No (LICENSE),(LICENSE.md) string <code>landing_page_replacement_separator</code> String to separate a mapping's 'old' to 'new' parts. Defaults to a comma (<code>,</code>). No , string <code>warnings_as_errors</code> Build the documentation in 'strict' mode, treating warnings as errors.Important: If this is set to <code>false</code>, beware that the documentation may not be rendered or built as one may have intended.Default: <code>true</code>. No <code>true</code> boolean <code>debug</code> Whether to do print extra debug statements. No <code>false</code> boolean"},{"location":"workflows/ci_tests/#usage-example","title":"Usage example","text":"<p>The following is an example of how a workflow may look that calls CI - Tests. It is meant to be complete as is.</p> <pre><code>name: CI - Tests\n\non:\npull_request:\npull:\nbranches:\n- 'main'\n\njobs:\ntests:\nname: Run basic tests\nuses: SINTEF/ci-cd/.github/workflows/ci_tests.yml@v2.2.0\nwith:\npython_version_pylint_safety: \"3.8\"\npython_version_docs: \"3.7\"\ninstall_extras: \"[dev,docs]\"\nskip_pre-commit_hooks: pylint\npylint_options: --rcfile=pyproject.toml\npylint_targets: my_python_package\nbuild_libs: flit\nbuild_cmd: flit build\nupdate_python_api_ref: false\nupdate_docs_landing_page: false\n</code></pre> <p>Here is another example using <code>pylint_runs</code> instead of <code>pylint_targets</code> and <code>pylint_options</code>.</p> <pre><code>name: CI - Tests\n\non:\npull_request:\npull:\nbranches:\n- 'main'\n\njobs:\ntests:\nname: Run basic tests\nuses: SINTEF/ci-cd/.github/workflows/ci_tests.yml@v2.2.0\nwith:\npython_version_pylint_safety: \"3.8\"\npython_version_docs: \"3.7\"\ninstall_extras: \"[dev,docs]\"\nskip_pre-commit_hooks: pylint\npylint_runs: |\n--rcfile=pyproject.toml --ignore-paths=tests/ my_python_package\n--rcfile=pyproject.toml --disable=import-outside-toplevel,redefined-outer-name tests\nbuild_libs: flit\nbuild_cmd: flit build\nupdate_python_api_ref: false\nupdate_docs_landing_page: false\n</code></pre>"},{"location":"workflows/ci_tests/#full-list-of-inputs","title":"Full list of inputs","text":"<p>Here follows the full list of inputs available for this workflow. However, it is recommended to instead refer to the job-specific tables of inputs when considering which inputs to provide.</p> Name Description Required Default Type <code>run_pre-commit</code> Run the <code>pre-commit</code> test job. No <code>true</code> boolean <code>skip_pre-commit_hooks</code> A comma-separated list of pre-commit hook IDs to skip when running <code>pre-commit</code> after updating hooks. No Empty string string <code>run_pylint</code> Run the <code>pylint</code> test job. No <code>true</code> boolean <code>run_safety</code> Run the <code>safety</code> test job. No <code>true</code> boolean <code>pylint_targets</code> Space-separated string of pylint file and folder targets.Note: This is only valid if <code>pylint_runs</code> is not defined. Yes, if <code>pylint_runs</code> is not defined Empty string string <code>pylint_options</code> Single space-separated or multi-line string of pylint command line options.Note: This is only valid if <code>pylint_runs</code> is not defined. No Empty string string <code>pylint_runs</code> Single or multi-line string with each line representing a separate pylint run/execution. This should include all desired options and targets.Important: The inputs <code>pylint_options</code> and <code>pylint_targets</code> will be ignored if this is defined. No Empty string string <code>safety_options</code> Single space-separated or multi-line string of safety command line options. No Empty string string <code>run_build_package</code> Run the <code>build package</code> test job. No <code>true</code> boolean <code>build_libs</code> A space-separated list of packages to install via PyPI (<code>pip install</code>). No Empty string string <code>build_cmd</code> The package build command, e.g., <code>'flit build'</code> or <code>'python -m build'</code> (default). No <code>python -m build</code> string <code>run_build_docs</code> Run the <code>build package</code> test job. No <code>true</code> boolean <code>update_python_api_ref</code> Whether or not to update the Python API documentation reference.Note: If this is <code>true</code>, <code>package_dirs</code> is required. No <code>true</code> boolean <code>update_docs_landing_page</code> Whether or not to update the documentation landing page. The landing page will be based on the root README.md file. No <code>true</code> boolean <code>python_version_pre-commit</code> The Python version to use for the <code>pre-commit</code> test job. No 3.9 string <code>python_version_pylint_safety</code> The Python version to use for the <code>pylint</code> and <code>safety</code> test jobs. No 3.9 string <code>python_version_package</code> The Python version to use for the <code>build package</code> test job. No 3.9 string <code>python_version_docs</code> The Python version to use for the <code>build documentation</code> test job. No 3.9 string <code>install_extras</code> Any extras to install from the local repository through 'pip'. Must be encapsulated in square parentheses (<code>[]</code>) and be separated by commas (<code>,</code>) without any spaces.Example: <code>'[dev,docs]'</code>. No Empty string string <code>relative</code> Whether or not to use install the local Python package(s) as an editable, only when running the <code>build_docs</code> job. No <code>false</code> boolean <code>package_dirs</code> A single or multi-line string of path to Python package directories relative to the repository directory to be considered for creating the Python API reference documentation.Example: <code>'src/my_package'</code>. Yes, if <code>update_python_api_ref</code> is <code>true</code> (default) Empty string string <code>exclude_dirs</code> A single or multi-line string of directories to exclude in the Python API reference documentation. Note, only directory names, not paths, may be included. Note, all folders and their contents with these names will be excluded. Defaults to <code>'__pycache__'</code>.Important: When a user value is set, the preset value is overwritten - hence <code>'__pycache__'</code> should be included in the user value if one wants to exclude these directories. No __pycache__ string <code>exclude_files</code> A single or multi-line string of files to exclude in the Python API reference documentation. Note, only full file names, not paths, may be included, i.e., filename + file extension. Note, all files with these names will be excluded. Defaults to <code>'__init__.py'</code>.Important: When a user value is set, the preset value is overwritten - hence <code>'__init__.py'</code> should be included in the user value if one wants to exclude these files. No __init__.py string <code>full_docs_dirs</code> A single or multi-line string of directories in which to include everything - even those without documentation strings. This may be useful for a module full of data models or to ensure all class attributes are listed. No Empty string string <code>full_docs_files</code> A single or multi-line string of relative paths to files in which to include everything - even those without documentation strings. This may be useful for a file full of data models or to ensure all class attributes are listed. No Empty string string <code>special_file_api_ref_options</code> A single or multi-line string of combinations of a relative path to a Python file and a fully formed mkdocstrings option that should be added to the generated MarkDown file for the Python API reference documentation.Example: <code>my_module/py_file.py,show_bases:false</code>.Encapsulate the value in double quotation marks (<code>\"</code>) if including spaces ( ).Important: If multiple <code>package_dirs</code> are supplied, the relative path MUST include/start with the appropriate 'package_dir' value, e.g., <code>\"my_package/my_module/py_file.py,show_bases: false\"</code>. No Empty string string <code>landing_page_replacements</code> A single or multi-line string of replacements (mappings) to be performed on README.md when creating the documentation's landing page (index.md). This list always includes replacing <code>'docs/'</code> with an empty string to correct relative links, i.e., this cannot be overwritten. By default <code>'(LICENSE)'</code> is replaced by <code>'(LICENSE.md)'</code>. No (LICENSE),(LICENSE.md) string <code>landing_page_replacement_separator</code> String to separate a mapping's 'old' to 'new' parts. Defaults to a comma (<code>,</code>). No , string <code>warnings_as_errors</code> Build the documentation in 'strict' mode, treating warnings as errors.Important: If this is set to <code>false</code>, beware that the documentation may not be rendered or built as one may have intended.Default: <code>true</code>. No <code>true</code> boolean <code>debug</code> Whether to do print extra debug statements. No <code>false</code> boolean"},{"location":"workflows/ci_update_dependencies/","title":"CI - Update dependencies PR","text":"<p>File to use: <code>ci_update_dependencies.yml</code></p> <p>This workflow creates a PR if there are any updates in the <code>permanent_dependencies_branch</code> branch that have not been included in the <code>default_repo_branch</code> branch.</p> <p>This workflow works nicely together with the CI - Check pyproject.toml dependencies workflow, and the same value for <code>permanent_dependencies_branch</code> should be used. In this way, this workflow can be called on a schedule to update the dependencies that have been merged into the <code>permanent_dependencies_branch</code> branch into the <code>default_repo_branch</code> branch.</p> <p>The main point of having this workflow is to have a single PR, which can be squash merged, to merge several dependency updates performed by Dependabot or similar.</p> <p>As a \"bonus\" this workflow supports updating pre-commit hooks.</p> <p>Warning</p> <p>If a PAT is not passed through for the <code>PAT</code> secret and <code>GITHUB_TOKEN</code> is used, beware that any other CI/CD jobs that run for, e.g., pull request events, may not run since <code>GITHUB_TOKEN</code>-generated PRs are designed to not start more workflows to avoid escalation. Hence, if it is important to run CI/CD workflows for pull requests, consider passing a PAT as a secret to this workflow represented by the <code>PAT</code> secret.</p> <p>Important</p> <p>If this is to be used together with the CI/CD - New updates to default branch workflow, the <code>pr_body_file</code> supplied (if any) should be immutable within the first 8 lines, i.e., no check boxes or similar in the first 8 lines. Indeed, it is recommended to not supply a <code>pr_body_file</code> in this case.</p>"},{"location":"workflows/ci_update_dependencies/#expectations","title":"Expectations","text":"<p>There are no expectations of the repo when using this workflow.</p>"},{"location":"workflows/ci_update_dependencies/#inputs","title":"Inputs","text":"Name Description Required Default Type <code>git_username</code> A git username (used to set the 'user.name' config option). Yes string <code>git_email</code> A git user's email address (used to set the 'user.email' config option). Yes string <code>permanent_dependencies_branch</code> The branch name for the permanent dependency updates branch. No ci/dependency-updates string <code>default_repo_branch</code> The branch name of the repository's default branch. More specifically, the branch the PR should target. No main string <code>pr_body_file</code> Relative path to PR body file from the root of the repository.Example: <code>'.github/utils/pr_body_update_deps.txt'</code>. No Empty string string <code>pr_labels</code> A comma separated list of strings of GitHub labels to use for the created PR. No Empty string string <code>extra_to_dos</code> A multi-line string (insert <code>\\n</code> to create line breaks) with extra 'to do' checks. Should start with <code>- [ ]</code>. No Empty string string <code>update_pre-commit</code> Whether or not to update pre-commit hooks as part of creating the PR. No <code>false</code> boolean <code>python_version</code> The Python version to use for the workflow.Note: This is only relevant if <code>update_pre-commit</code> is <code>true</code>. No 3.9 string <code>install_extras</code> Any extras to install from the local repository through 'pip'. Must be encapsulated in square parentheses (<code>[]</code>) and be separated by commas (<code>,</code>) without any spaces.Example: <code>'[dev,pre-commit]'</code>.Note: This is only relevant if <code>update_pre-commit</code> is <code>true</code>. No Empty string string <code>skip_pre-commit_hooks</code> A comma-separated list of pre-commit hook IDs to skip when running <code>pre-commit</code> after updating hooks.Note: This is only relevant if <code>update_pre-commit</code> is <code>true</code>. No Empty string string"},{"location":"workflows/ci_update_dependencies/#secrets","title":"Secrets","text":"Name Description Required <code>PAT</code> A personal access token (PAT) with rights to update the <code>permanent_dependencies_branch</code>. This will fallback on <code>GITHUB_TOKEN</code>. No"},{"location":"workflows/ci_update_dependencies/#usage-example","title":"Usage example","text":"<p>The following is an example of how a workflow may look that calls CI - Update dependencies PR. It is meant to be complete as is.</p> <pre><code>name: CI - Update dependencies\n\non:\nschedule:\n- cron: \"30 6 * * 3\"\nworkflow_dispatch:\n\njobs:\ncheck-dependencies:\nname: Call external workflow\nuses: SINTEF/ci-cd/.github/workflows/ci_update_dependencies.yml@v2.2.0\nif: github.repository_owner == 'SINTEF'\nwith:\ngit_username: \"Casper Welzel Andersen\"\ngit_email: \"CasperWA@github.com\"\npermanent_dependencies_branch: \"ci/dependency-updates\"\ndefault_repo_branch: stable\npr_labels: \"CI/CD\"\nextra_to_dos: \"- [ ] Make sure the PR is **squash** merged, with a sensible commit message.\\n- [ ] Check related `requirements*.txt` files are updated accordingly.\"\nupdate_pre-commit: true\npython_version: \"3.9\"\ninstall_extras: \"[pre-commit]\"\nskip_pre-commit_hooks: \"pylint,pylint-models\"\nsecrets:\nPAT: ${{ secrets.PAT }}\n</code></pre>"}]}