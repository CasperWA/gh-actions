name: CI - Tests

on:
  workflow_call:
    inputs:
      run_pre-commit:
        description: "Run the `pre-commit` test job."
        required: false
        type: boolean
        default: true
      run_pylint:
        description: "Run the `pylint` test job."
        required: false
        type: boolean
        default: true
      run_safety:
        description: "Run the `safety` test job."
        required: false
        type: boolean
        default: true
      run_build_package:
        description: "Run the 'build package' test job."
        required: false
        type: boolean
        default: true
      run_build_docs:
        description: "Run the 'build documentation' test job."
        required: false
        type: boolean
        default: true
      python_version:
        description: "The Python version to use for the workflow."
        required: false
        type: string
        default: "3.9"
      install_extras:
        description: "Any extras to install from the local repository through 'pip'. Must be encapsulated in square parentheses (`[]`) and be separated by commas (`,`) without any spaces. Example: `'[dev,pre-commit]'`."
        required: false
        type: string
        default: ""
      relative:
        description: "Whether or not to use install the local Python package(s) as an editable, _only_ when running the `build_docs` job."
        required: false
        type: boolean
        default: false
      skip_pre-commit_hooks:
        description: "A comma-separated list of pre-commit hook IDs to skip when running `pre-commit` after updating hooks."
        required: false
        type: string
        default: ""
      pylint_options:
        description: "Single space-separated or multi-line string of pylint command line options. Note, this is only valid if 'pylint_runs' is not defined."
        required: false
        type: string
        default: ""
      pylint_targets:
        description: "Space-separated string of pylint file and folder targets. Note, this is only valid if 'pylint_runs' is not defined."
        required: false
        type: string
        default: ""
      pylint_runs:
        description: "Single or multi-line string with each line representing a separate pylint run/execution. This should include all desired options and targets. Important, the inputs 'pylint_options' and 'pylint_targets' will be ignored if this is defined."
        required: false
        type: string
        default: ""
      safety_options:
        description: "Single space-separated or multi-line string of safety command line options."
        required: false
        type: string
        default: ""
      build_libs:
        description: "A space-separated list of packages to install via PyPI (`pip install`)."
        required: false
        type: string
        default: ""
      build_cmd:
        description: "The package build command, e.g., `'flit build'` or `'python -m build'` (default)."
        required: false
        type: string
        default: "python -m build"
      update_python_api_ref:
        description: "Whether or not to update the Python API documentation reference. **Note**: If this is 'true', 'package_dir' is _required_."
        required: false
        type: boolean
        default: true
      package_dir:
        description: "Path to the Python package directory relative to the repository directory. Example: `'src/my_package'`. **Important**: This is _required_ if 'run_build_docs' and 'update_python_api_ref' are 'true'."
        required: false
        type: string
        default: ""
      update_docs_landing_page:
        description: "Whether or not to update the documentation landing page. The landing page will be based on the root README.md file."
        required: false
        type: boolean
        default: true
      exclude_dirs:
        description: "A single or multi-line string of directories to exclude in the Python API reference documentation. Note, only directory names, not paths, may be included. Note, all folders and their contents with these names will be excluded. Defaults to `'__pycache__'`. Important: When a user value is set, the preset value is overwritten - hence `'__pycache__'` should be included in the user value if one wants to exclude these directories."
        required: false
        type: string
        default: "__pycache__"
      exclude_files:
        description: "A single or multi-line string of files to exclude in the Python API reference documentation. Note, only full file names, not paths, may be included, i.e., filename + file extension. Note, all files with these names will be excluded. Defaults to `'__init__.py'`. Important: When a user value is set, the preset value is overwritten - hence `'__init__.py'` should be included in the user value if one wants to exclude these files."
        required: false
        type: string
        default: "__init__.py"
      full_docs_dirs:
        description: "A single or multi-line string of directories in which to include everything - even those without documentation strings. This may be useful for a module full of data models or to ensure all class attributes are listed."
        required: false
        type: string
        default: ""
      landing_page_replacements:
        description: "A single or multi-line string of replacements (mappings) to be performed on README.md when creating the documentation's landing page (index.md). This list ALWAYS includes replacing `'docs/'` with an empty string to correct relative links, i.e., this cannot be overwritten. By default `'(LICENSE)'` is replaced by `'(LICENSE.md)'`."
        required: false
        type: string
        default: "(LICENSE),(LICENSE.md)"
      landing_page_replacement_separator:
        description: "String to separate a replacement's 'old' to 'new' parts. Defaults to a comma (`,`)."
        required: false
        type: string
        default: ","
      debug:
        description: "Whether to do print extra debug statements."
        required: false
        type: boolean
        default: false

jobs:
  pre-commit:
    name: Run `pre-commit`
    if: inputs.run_pre-commit
    runs-on: ubuntu-latest

    steps:
    - name: Checkout ${{ github.repository }}
      uses: actions/checkout@v3

    - name: Set up Python ${{ inputs.python_version }}
      uses: actions/setup-python@v4
      with:
        python-version: "${{ inputs.python_version }}"

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -U setuptools wheel
        pip install .${{ inputs.install_extras }}

    - name: Test with `pre-commit`
      run: SKIP=${{ inputs.skip_pre-commit_hooks }} pre-commit run --all-files

  pylint_and_safety:
    name: Run `pylint` & `safety`
    if: inputs.run_pylint || inputs.run_safety
    runs-on: ubuntu-latest

    steps:
    - name: Checkout ${{ github.repository }}
      uses: actions/checkout@v3
      with:
        fetch-depth: 2

    - name: Set up Python ${{ inputs.python_version }}
      uses: actions/setup-python@v4
      with:
        python-version: "${{ inputs.python_version }}"

    - name: Install dependencies
      run: |
        python -m pip install -U pip
        pip install -U setuptools wheel
        pip install .${{ inputs.install_extras }}
        if [ "${{ inputs.run_pylint }}" == "true" ]; then
          pip install pylint
        fi
        if [ "${{ inputs.run_safety }}" == "true" ]; then
          pip install safety
        fi

    - name: Run `pylint`
      if: inputs.run_pylint
      run: |
        if [ -n "${{ inputs.pylint_runs }}" ]; then
          while IFS= read -r line; do
            if [ -n "${line}" ]; then pylint ${line}; fi
          done <<< "${{ inputs.pylint_runs }}"
        else
          if [ -z "${{ inputs.pylint_targets }}" ]; then
            echo "Please supply the 'pylint_targets' input, since you are not using the 'pylint_runs' input."
          fi

          PYLINT_OPTIONS=()
          while IFS= read -r line; do
            if [ -n "${line}" ]; then PYLINT_OPTIONS+=("${line}"); fi
          done <<< "${{ inputs.pylint_options }}"

          pylint "${PYLINT_OPTIONS[@]}" ${{ inputs.pylint_targets }}
        fi

    - name: Run `safety`
      if: inputs.run_safety
      run: |
        SAFETY_OPTIONS=()
        while IFS= read -r line; do
          if [ -n "${line}" ]; then SAFETY_OPTIONS+=("${line}"); fi
        done <<< "${{ inputs.safety_options }}"

        pip freeze | safety check --stdin "${SAFETY_OPTIONS[@]}"

  build-package:
    name: Build distribution package
    if: inputs.run_build_package
    runs-on: ubuntu-latest

    steps:
    - name: Checkout ${{ github.repository }}
      uses: actions/checkout@v3

    - name: Set up Python ${{ inputs.python_version }}
      uses: actions/setup-python@v4
      with:
        python-version: "${{ inputs.python_version }}"

    - name: Install Python dependencies
      run: |
        python -m pip install -U pip
        pip install -U setuptools wheel build
        if [ -n "${{ inputs.build_libs }}" ]; then
          pip install ${{ inputs.build_libs }}
        fi

    - name: Check building distribution
      run: ${{ inputs.build_cmd }}

  docs:
    name: Build MkDocs Documentation
    if: inputs.run_build_docs
    runs-on: ubuntu-latest

    steps:
    - name: Checkout ${{ github.repository }}
      uses: actions/checkout@v3
      with:
        fetch-depth: 2

    - name: Set up Python ${{ inputs.python_version }}
      uses: actions/setup-python@v4
      with:
        python-version: "${{ inputs.python_version }}"

    - name: Install Python dependencies
      run: |
        EDITABLE=
        if [ "${{ inputs.relative }}" == "true" ]; then EDITABLE=-e ; fi

        python -m pip install -U pip
        pip install -U setuptools wheel
        pip install ${EDITABLE}.${{ inputs.install_extras }}
        pip install git+https://github.com/SINTEF/ci-cd.git@v1

    - name: Update API Reference
      if: inputs.update_python_api_ref
      run: |
        if [ -z "${{ inputs.package_dir }}" ]; then
          echo "package_dir MUST be supplied, since update_docs and update_python_api_ref were set to 'true'."
          exit 1
        fi

        DEBUG=
        RELATIVE=
        if [ "${{ inputs.debug }}" == "true" ]; then DEBUG=--debug; fi
        if [ "${{ inputs.relative }}" == "true" ]; then RELATIVE=--relative; fi

        UNWANTED_FOLDERS=()
        UNWANTED_FILES=()
        FULL_DOCS_FOLDERS=()
        while IFS= read -r line; do
          if [ -n "${line}" ]; then UNWANTED_FOLDERS+=(--unwanted-folder="${line}"); fi
        done <<< "${{ inputs.exclude_dirs }}"
        while IFS= read -r line; do
          if [ -n "${line}" ]; then UNWANTED_FILES+=(--unwanted-file="${line}"); fi
        done <<< "${{ inputs.exclude_files }}"
        while IFS= read -r line; do
          if [ -n "${line}" ]; then FULL_DOCS_FOLDERS+=(--full-docs-folder="${line}"); fi
        done <<< "${{ inputs.full_docs_dirs }}"

        ci-cd create-api-reference-docs ${DEBUG} ${RELATIVE} \
          --pre-clean \
          --root-repo-path=${PWD} \
          --package-dir="${{ inputs.package_dir }}" \
          "${UNWANTED_FOLDERS[@]}" \
          "${UNWANTED_FILES[@]}" \
          "${FULL_DOCS_FOLDERS[@]}"

    - name: Update landing page
      if: inputs.update_docs_landing_page
      run: |
        # Ensure the default replacement for LICENSE linking works
        # with a custom separator
        LANDING_PAGE_REPLACEMENTS="${{ inputs.landing_page_replacements }}"
        if [ "${{ inputs.landing_page_replacement_separator }}" != "," ] && [ "${{ inputs.landing_page_replacements }}" == "(LICENSE),(LICENSE.md)" ]; then
          LANDING_PAGE_REPLACEMENTS="${LANDING_PAGE_REPLACEMENTS/,/${{ inputs.landing_page_replacement_separator }}}"
        fi

        REPLACEMENTS=()
        while IFS= read -r line; do
          if [ -n "${line}" ]; then REPLACEMENTS+=(--replacement="${line}"); fi
        done <<< "${LANDING_PAGE_REPLACEMENTS}"

        ci-cd create-docs-index \
          --root-repo-path=${PWD} \
          --replacement-separator="${{ inputs.landing_page_replacement_separator }}" \
          "${REPLACEMENTS[@]}"

    - name: Build MkDocs documentation
      run: mkdocs build --strict
