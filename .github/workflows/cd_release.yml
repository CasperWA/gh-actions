name: CD - Release

on:
  workflow_call:
    inputs:
      # REQUIRED
      git_username:
        description: "A git username (used to set the 'user.name' config option)."
        required: true
        type: string
      git_email:
        description: "A git user's email address (used to set the 'user.email' config option)."
        required: true
        type: string
      release_branch:
        description: "The branch name to release/publish from."
        required: true
        type: string
        default: main
      # OPTIONAL
      python_package:
        description: "Whether or not this is a Python package, where the version should be updated in the 'package_dir'/__init__.py for the possibly several 'package_dir' lines given in the 'package_dirs' input and a build and release to PyPI should be performed."
        required: false
        type: boolean
        default: true
      package_dirs:
        description: "A single or multi-line string of paths to Python package directories relative to the repository directory to have its `__version__` value updated. Example: `'src/my_package'`. **Important**: This is _required_ if 'python_package' is 'true', which is the default."
        required: false
        type: string
        default: ""
      install_extras:
        description: "Any extras to install from the local repository through 'pip'. Must be encapsulated in square parentheses (`[]`) and be separated by commas (`,`) without any spaces. Example: `'[dev,release]'`."
        required: false
        type: string
        default: ""
      relative:
        description: "Whether or not to use install the local Python package(s) as an editable."
        required: false
        type: boolean
        default: false
      python_version_build:
        description: "The Python version to use for the workflow when building the package."
        required: false
        type: string
        default: "3.9"
      python_version_docs:
        description: "The Python version to use for the workflow when building the documentation."
        required: false
        type: string
        default: "3.9"
      version_update_changes:
        description: "A single or multi-line string of changes to be implemented in the repository files upon updating the version. The string should be made up of three parts: 'file path', 'pattern', and 'replacement string'. These are separated by the 'version_update_changes_separator' value. The 'file path' must _always_ either be relative to the repository root directory or absolute. The 'pattern' should be given as a 'raw' Python string."
        required: false
        type: string
        default: ""
      version_update_changes_separator:
        description: "The separator to use for 'version_update_changes' when splitting the three parts of each string."
        required: false
        type: string
        default: ","
      update_docs:
        description: "Whether or not to also run the 'docs' workflow job."
        required: false
        type: boolean
        default: false
      doc_extras:
        description: "Any extras to install from the local repository through 'pip'. Must be encapsulated in square parentheses (`[]`) and be separated by commas (`,`) without any spaces. Note, if this is empty, 'install_extras' will be used as a fallback. Example: `'[docs]'`."
        required: false
        type: string
        default: ""
      build_cmd:
        description: "The package build command, e.g., `'pip install flit && flit build'` or `'python -m build'` (default)."
        required: false
        type: string
        default: "python -m build"
      tag_message_file:
        description: "Relative path to a release tag message file from the root of the repository. Example: `'.github/utils/release_tag_msg.txt'`."
        required: false
        type: string
        default: ""
      test:
        description: "Whether to use the TestPyPI repository index instead of PyPI as well as output debug statements."
        required: false
        type: boolean
        default: false
      publish_on_pypi:
        description: "Whether or not to publish on PyPI. **Note**: This is only relevant if 'python_package' is 'true', which is the default."
        required: false
        type: boolean
        default: true
      changelog_exclude_tags_regex:
        description: "A regular expression matching any tags that should be excluded from the CHANGELOG.md."
        required: false
        type: string
        default: ""
      changelog_exclude_labels:
        description: "Comma-separated list of labels to exclude from the CHANGELOG.md."
        required: false
        type: string
        default: ""
    secrets:
      PyPI_token:
        description: "A PyPI token for publishing the built package to PyPI. **Important**: This is _required_ if both 'python_package' and 'publish_on_pypi' are 'true'. Both are 'true' by default."
        required: false
      PAT:
        description: "A personal access token (PAT) with rights to update the `release_branch`. This will fallback on `GITHUB_TOKEN`."
        required: false

jobs:
  update-and-publish:
    name: Update CHANGELOG and version and publish to PyPI
    # if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest

    steps:
    - name: Checkout ${{ github.repository }}
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up Python ${{ inputs.python_version_build }}
      uses: actions/setup-python@v4
      with:
        python-version: "${{ inputs.python_version_build }}"

    - name: Install Python dependencies
      run: |
        EDITABLE=
        if [ "${{ inputs.relative }}" == "true" ]; then EDITABLE=-e ; fi

        python -m pip install -U pip
        pip install -U setuptools wheel build
        pip install ${EDITABLE}.${{ inputs.install_extras }}
        pip install git+https://github.com/SINTEF/ci-cd.git@v2.1.0

    - name: Parse changelog configuration
      run: |
        if [ -n "${{ inputs.changelog_exclude_tags_regex }}" ]; then
          echo 'CHANGELOG_EXCLUDE_TAGS_REGEX=--exclude-tags-regex "${{ inputs.changelog_exclude_tags_regex }}"' >> $GITHUB_ENV
        else
          echo 'CHANGELOG_EXCLUDE_TAGS_REGEX=' >> $GITHUB_ENV
        fi
        if [ -n "${{ inputs.changelog_exclude_labels}}" ]; then
          echo 'CHANGELOG_EXCLUDE_LABELS=--exclude-labels "${{ inputs.changelog_exclude_labels }}"' >> $GITHUB_ENV
        else
          echo 'CHANGELOG_EXCLUDE_LABELS=' >> $GITHUB_ENV
        fi
        echo 'CHANGELOG_PROJECT=--project "$(echo $GITHUB_REPOSITORY | cut -d/ -f2- )"' >> $GITHUB_ENV

    - name: Update changelog
      uses: docker://githubchangeloggenerator/github-changelog-generator:1.16.2
      with:
        args: --user "${{ github.repository_owner }}" ${{ env.CHANGELOG_PROJECT }} --token "${{ secrets.PAT || secrets.GITHUB_TOKEN }}" --release-branch "${{ inputs.release_branch }}" ${{ env.CHANGELOG_EXCLUDE_TAGS_REGEX }} ${{ env.CHANGELOG_EXCLUDE_LABELS }}

    # - name: Update changelog
    #   uses: CharMixer/auto-changelog-action@v1
    #   with:
    #     token: ${{ secrets.PAT || secrets.GITHUB_TOKEN }}
    #     release_branch: ${{ inputs.release_branch }}
    #     exclude_tags_regex: "${{ inputs.changelog_exclude_tags_regex }}"
    #     exclude_labels: "${{ inputs.changelog_exclude_labels }}"

    - name: Set up git user
      run: |
        git config --global user.name "${{ inputs.git_username }}"
        git config --global user.email "${{ inputs.git_email }}"

    - name: Update version and tag
      run: |
        # REF=${{ github.ref }}
        # REF=${REF#refs/tags/}
        REF=v10.0.0

        if [ "${{ inputs.python_package }}" == "true" ]; then
          if [ -z "${{ inputs.package_dirs }}" ]; then
            echo "package_dirs MUST be supplied, since python_package was set to 'true'."
            exit 1
          fi

          DEBUG=
          if [ "${{ inputs.test }}" == "true" ]; then DEBUG=--test; fi

          PACKAGE_DIRS=()
          CODE_BASE_UPDATES=()
          while IFS= read -r line; do
            if [ -n "${line}" ]; then PACKAGE_DIRS+=(${line}); fi
          done <<< "${{ inputs.package_dirs }}"
          while IFS= read -r line; do
            if [ -n "${line}" ]; then CODE_BASE_UPDATES+=(--code-base-update="${line}"); fi
          done <<< "${{ inputs.version_update_changes }}"

          for package_dir in ${PACKAGE_DIRS}; do
            ci-cd setver ${DEBUG} \
              --version="${REF}" \
              --root-repo-path="${PWD}" \
              --package-dir="${package_dir}" \
              --code-base-update-separator="${{ inputs.version_update_changes_separator }}" \
              "${CODE_BASE_UPDATES[@]}"
          done
        fi

        git commit -am "Release ${REF} - Changelog"

        if [ -z "${{ inputs.tag_message_file }}" ] || [ ! -f "${{ inputs.tag_message_file }}" ]; then
          TAG_MSG_FILE=.tmp_tag-msg_${{ github.run_id }}_${{ github.run_number }}_${{ github.run_attempt }}.txt

          echo -e "TAG_NAME\n\nThe full release changelog can be seen in the\n[repository source file](https://github.com/${{ github.repository }}/blob/TAG_NAME/CHANGELOG.md)." > ${TAG_MSG_FILE}
          echo "Using default release tag message."
          REMOVE_TAG_MSG_FILE=true
        else
          echo "Using found release tag message text file at ${{ inputs.tag_message_file }}."
          TAG_MSG_FILE=${{ inputs.tag_message_file }}
          REMOVE_TAG_MSG_FILE=false
        fi

        sed -i "s|TAG_NAME|${REF}|" "${TAG_MSG_FILE}"
        git tag -af -F "${TAG_MSG_FILE}" ${REF}

        if [ "${REMOVE_TAG_MSG_FILE}" == "true" ]; then rm -f "${TAG_MSG_FILE}"; fi

        if [ "${{ inputs.test }}" == "true" ]; then echo "Implemented changes in new commit:" && git diff HEAD~1; fi

    - name: Build source distribution
      run: |
        # First, clean the git tree
        git checkout -- .
        ${{ inputs.build_cmd }}

    # - name: Update '${{ inputs.release_branch }}'
    #   uses: CasperWA/push-protected@v2
    #   with:
    #     token: ${{ secrets.PAT || secrets.GITHUB_TOKEN }}
    #     branch: ${{ inputs.release_branch }}
    #     sleep: 15
    #     force: true
    #     tags: true
    #     unprotect_reviews: true
    #     debug: ${{ inputs.test }}

    - name: Get tagged versions
      run: |
        if [ -n "${{ inputs.changelog_exclude_tags_regex }}" ]; then
          echo "PREVIOUS_VERSION=$(git tag -l --sort -version:refname | grep -v -E "${{ inputs.changelog_exclude_tags_regex }}" | sed -n 2p)" >> $GITHUB_ENV
        else
          echo "PREVIOUS_VERSION=$(git tag -l --sort -version:refname | sed -n 2p)" >> $GITHUB_ENV
        fi

    - name: Create release-specific changelog
      uses: docker://githubchangeloggenerator/github-changelog-generator:1.16.2
      with:
        args: --user "${{ github.repository_owner }}" ${{ env.CHANGELOG_PROJECT }} --token "${{ secrets.PAT || secrets.GITHUB_TOKEN }}" --release-branch "${{ inputs.release_branch }}" --since-tag "${{ env.PREVIOUS_VERSION }}" --output release_changelog.md ${{ env.CHANGELOG_EXCLUDE_TAGS_REGEX }} ${{ env.CHANGELOG_EXCLUDE_LABELS }}

    # - name: Create release-specific changelog
    #   uses: CharMixer/auto-changelog-action@v1
    #   with:
    #     token: ${{ secrets.PAT || secrets.GITHUB_TOKEN }}
    #     release_branch: ${{ inputs.release_branch }}
    #     since_tag: "${{ env.PREVIOUS_VERSION }}"
    #     output: "release_changelog.md"
    #     exclude_tags_regex: "${{ inputs.changelog_exclude_tags_regex }}"
    #     exclude_labels: "${{ inputs.changelog_exclude_labels }}"

    # - name: Append changelog to release body
    #   run: |
    #     gh api /repos/${{ github.repository }}/releases/${{ github.event.release.id }} --jq '.body' > release_body.md
    #     cat release_changelog.md >> release_body.md
    #     gh api /repos/${{ github.repository }}/releases/${{ github.event.release.id }} -X PATCH -F body='@release_body.md'
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.PAT || secrets.GITHUB_TOKEN }}

    # - name: Publish package to TestPyPI
    #   if: inputs.test && inputs.publish_on_pypi && inputs.python_package
    #   uses: pypa/gh-action-pypi-publish@v1.6.4
    #   with:
    #     user: __token__
    #     password: ${{ secrets.PyPI_token }}
    #     repository_url: https://test.pypi.org/legacy/

    # - name: Publish package to PyPI
    #   if: ( ! inputs.test ) && inputs.publish_on_pypi && inputs.python_package
    #   uses: pypa/gh-action-pypi-publish@v1.6.4
    #   with:
    #     user: __token__
    #     password: ${{ secrets.PyPI_token }}

  docs:
    name: Deploy release documentation
    needs: update-and-publish
    runs-on: ubuntu-latest
    if: inputs.update_docs

    steps:
    - name: Checkout ${{ github.repository }}
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        ref: ${{ inputs.release_branch }}

    - name: Set up Python ${{ inputs.python_version_docs }}
      uses: actions/setup-python@v4
      with:
        python-version: "${{ inputs.python_version_docs }}"

    - name: Install Python dependencies
      run: |
        EDITABLE=
        if [ "${{ inputs.relative }}" == "true" ]; then EDITABLE=-e ; fi

        python -m pip install -U pip
        pip install -U setuptools wheel
        pip install ${EDITABLE}.${{ inputs.doc_extras || inputs.install_extras }}

    - name: Set up git user
      run: |
        git config --global user.name "${{ inputs.git_username }}"
        git config --global user.email "${{ inputs.git_email }}"

    - name: Deploy documentation
      run: |
        REF=${{ github.ref }}
        if [ "${{ inputs.test }}" == "true" ]; then
          echo "Will here deploy documentation using 'mike', first one called '${REF#refs/tags/v}' with alias 'stable'"
          echo "Then one called 'latest' with alias '${{ inputs.release_branch }}'"
        else
          mike deploy --push --remote origin --branch gh-pages --update-aliases --config-file mkdocs.yml ${REF#refs/tags/v} stable
          mike deploy --push --remote origin --branch gh-pages --update-aliases --config-file mkdocs.yml latest ${{ inputs.release_branch }}
        fi
