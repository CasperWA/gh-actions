name: CI - Tests

on:
  pull_request:
  push:
    branches:
      - 'main'
      - 'push-action/**'

jobs:
  base-tests:
    name: Call reusable workflow
    uses: ./.github/workflows/ci_tests.yml
    with:
      # general
      install_extras: "[dev,docs,testing]"

      # pre-commit
      skip_pre-commit_hooks: pylint,pylint-tests

      # pylint
      pylint_runs: |
        --rcfile=pyproject.toml ci_cd
        --rcfile=pyproject.toml --disable=import-outside-toplevel,redefined-outer-name tests

      # build dist
      build_libs: flit
      build_cmd: flit build

      # build docs
      update_python_api_ref: true
      update_docs_landing_page: false
      package_dirs: ci_cd
      debug: false

  pytest:
    name: pytest
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.7", "3.8", "3.9", "3.10"]
        os: ["ubuntu-latest", "windows-latest"]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version}}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version}}

    - name: Install Python dependencies
      run: |
        python -m pip install -U pip
        pip install -U setuptools wheel flit
        pip install -e .[testing]

    - name: Test with pytest
      run: pytest -vvv --cov=ci_cd --cov-report=xml

    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.9' && github.repository == 'SINTEF/ci-cd'
      uses: codecov/codecov-action@v3
      with:
        fail_ci_if_error: true
        token: ${{ secrets.CODECOV_TOKEN }}

  # These jobs are mainly to test a default run of the hooks including `--pre-commit`
  run_hooks:
    name: Run custom pre-commit hooks
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.7", "3.10"]
        os: ["ubuntu-latest", "windows-latest"]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version}}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version}}

    - name: Install Python dependencies
      run: |
        python -m pip install -U pip
        pip install -U setuptools wheel flit
        pip install -e .
        pip install -U pre-commit

    # docs-api-reference
    - name: Run docs-api-reference ('ci-cd create-api-reference-docs')
      continue-on-error: true
      id: docs_api_reference
      run: |
        {
          echo 'docs_api_reference_output<<EOF'
          pre-commit run -c .github/utils/.pre-commit-config_testing.yaml --all-files --verbose docs-api-reference
          echo EOF
        } >> "$GITHUB_ENV"

    - name: Check if failure is expected/acceptible
      if: steps.docs_api_reference.outcome == 'failure'
      run: printf '%s\n' "$docs_api_reference_output" | grep "The following files have been changed/added/removed:" | exit 0 || exit 1
      shell: bash

    - name: Run docs-api-reference ('ci-cd create-api-reference-docs') (cmd)
      if: runner.os == 'Windows'
      continue-on-error: true
      id: docs_api_reference_cmd
      run: |
        {
          echo 'docs_api_reference_output<<EOF'
          pre-commit run -c .github/utils/.pre-commit-config_testing.yaml --all-files --verbose docs-api-reference
          echo EOF
        } >> "$GITHUB_ENV"
      shell: cmd

    - name: Check if failure is expected/acceptible
      if: runner.os == 'Windows' && steps.docs_api_reference_cmd.outcome == 'failure'
      run: printf '%s\n' "$docs_api_reference_output" | grep "The following files have been changed/added/removed:" | exit 0 || exit 1
      shell: bash

    # docs-landing-page
    - name: Run docs-landing-page ('ci-cd create-docs-index')
      continue-on-error: true
      id: docs_landing_page
      run: |
        {
          echo 'docs_landing_page_output<<EOF'
          pre-commit run -c .github/utils/.pre-commit-config_testing.yaml --all-files --verbose docs-landing-page
          echo EOF
        } >> "$GITHUB_ENV"

    - name: Check if failure is expected/acceptible
      if: steps.docs_landing_page.outcome == 'failure'
      run: printf '%s\n' "$docs_landing_page_output" | grep "The landing page has been updated." | exit 0 || exit 1
      shell: bash

    - name: Run docs-landing-page ('ci-cd create-docs-index') (cmd)
      if: runner.os == 'Windows'
      continue-on-error: true
      id: docs_landing_page_cmd
      run: |
        {
          echo 'docs_landing_page_output<<EOF'
          pre-commit run -c .github/utils/.pre-commit-config_testing.yaml --all-files --verbose docs-landing-page
          echo EOF
        } >> "$GITHUB_ENV"
      shell: cmd

    - name: Check if failure is expected/acceptible
      if: runner.os == 'Windows' && steps.docs_landing_page_cmd.outcome == 'failure'
      run: printf '%s\n' "$docs_landing_page_output" | grep "The landing page has been updated." | exit 0 || exit 1
      shell: bash

    # update-pyproject
    - name: Run update-pyproject ('ci-cd update-deps')
      continue-on-error: true
      id: update_pyproject
      run: |
        {
          echo 'update_pyproject_output<<EOF'
          pre-commit run -c .github/utils/.pre-commit-config_testing.yaml --all-files --verbose update-pyproject
          echo EOF
        } >> "$GITHUB_ENV"

    - name: Check if failure is expected/acceptible
      if: steps.update_pyproject.outcome == 'failure'
      run: printf '%s\n' "$update_pyproject_output" | grep "Successfully updated the following dependencies:" | exit 0 || exit 1
      shell: bash

    - name: Run update-pyproject ('ci-cd update-deps') (cmd)
      if: runner.os == 'Windows'
      continue-on-error: true
      id: update_pyproject_cmd
      run: |
        {
          echo 'update_pyproject_output<<EOF'
          pre-commit run -c .github/utils/.pre-commit-config_testing.yaml --all-files --verbose update-pyproject
          echo EOF
        } >> "$GITHUB_ENV"
      shell: cmd

    - name: Check if failure is expected/acceptible
      if: runner.os == 'Windows' && steps.update_pyproject_cmd.outcome == 'failure'
      run: printf '%s\n' "$update_pyproject_output" | grep "Successfully updated the following dependencies:" | exit 0 || exit 1
      shell: bash

    # set-version
    - name: Run 'ci-cd setver'
      continue-on-error: true
      id: set_version
      run: |
        {
          echo 'set_version_output<<EOF'
          pre-commit run -c .github/utils/.pre-commit-config_testing.yaml --all-files --verbose set-version
          echo EOF
        } >> "$GITHUB_ENV"

    - name: Check if failure is expected/acceptible
      if: steps.set_version.outcome == 'failure'
      run: printf '%s\n' "$set_version_output" | grep "Bumped version for ci_cd to 0.0.0." | exit 0 || exit 1
      shell: bash

    - name: Run 'ci-cd setver' (cmd)
      if: runner.os == 'Windows'
      continue-on-error: true
      id: set_version_cmd
      run: |
        {
          echo 'set_version_output<<EOF'
          pre-commit run -c .github/utils/.pre-commit-config_testing.yaml --all-files --verbose set-version
          echo EOF
        } >> "$GITHUB_ENV"

    - name: Check if failure is expected/acceptible
      if: runner.os == 'Windows' && steps.set_version_cmd.outcome == 'failure'
      run: printf '%s\n' "$set_version_output" | grep "Bumped version for ci_cd to 0.0.0." | exit 0 || exit 1
      shell: bash
