name: CI/CD - New updates to default branch

on:
  workflow_call:
    inputs:
      # REQUIRED
      git_username:
        description: "A git username (used to set the 'user.name' config option)."
        required: true
        type: string
      git_email:
        description: "A git user's email address (used to set the 'user.email' config option)."
        required: true
        type: string
      # OPTIONAL
      permanent_dependencies_branch:
        description: "The branch name for the permanent dependency updates branch."
        required: false
        type: string
        default: "ci/dependency-updates"
      default_repo_branch:
        description: "The branch name of the repository's default branch. More specifically, the branch that triggered this workflow."
        required: false
        type: string
        default: main
      update_dependencies_pr_body_file:
        description: "Relative path to a PR body file from the root of the repository, which is used in the 'CI - Update dependencies PR' workflow, if used. Example: `'.github/utils/pr_body_update_deps.txt'`."
        required: false
        type: string
        default: ""
      update_docs:
        description: "Whether or not to also update the documentation."
        required: false
        type: boolean
        default: false
      update_python_api_ref:
        description: "Whether or not to update the Python API documentation reference. **Note**: If this is 'true', 'package_dir' is _required_."
        required: false
        type: boolean
        default: true
      package_dir:
        description: "Path to the Python package directory relative to the repository directory. Example: `'src/my_package'`. **Important**: This is _required_ if 'update_docs' and 'update_python_api_ref' are 'true'."
        required: false
        type: string
        default: ""
      update_docs_landing_page:
        description: "Whether or not to update the documentation landing page. The landing page will be based on the root README.md file."
        required: false
        type: boolean
        default: true
      python_version:
        description: "The Python version to use for the workflow when building the documentation."
        required: false
        type: string
        default: "3.9"
      doc_extras:
        description: "Any extras to install from the local repository through 'pip'. Must be encapsulated in square parentheses (`[]`) and be separated by commas (`,`) without any spaces. Example: `'[docs]'`."
        required: false
        type: string
        default: ""
      relative:
        description: "Whether or not to use install the local Python package(s) as an editable."
        required: false
        type: boolean
        default: false
      exclude_dirs:
        description: "A single or multi-line string of directories to exclude in the Python API reference documentation. Note, only directory names, not paths, may be included. Note, all folders and their contents with these names will be excluded. Defaults to `'__pycache__'`. Important: When a user value is set, the preset value is overwritten - hence `'__pycache__'` should be included in the user value if one wants to exclude these directories."
        required: false
        type: string
        default: "__pycache__"
      exclude_files:
        description: "A single or multi-line string of files to exclude in the Python API reference documentation. Note, only full file names, not paths, may be included, i.e., filename + file extension. Note, all files with these names will be excluded. Defaults to `'__init__.py'`. Important: When a user value is set, the preset value is overwritten - hence `'__init__.py'` should be included in the user value if one wants to exclude these files."
        required: false
        type: string
        default: "__init__.py"
      full_docs_dirs:
        description: "A single or multi-line string of directories in which to include everything - even those without documentation strings. This may be useful for a module full of data models or to ensure all class attributes are listed."
        required: false
        type: string
        default: ""
      landing_page_replacements:
        description: "A single or multi-line string of replacements (mappings) to be performed on README.md when creating the documentation's landing page (index.md). This list ALWAYS includes replacing `'docs/'` with an empty string to correct relative links, i.e., this cannot be overwritten. By default `'(LICENSE)'` is replaced by `'(LICENSE.md)'`."
        required: false
        type: string
        default: "(LICENSE),(LICENSE.md)"
      landing_page_replacement_separator:
        description: "String to separate a replacement's 'old' to 'new' parts. Defaults to a comma (`,`)."
        required: false
        type: string
        default: ","
      test:
        description: "Whether to do a \"dry run\", i.e., run the workflow, but avoid pushing to 'permanent_dependencies_branch' branch and deploying documentation (if 'update_docs' is 'true')."
        required: false
        type: boolean
        default: false
      changelog_exclude_tags_regex:
        description: "A regular expression matching any tags that should be excluded from the CHANGELOG.md."
        required: false
        type: string
        default: ""
      changelog_exclude_labels:
        description: "Comma-separated list of labels to exclude from the CHANGELOG.md."
        required: false
        type: string
        default: ""
    secrets:
      PAT:
        description: "A personal access token (PAT) with rights to update the `permanent_dependencies_branch`. This will fallback on `GITHUB_TOKEN`."
        required: false

jobs:
  deploy_docs:
    name: Deploy `latest` documentation
    runs-on: ubuntu-latest
    if: inputs.update_docs

    steps:
    - name: Release check
      run: |
        COMMIT_MSG="$(gh api /repos/${{ github.repository}}/commits/${{ inputs.default_repo_branch }} --jq '.commit.message')"
        if [[ "${COMMIT_MSG}" =~ ^Release\ v.*$ ]] || [ "${COMMIT_MSG}" == "[bot] Update documentation" ]; then
          echo "In a release or just ran this job - do not run this job !"
          echo "RELEASE_RUN=true" >> $GITHUB_ENV
        else
          echo "Not a release and did not just run this job - update docs"
          echo "RELEASE_RUN=false" >> $GITHUB_ENV
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Checkout ${{ github.repository }}
      if: env.RELEASE_RUN == 'false'
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up Python ${{ inputs.python_version }}
      if: env.RELEASE_RUN == 'false'
      uses: actions/setup-python@v4
      with:
        python-version: "${{ inputs.python_version }}"

    - name: Install Python dependencies
      if: env.RELEASE_RUN == 'false'
      run: |
        EDITABLE=
        if [ "${{ inputs.relative }}" == "true" ]; then EDITABLE=-e ; fi

        python -m pip install --upgrade pip
        pip install -U setuptools wheel
        pip install ${EDITABLE}.${{ inputs.doc_extras }}
        pip install git+https://github.com/SINTEF/ci-cd.git@v1

    - name: Set up git user
      if: env.RELEASE_RUN == 'false'
      run: |
        git config --global user.name "${{ inputs.git_username }}"
        git config --global user.email "${{ inputs.git_email }}"

    - name: Clean working tree
      if: env.RELEASE_RUN == 'false'
      run: git checkout -- .

    - name: Update API Reference
      if: env.RELEASE_RUN == 'false' && inputs.update_python_api_ref
      run: |
        if [ -z "${{ inputs.package_dir }}" ]; then
          echo "package_dir MUST be supplied, since update_docs and update_python_api_ref were set to 'true'."
          exit 1
        fi

        DEBUG=
        RELATIVE=
        if [ "${{ inputs.test }}" == "true" ]; then DEBUG=--debug; fi
        if [ "${{ inputs.relative }}" == "true" ]; then RELATIVE=--relative; fi

        UNWANTED_FOLDERS=()
        UNWANTED_FILES=()
        FULL_DOCS_FOLDERS=()
        while IFS= read -r line; do
          if [ -n "${line}" ]; then UNWANTED_FOLDERS+=(--unwanted-folder="${line}"); fi
        done <<< "${{ inputs.exclude_dirs }}"
        while IFS= read -r line; do
          if [ -n "${line}" ]; then UNWANTED_FILES+=(--unwanted-file="${line}"); fi
        done <<< "${{ inputs.exclude_files }}"
        while IFS= read -r line; do
          if [ -n "${line}" ]; then FULL_DOCS_FOLDERS+=(--full-docs-folder="${line}"); fi
        done <<< "${{ inputs.full_docs_dirs }}"

        ci-cd create-api-reference-docs ${DEBUG} ${RELATIVE} \
          --pre-clean \
          --root-repo-path=${PWD} \
          --package-dir="${{ inputs.package_dir }}" \
          "${UNWANTED_FOLDERS[@]}" \
          "${UNWANTED_FILES[@]}" \
          "${FULL_DOCS_FOLDERS[@]}"

    - name: Update landing page
      if: env.RELEASE_RUN == 'false' && inputs.update_docs_landing_page
      run: |
        # Ensure the default replacement for LICENSE linking works
        # with a custom separator
        LANDING_PAGE_REPLACEMENTS="${{ inputs.landing_page_replacements }}"
        if [ "${{ inputs.landing_page_replacement_separator }}" != "," ] && [ "${{ inputs.landing_page_replacements }}" == "(LICENSE),(LICENSE.md)" ]; then
          LANDING_PAGE_REPLACEMENTS="${LANDING_PAGE_REPLACEMENTS/,/${{ inputs.landing_page_replacement_separator }}}"
        fi

        REPLACEMENTS=()
        while IFS= read -r line; do
          if [ -n "${line}" ]; then REPLACEMENTS+=(--replacement="${line}"); fi
        done <<< "${LANDING_PAGE_REPLACEMENTS}"

        ci-cd create-docs-index \
          --root-repo-path=${PWD} \
          --replacement-separator="${{ inputs.landing_page_replacement_separator }}" \
          "${REPLACEMENTS[@]}"

    - name: Determine if documentation was updated
      if: env.RELEASE_RUN == 'false'
      run: |
        if [ -n "$(git status --porcelain docs/api_reference docs/index.md)" ]; then
          echo -e "\u27b0 Discrepancies found !"
          echo -e "The following files in the documentation will be committed:"
          git status --porcelain docs/api_reference docs/index.md

          if [ -n "$(git status --porcelain docs/api_reference)" ]; then
            git add docs/api_reference
          fi
          if [ -n "$(git status --porcelain docs/index.md)" ]; then
            git add docs/index.md
          fi

          git commit -m "[bot] Update documentation"
          echo "UPDATE_DEFAULT_BRANCH=true" >> $GITHUB_ENV
        else
          echo -e "\u2714 All good !"
          echo "UPDATE_DEFAULT_BRANCH=false" >> $GITHUB_ENV
        fi

    - name: Update '${{ inputs.default_repo_branch }}'
      if: env.RELEASE_RUN == 'false' && env.UPDATE_DEFAULT_BRANCH == 'true' && ( ! inputs.test )
      uses: CasperWA/push-protected@v2
      with:
        token: ${{ secrets.PAT || secrets.GITHUB_TOKEN }}
        branch: ${{ inputs.default_repo_branch }}
        sleep: 15
        force: true
        tags: true
        unprotect_reviews: true

    # Note: This updated changelog will only exist for the `latest` documentation
    # release.
    - name: Update changelog with unreleased changes
      if: env.RELEASE_RUN == 'false'
      uses: CharMixer/auto-changelog-action@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        release_branch: ${{ inputs.default_repo_branch }}
        exclude_tags_regex: "${{ inputs.changelog_exclude_tags_regex }}"
        exclude_labels: "${{ inputs.changelog_exclude_labels }}"
        future_release: "Unreleased changes"

    - name: Deploy documentation
      if: env.RELEASE_RUN == 'false' && ( ! inputs.test )
      run: mike deploy --push --remote origin --branch gh-pages --update-aliases --config-file mkdocs.yml latest ${{ inputs.default_repo_branch }}

  update-dependencies-branch:
    name: Update permanent dependencies branch
    runs-on: ubuntu-latest
    needs: deploy_docs
    if: always()

    steps:
    - name: Checkout ${{ github.repository }}
      uses: actions/checkout@v3
      with:
        ref: ${{ inputs.permanent_dependencies_branch }}
        fetch-depth: 0

    - name: Set up git config
      run: |
        git config --global user.name "${{ inputs.git_username }}"
        git config --global user.email "${{ inputs.git_email }}"

    - name: Get PR body
      run: |
        if [ -z "${{ inputs.update_dependencies_pr_body_file }}" ] || [ ! -f "${{ inputs.update_dependencies_pr_body_file }}" ]; then
          PR_BODY_FILE=.tmp_pr-body_${{ github.run_id }}_${{ github.run_number }}_${{ github.run_attempt }}.txt
          echo "PR_BODY_FILE=${PR_BODY_FILE}" >> $GITHUB_ENV

          echo -e "### Update dependencies\n\nAutomatically created PR from [\`${{ inputs.permanent_dependencies_branch }}\`](https://github.com/${{ github.repository }}/tree/${{ inputs.permanent_dependencies_branch }}).\n\nThe PR is based on the ['CI - Update dependencies PR' workflow](https://SINTEF.github.io/ci-cd/latest/workflows/ci_update_dependencies/) in [SINTEF/ci-cd](https://github.com/SINTEF/ci-cd).\n\n#### To do\n" > ${PR_BODY_FILE}
          echo "Using default PR body (similar to the one used in the 'CI - Update dependencies PR' workflow)."
          echo "REMOVE_PR_BODY_FILE=true" >> $GITHUB_ENV
        else
          echo "Using found PR body text file at ${{ inputs.update_dependencies_pr_body_file }}."
          echo "PR_BODY_FILE=${{ inputs.update_dependencies_pr_body_file }}" >> $GITHUB_ENV
          echo "REMOVE_PR_BODY_FILE=false" >> $GITHUB_ENV
        fi

    - name: Update '${{ inputs.permanent_dependencies_branch }}'
      run: |
        git fetch origin

        LATEST_PR_BODY="$(gh api /repos/${{ github.repository}}/pulls -X GET -f state=closed -f per_page=1 -f sort=updated -f direction=desc --jq '.[].body')"
        cat ${{ env.PR_BODY_FILE }} | head -8 > .tmp_file.txt
        if [ -z "$(printf '%s\n' "${LATEST_PR_BODY}" | head -8 | diff - .tmp_file.txt --strip-trailing-cr)" ]; then
          echo "The dependencies have just been updated! Reset to ${{ inputs.default_repo_branch }}."
          git reset --hard origin/${{ inputs.default_repo_branch }}
          echo "FORCE_PUSH=yes" >> $GITHUB_ENV
        else
          echo "Merge new updates to ${{ inputs.default_repo_branch }} into ${{ inputs.permanent_dependencies_branch }}"
          git merge -m "Keep '${{ inputs.permanent_dependencies_branch }}' up-to-date with '${{ inputs.default_repo_branch }}'" origin/${{ inputs.default_repo_branch }}
          echo "FORCE_PUSH=no" >> $GITHUB_ENV
        fi

        if [ "${{ env.REMOVE_PR_BODY_FILE }}" == "true" ] && [ -f "${{ env.PR_BODY_FILE }}" ]; then
          rm -f "${{ env.PR_BODY_FILE }}"
        fi
        if [ -f ".tmp_file.txt" ]; then rm -f .tmp_file.txt; fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Push to '${{ inputs.permanent_dependencies_branch }}'
      if: "! inputs.test"
      uses: CasperWA/push-protected@v2
      with:
        token: ${{ secrets.PAT || secrets.GITHUB_TOKEN }}
        branch: ${{ inputs.permanent_dependencies_branch }}
        sleep: 15
        force: ${{ env.FORCE_PUSH }}
